import BackgroundTimer from 'react-native-background-timer';
import { Platform } from 'react-native';
import { useEffect, useRef } from 'react';

export const setCustTimeout = (
    callback: () => void,
    interval: number,
  ): NodeJS.Timeout | number => {
    return Platform.OS === 'ios'
      ? setTimeout(callback, interval)
      : BackgroundTimer.setTimeout(callback, interval);
  };
  
  export const clearCustTimeout = (id: NodeJS.Timeout | number) => {
    Platform.OS === 'ios'
      ? clearTimeout(id as NodeJS.Timeout)
      : BackgroundTimer.clearTimeout(id as number);
  };

export const setCustInterval = (
  callback: () => void,
  interval: number,
): NodeJS.Timeout | number => {
  return Platform.OS === 'ios'
    ? setInterval(callback, interval)
    : BackgroundTimer.setInterval(callback, interval);
};

export const clearCustInterval = (id: NodeJS.Timeout | number) => {
  Platform.OS === 'ios'
    ? clearInterval(id as NodeJS.Timeout)
    : BackgroundTimer.clearInterval(id as number);
};

export const useInterval = (callback: (output: number) => void, delay: number) => {
    const savedCallback = useRef(callback);
    var delayTime = useRef(0);
  
    // Remember the latest function.
    useEffect(() => {
      if (savedCallback) savedCallback.current = callback;
    }, [callback]);
  
    // Set up the interval.
    useEffect(() => {
      function tick() {
        delayTime.current = delayTime.current + delay;
        savedCallback.current(delayTime.current);
      }
      if (delay !== null) {
        const id = setCustInterval(tick, delay);
          return () => {
            delayTime.current = 0;
            clearCustInterval(id);
          };
      }
    }, [delay]);
  }
