import React, { useState, useEffect } from "react";
import {
  View,
  ViewProps,
} from "react-native";
import {
  SelectionButtonProps,
  SelectionButton,
  SelectionStatus,
  SelectionColorStatus,
  SelectionImageStatus,
} from "./SelectionButton";

type SingleSelectPayload = {
  dataSet: Array<SelectionButtonProps>;
  customIcon?: { image: SelectionImageStatus , color: SelectionColorStatus};
};
type SingleSelectProps = ViewProps & {
  payload: SingleSelectPayload;
};

export function useSingleSelect({ payload, ...props }: SingleSelectProps): [JSX.Element, string | number | undefined, Array<SelectionButtonProps>, React.Dispatch<React.SetStateAction<SelectionButtonProps[]>>] {
  const { dataSet, customIcon } = payload;
  const { style } = props;
  const [value, setValue] = useState<Array<SelectionButtonProps>>(dataSet);

  useEffect(() => {
    const onItem = value.find((item) => item.payload.status === SelectionStatus.on);
    if (onItem) {
      setSelectedId(onItem.payload.id);
    } else {
      setSelectedId(undefined);
    }
  }, [value])

  const [selectedId, setSelectedId] =
    useState<string | number | undefined>(undefined);

  useEffect(() => {
    setValue(
      value.map((clickedItem) => {
        clickedItem.payload.status =
          clickedItem.payload.id === selectedId
            ? SelectionStatus.on
            : SelectionStatus.off;
        return clickedItem;
      })
    );
  }, [selectedId]);

  const layout = (
    <View
      style={[
        style,
        {
          flexDirection: "column",
        },
      ]}
    >
      {value.map((item, index) => {
        const { style } = item;
        return <SelectionButton payload={ customIcon ? {
          ...item.payload,
          onPress : (id: string | number) => {
            setSelectedId(id);
          },
          status: selectedId === item.payload.id ? SelectionStatus.on : SelectionStatus.off,
          customIconSet: customIcon.image ? customIcon.image : undefined,
          customIconColor: customIcon.color ? customIcon.color : undefined,
        } : item.payload } style={[style, 
          index === 0 ? {} : { marginTop: 4 }
        ]} />;
      })}
    </View>
  );
  return [layout, selectedId, value, setValue];
}
