import React, { useState, useEffect } from "react";
import {
  View,
  ViewProps,
} from "react-native";
import {
  SelectionButtonProps,
  SelectionButton,
  SelectionStatus,
  SelectionColorStatus,
  SelectionImageStatus,
} from "./SelectionButton";

type MultipleSelectPayload = {
  dataSet: Array<SelectionButtonProps>;
  customIcon?: { image: SelectionImageStatus , color: SelectionColorStatus};
  icon?: any|null;
};
type MultipleSelectProps = ViewProps & {
  payload: MultipleSelectPayload;
};

export function useMultipleSelect({ payload, ...props }: MultipleSelectProps): [JSX.Element, (string | number)[], Array<SelectionButtonProps>, React.Dispatch<React.SetStateAction<SelectionButtonProps[]>>] {
  const { dataSet, customIcon,icon } = payload;
  const { style } = props;
  const [value, setValue] = useState<Array<SelectionButtonProps>>(dataSet);

  useEffect(() => {
    var ids: Array<string | number> = [];
    value.forEach((item) => {
      if (item.payload.status == SelectionStatus.on) {
        ids.push(item.payload.id);
      }
    })
    setSelectedIds(ids);
  }, [value])

  const [selectedIds, setSelectedIds] =
    useState<Array<string | number>>([]);

  const layout = (
    <View
      style={[
        style,
        {
          flexDirection: "column",
        },
      ]}
    >
      {value.map((item, index) => {
        const { style } = item;
        return <SelectionButton payload={ customIcon ? {
          ...item.payload,
          status: selectedIds.find(id => id === item.payload.id)
          ? SelectionStatus.on
          : SelectionStatus.off,
          onPress: (id) => {
            const index = selectedIds.findIndex(item => item == id);
            const isNewItem = index === -1;
            if (isNewItem) {
              const ids = Array.from(selectedIds);
              ids.push(id);
              setSelectedIds(ids);
            } else {
              const ids = Array.from(selectedIds);
              ids.splice(index, 1)
              setSelectedIds(ids);
            }
          },
          icon: icon,
          customIconSet: customIcon.image ? customIcon.image : undefined,
          customIconColor: customIcon.color ? customIcon.color : undefined,
        } : item.payload} style={[style, 
          index === 0 ? {} : { marginTop: 4 }
        ]} />;
      })}
    </View>
  );
  return [layout, selectedIds, value, setValue];
}
