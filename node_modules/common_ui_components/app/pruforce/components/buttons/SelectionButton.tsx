import React, { FC } from 'react';
import { TouchableOpacity, Text, Image, ViewProps } from 'react-native';
import { getImages } from '../../assets';
import { Colors, Fonts } from '../../style';

type SelectionButtonPayload = {
  text: string;
  icon?: number | null;
  status: SelectionStatus;
  disabled?: boolean;
  id: string | number;
  onPress?: (id: string | number) => void;
  customIconSet?: SelectionImageStatus;
  customIconColor?: SelectionColorStatus;
  customTextColor?: SelectionColorStatus;
};
export type SelectionButtonProps = ViewProps & {
  payload: SelectionButtonPayload;
};

export enum SelectionStatus {
  on = 'on',
  off = 'off',
}

export type SelectionColorStatus = {
  [id in SelectionStatus]: string | undefined;
};
export type SelectionImageStatus = {
  [id in SelectionStatus]: number | undefined;
};
const backgroundColor: SelectionColorStatus = {
  on: Colors.cobaltLightest,
  off: Colors.greyFF,
};
const iconSet: SelectionImageStatus = {
  on: getImages.radioOn,
  off: getImages.radioOff,
};
const iconColor: SelectionColorStatus = {
  on: Colors.cobalt,
  off: Colors.greyBA,
};
const textColor: SelectionColorStatus = {
  on: Colors.cobalt,
  off: Colors.dark33,
};

export const SelectionButton: FC<SelectionButtonProps> = ({ payload, ...props }) => {
  const { text, icon, status, disabled, id, onPress, customIconSet, customIconColor, customTextColor } = payload;
  const { style } = props;
  const optionIconSize = 18;
  const displayIconSize = 20;

  return (
    <TouchableOpacity
      style={[
        {
          flexDirection: 'row',
          borderRadius: 12,
          backgroundColor: disabled ? Colors.greyFF : backgroundColor[status],
          padding: 16,
        },
        style,
      ]}
      disabled={disabled}
      onPress={() => (onPress ? onPress(id) : {})}>
      <Image
        source={customIconSet? customIconSet[status] : iconSet[status]}
        style={{
          width: optionIconSize,
          height: optionIconSize,
          tintColor: disabled ? Colors.greyC1 : (customIconColor ? customIconColor[status] : iconColor[status]),
        }}
      />
      { icon === null ? null : <Image
        source={icon ?? getImages.savings}
        style={{
          width: displayIconSize,
          height: displayIconSize,
          tintColor: disabled ? Colors.greyC1 : iconColor[status],
          marginStart: 16,
        }}
      /> }
      <Text
        style={[
          Fonts.label.font14Medium,
          {
            color: disabled ? Colors.greyC1 : (customTextColor ? customTextColor[status]: textColor[status]),
            marginStart: 8,
            flex: 1,
          },
        ]}>
        {text}
      </Text>
    </TouchableOpacity>
  );
};
