import React, { FC, useState, useEffect } from 'react';
import { View, Text, Image, ViewProps, TextInput } from 'react-native';
import { getImages } from '../../assets';
import { Colors, Fonts } from '../../style';

export type PruInputFieldPayload = {
  title?: string;
  placeholder?: string;
  defaultInput?: string;
  disabled?: boolean;
  errorMessage?: string;
  validation?: (input: string) => boolean | { isValid: boolean; errorMessage?: string };
  maxLength?: number;
  textInputProps?: ViewProps;
  onStatusChange: (status: InputFieldStatus) => void;
};
export type PruInputFieldProps = ViewProps & {
  payload: PruInputFieldPayload;
};

enum InputFieldStatus {
  default = 'default',
  active = 'active',
  disable = 'disable',
  error = 'error',
  successful = 'successful',
}

type InputFieldImageStatus = {
  [id in InputFieldStatus]?: number;
};

type InputFieldColorStatus = {
  [id in InputFieldStatus]: string;
};
const backgroundColor: InputFieldColorStatus = {
  default: Colors.greyFF,
  active: Colors.cobaltLightest,
  disable: Colors.greyFF,
  error: Colors.redLight2,
  successful: Colors.greyFF,
};
const lineColor: InputFieldColorStatus = {
  default: Colors.greyF0,
  active: Colors.cobalt,
  disable: Colors.greyF0,
  error: Colors.primary,
  successful: Colors.green,
};
const icons: InputFieldImageStatus = {
  default: undefined,
  active: undefined,
  disable: undefined,
  error: getImages.attention,
  successful: getImages.tick,
};

export function useInputField({ payload, ...props }: PruInputFieldProps) {
  const {
    title,
    placeholder,
    disabled,
    defaultInput,
    errorMessage,
    validation,
    maxLength,
    textInputProps,
    onStatusChange,
  } = payload;

  const [status, setStatus] = useState<InputFieldStatus>(InputFieldStatus.default);
  const [errorMsg, setErrorMsg] = useState(errorMessage);
  const [value, setValue] = useState(defaultInput);

  function inputValidation(value: string) {
    if (status == InputFieldStatus.default && !value) {
      // skip this case which is defaultcase
    }
    else if (validation) {
      const result = validation(value ?? "");
      if (typeof result == "boolean") {
        setStatus(
          result ? InputFieldStatus.successful : InputFieldStatus.error
        );
      } else {
        const { isValid, errorMessage } = result;
        setStatus(
          isValid ? InputFieldStatus.successful : InputFieldStatus.error
        );
        if (errorMessage) {
          setErrorMsg(errorMessage);
        }
      }
    }
  }

  useEffect(() => {
    if (onStatusChange) onStatusChange(status);
    return () => {};
  }, [status]);

  useEffect(() => {
    inputValidation(value ?? "")
  }, [value]);

  const { style } = props;
  const textColor = disabled ? Colors.grey85 : Colors.dark33;
  const bkColor = backgroundColor[status];
  const iconSize = 18;
  const inputField = (
    <View
      style={[
        {
          flexDirection: 'column',
        },
        style,
      ]}>
      <View
        style={{
          flexDirection: 'column',
          backgroundColor: bkColor,
        }}>
        {title ? (
          <Text
            style={[
              Fonts.label.font14Bold,
              {
                color: Colors.dark33,
                textAlignVertical: 'center',
              },
            ]}>
            {title}
          </Text>
        ) : null}
        <View
          style={{
            marginTop: 4,
            marginHorizontal: 8,
            flexDirection: 'row',
          }}>
          <TextInput
            style={[
              Fonts.input.font16Regular,
              {
                color: textColor,
                flex: 1,
              },
              textInputProps ? textInputProps : {},
            ]}
            defaultValue={defaultInput}
            editable={!disabled}
            placeholder={placeholder}
            placeholderTextColor={Colors.greyBA}
            maxLength={maxLength}
            onFocus={(event) => {
              setStatus(InputFieldStatus.active);
              console.log('onFocus');
            }}
            onBlur={(event) => {
              console.log('onBlur');
              inputValidation(value ?? "")
            }}
            onEndEditing={(event) => {
              console.log('onEndEditing');
            }}
            onChangeText={(input) => {
              console.log('onChangeText');
              console.log(input);
              setValue(input);
            }}></TextInput>
          {icons[status] ? (
            <Image
              source={icons[status] as number}
              style={{
                alignSelf: 'center',
                marginStart: 8,
                tintColor: lineColor[status],
                width: iconSize,
                height: iconSize,
                resizeMode: 'contain',
              }}
            />
          ) : null}
        </View>
        <View
          style={{
            height: 2,
            backgroundColor: lineColor[status],
            marginTop: 8,
          }}></View>
      </View>
      {status === InputFieldStatus.error && errorMsg ? (
        <Text
          style={[
            Fonts.label.font12Medium,
            {
              color: Colors.primary,
              marginTop: 4,
            },
          ]}>
          {errorMsg}
        </Text>
      ) : null}
    </View>
  );
  return [inputField, value, status];
}
