import React, { FC, useState, useEffect, useMemo } from "react";
import {
  View,
  Text,
  Image,
  ViewProps,
} from "react-native";
import { getImages } from "../../assets";
import CurrencyInput from 'react-native-currency-input';
import { Colors, Fonts } from '../../style';

export type PruNumberFieldCardPayload = {
  title?: string;
  placeholder?: string;
  defaultInput?: number;
  disabled?: boolean;
  errorMessage?: string;
  validation?: (
    input: number
  ) => boolean | { isValid: boolean; errorMessage?: string };
  textInputProps?: ViewProps;
  onStatusChange: (status: NumberFieldStatus) => void;
  isPercent?: boolean;
  maxValue?: number;
};
export type PruNumberFieldCardProps = ViewProps & {
  payload: PruNumberFieldCardPayload;
};

enum NumberFieldStatus {
  default = "default",
  active = "active",
  error = "error",
}

type NumberFieldImageStatus = {
  [id in NumberFieldStatus]?: number;
};

type NumberFieldColorStatus = {
  [id in NumberFieldStatus]: string;
};
const backgroundColor: NumberFieldColorStatus = {
  default: Colors.greyFF,
  active: Colors.greyF0,
  error: Colors.redLight2,
};

export function useNumberFieldCard({ payload, ...props }: PruNumberFieldCardProps) {
  const {
    title,
    placeholder,
    disabled,
    defaultInput,
    errorMessage,
    validation,
    maxValue,
    textInputProps,
    onStatusChange,
    isPercent,
  } = payload;

  const [status, setStatus] = useState<NumberFieldStatus>(
    NumberFieldStatus.default
  );
  const [errorMsg, setErrorMsg] = useState(errorMessage);
  const [value, setValue] = useState(defaultInput ?? null);

  useEffect(() => {
    if (onStatusChange) onStatusChange(status);
    return () => {};
  }, [status]);

  function inputValidation(value: number | null) {
    if (status == NumberFieldStatus.default && !value) {
      // skip this case which is defaultcase
    }
    else if (validation) {
      const result = validation(value ?? 0);
      if (typeof result == "boolean") {
        setStatus(
          result ? NumberFieldStatus.active : NumberFieldStatus.error
        );
      } else {
        const { isValid, errorMessage } = result;
        setStatus(
          isValid ? NumberFieldStatus.active : NumberFieldStatus.error
        );
        if (errorMessage) {
          setErrorMsg(errorMessage);
        }
      }
    }
  }

  useEffect(() => {
    inputValidation(value ?? null);
  }, [value]);

  const { style } = props;
  const textColor = disabled ? Colors.grey85 : Colors.dark33;
  const bkColor = backgroundColor[status];
  const iconSize = 20;
  const inputField = (
    <View
      style={[
        {
          flexDirection: "column",
          borderRadius: 10,
          shadowOffset: {
            width: 0,
            height: 5,
          },
          shadowOpacity: 0.15,
          backgroundColor: bkColor,
          paddingVertical: 20,
          paddingHorizontal: 16,
        },
        style,
      ]}
    >
      <View
        style={{
          flexDirection: "row",
        }}
      >
        {title ? (
          <Text
            style={[Fonts.label.font14Bold, {
              color: Colors.dark33,
              textAlignVertical: "center",
              alignSelf: "center",
              flex: isPercent? 1: 0,
            }]}
          >
            {title}
          </Text>
        ) : null}
        <View
          style={{
            flexDirection: isPercent ? "row" : "row-reverse",
            flex: isPercent? 0 : 1,
          }}
        >
          <CurrencyInput
          style={[
            {
              color: textColor,
              fontSize: 28,
              height: 34,
              textAlign: "right",
              fontFamily: 'Montserrat',
            },
            textInputProps ? textInputProps : {},
          ]}
            value={value}
            onChangeValue={setValue}
            prefix=""
            delimiter=","
            separator="."
            precision={0}
            keyboardType="numeric"
            editable={!disabled}
            placeholder={placeholder}
            placeholderTextColor={Colors.greyBA}
            maxValue={maxValue}
            selectionColor={Colors.primary}
          />
          <Image
              source={isPercent ? getImages.percent : getImages.dollar}
              style={{
                alignSelf: "center",
                marginStart: 4,
                tintColor: Colors.primary,
                width: iconSize,
                height: iconSize,
                resizeMode: "contain",
              }}
            />
        </View>
      </View>
      {false && status === NumberFieldStatus.error && errorMsg ? (
        <Text
          style={[
            Fonts.label.font12Medium,
            {
            color: Colors.primary,
            marginTop: 8,
            alignSelf: "center",
          }]}
        >
          {errorMsg}
        </Text>
      ) : null}
    </View>
  );
  return [inputField, value, status];
}
