import React, { useContext, useEffect, useRef } from 'react';
import { ToastContext } from './ToastContext';
import { Text, Animated, Easing, TouchableOpacity, StyleSheet, Dimensions } from 'react-native';
import { setCustTimeout } from '../../index';

export const Toast = () => {
  const { toast, hide } = useContext(ToastContext);
  const height = Dimensions.get('window').height;
  const initPosition = height * 2;

  const translateYRef = useRef(new Animated.Value(initPosition));

  useEffect(() => {
    var finalPosition = height - height * 0.2;
    if (toast?.toastConfig?.positionFromBottom) {
      finalPosition = toast?.toastConfig?.positionFromBottom;
    }
    var animationDuration = 800;
    if (toast?.toastConfig?.animationDuration) {
      animationDuration = toast?.toastConfig?.animationDuration;
    }
    var stayDuration = 2000;
    if (toast?.toastConfig?.stayDuration) {
      stayDuration = toast?.toastConfig?.stayDuration;
    }
    if (toast?.visible && toast?.customUI) {
      Animated.timing(translateYRef.current, {
        duration: animationDuration,
        easing: Easing.ease,
        toValue: finalPosition,
        useNativeDriver: true,
      }).start(() => {
        setCustTimeout(() => {
          if (toast?.showAnimEndCallback) {
            toast?.showAnimEndCallback();
          }
          if (toast?.visible && hide) {
            hide();
            toast?.toastConfig?.resolve && toast?.toastConfig?.resolve();
          }
        }, stayDuration);
      });
    } else {
      Animated.timing(translateYRef.current, {
        duration: animationDuration,
        easing: Easing.ease,
        toValue: initPosition,
        useNativeDriver: true,
      }).start(() => {
        if (toast?.hideAnimEndCallback) {
          toast?.hideAnimEndCallback();
        }
      });
    }
  }, [toast]);

  return (
    <Animated.View
      style={[
        {
          position: 'absolute',
          top: 0,
          zIndex: 2,
          right: 0,
          left: 0,
        },
        { transform: [{ translateY: translateYRef.current }] },
      ]}>
      {toast?.customUI ? toast?.customUI() : null}
    </Animated.View>
  );
};
