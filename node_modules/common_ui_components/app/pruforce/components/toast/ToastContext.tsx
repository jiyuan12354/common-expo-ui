import React, { createContext, useState, useCallback } from 'react';

interface ToastConfig {
  positionFromBottom?: number;
  animationDuration?: number;
  stayDuration?: number;
  resolve?: any;
}
interface ToastContextType {
  hide?: () => void;
  show?: (args: ToastType) => void;
  toast?: ToastType;
}

export interface ToastType {
  visible?: boolean;
  customUI?: () => JSX.Element;
  toastConfig: ToastConfig;
  showAnimEndCallback?: () => void;
  hideAnimEndCallback?: () => void;
}
const initialToast: ToastType = {
  visible: false,
  toastConfig: {},
};

export const ToastContext = createContext<ToastContextType>({
  hide: undefined,
  show: undefined,
  toast: undefined,
});

export const ToastProvider = ({ children }) => {
  const [toast, setToast] = useState<ToastType>(initialToast);

  const show = useCallback((args) => {
    setToast({ ...initialToast, visible: true, ...args });
  }, []);

  const hide = useCallback(() => {
    setToast({ ...toast, visible: false });
  }, [toast]);

  return (
    <ToastContext.Provider
      value={{
        hide,
        show,
        toast,
      }}>
      {children}
    </ToastContext.Provider>
  );
};
