import * as React from 'react';
import { TouchableOpacity } from 'react-native';
import { mergeAll, flatten } from 'ramda';
import { View } from 'native-base';
import { Text } from '../text/text';
import { viewPresets, textPresets } from './button.presets';
import { ButtonProps } from './button.props';
import { Toast } from 'common_ui_components/app/components/common/toast/toast';
import { getI18n } from 'react-i18next';
import { CommonTranslateKey } from 'common_ui_components/app/translation/__translation-keys';

/**
 * For your text displaying needs.
 *
 * This component is a HOC over the built-in React Native one.
 */
export function Button(props: ButtonProps) {
  // grab the props
  const {
    preset = 'primary',
    tx,
    text,
    style: styleOverride,
    textStyle: textStyleOverride,
    children,
    disabled,
    ...rest
  } = props;

  const viewStyle = mergeAll(flatten([viewPresets[preset] || viewPresets.primary, styleOverride]));
  const textStyle = mergeAll(
    flatten([textPresets[preset] || textPresets.primary, textStyleOverride]),
  );

  const content = children || <Text tx={tx} text={text} style={textStyle} />;

  if (disabled) {
    return (
      <View style={viewStyle} {...rest}>
        {content}
      </View>
    );
  }
  return (
    <TouchableOpacity activeOpacity={0.9} style={viewStyle} {...rest}>
      {content}
    </TouchableOpacity>
  );
}
let deferButtonId2ActiveTs: any = {};
export function DeferButton(props: ButtonProps) {
  const {
    preset = 'primary',
    tx,
    text,
    style: styleOverride,
    textStyle: textStyleOverride,
    children,
    disabled,
    onPress,
    id,
    ...rest
  } = props;
  const viewStyle = mergeAll(flatten([viewPresets[preset] || viewPresets.primary, styleOverride]));
  const textStyle = mergeAll(
    flatten([textPresets[preset] || textPresets.primary, textStyleOverride]),
  );

  const content = children || <Text tx={tx} text={text} style={textStyle} />;

  if (disabled) {
    return (
      <View style={viewStyle} {...rest}>
        {content}
      </View>
    );
  }
  return (
    <TouchableOpacity
      activeOpacity={0.9}
      style={viewStyle}
      onPress={(e) => {
        const nowTs = new Date().getTime();
        if (id && (!deferButtonId2ActiveTs[id] || nowTs - deferButtonId2ActiveTs[id] > 60000)) {
          if (onPress) {
            onPress(e);
          }
          deferButtonId2ActiveTs[id] = nowTs;
        } else if (!id) {
          if (onPress) {
            onPress(e);
          }
        } else {
          Toast({
            message: props.deferTip || getI18n().t(CommonTranslateKey.defer_button_freq_tip),
          });
        }
      }}
      {...rest}>
      {content}
    </TouchableOpacity>
  );
}
