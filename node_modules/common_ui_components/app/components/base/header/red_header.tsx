import * as React from 'react';
import { View, ViewStyle, TextStyle } from 'react-native';
import { useTranslation } from 'react-i18next';
import { HeaderProps } from './header.props';
import { Button } from '../button/button';
import { Text } from '../text/text';
import { palette, spacing, textStyleSet } from '../../../theme';
import { IconFont } from '../../icon-font/icon-font';
import LinearGradient from 'react-native-linear-gradient';
import { useFocusEffect } from '@react-navigation/core';
import { useDispatch, useSelector } from 'react-redux';
import { getMessageUnreadCountsAsync, pruTestID } from 'common_services_frontend';

// static styles
const ROOT: ViewStyle = {
  flexDirection: 'row',
  paddingHorizontal: spacing.spacing20,
  alignItems: 'center',
  paddingVertical: spacing.spacing8,
  justifyContent: 'flex-start',
  backgroundColor: palette.red,
};
const TITLE: TextStyle = { textAlign: 'center' };
const TITLE_MIDDLE: ViewStyle = {
  flex: 1,
  justifyContent: 'center',
  paddingLeft: spacing.spacing20,
};
const LEFT: ViewStyle = { width: 32 };
const RIGHT: ViewStyle = { width: 32 };

/**
 * Header that appears on many screens. Will hold navigation buttons and screen title.
 */
export const RedHeader: React.FunctionComponent<HeaderProps> = (props) => {
  const { t } = useTranslation();
  const {
    onLeftPress,
    onRightPress,
    onRightPress2,
    rightIcon,
    rightIcon2,
    leftIcon,
    headerText,
    headerTx,
    style,
    titleStyle,
    iconStyle,
    color = palette.grey33,
  } = props;

  const header = headerText || (headerTx && t(headerTx)) || '';

  return (
    <View style={{ ...ROOT, ...style }}>
      <LinearGradient
        colors={['rgba(255, 255, 255, 0.2)', 'rgba(255, 255, 255, 0.0)']}
        start={{ x: 0, y: 0 }}
        end={{ x: 0.6, y: 0 }}
        style={{
          width: '100%',
          height: 200,
          position: 'absolute',
          left: 0,
          top: 0,
        }}
      />

      <View
        style={{
          // width: 332, height: 332, backgroundColor: palette.white, opacity: 0.16, borderRadius: 166, position: 'absolute',
          width: 332,
          height: 332,
          backgroundColor: 'rgba(255, 255, 255, 0.12)',
          borderRadius: 166,
          position: 'absolute',

          right: -160,
          top: -300,
        }}
      />

      {leftIcon ? (
        <Button preset="link" onPress={onLeftPress}>
          <IconFont name={leftIcon} color={color} size={24} />
        </Button>
      ) : (
        <View style={LEFT} />
      )}
      <View style={TITLE_MIDDLE}>
        <Text numberOfLines={2} style={{ ...TITLE, ...titleStyle, color: color }} text={header} />
      </View>

      {rightIcon2 && (
        <Button {...pruTestID('rightIcon2')} preset="link" onPress={onRightPress2} style={{ marginRight: spacing.spacing12 }}>
          {/* TODO */}
          <IconFont name={rightIcon2} color={color} size={24} />
        </Button>
      )}
      {rightIcon ? (
        <Button {...pruTestID('rightIcon')} preset="link" onPress={onRightPress}>
          {/* TODO */}
          <IconFont name={rightIcon} color={color} size={24} />
        </Button>
      ) : (
        <View style={RIGHT} />
      )}
    </View>
  );
};

export const RedHeaderWithInbox: React.FunctionComponent<HeaderProps> = (props) => {
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const {
    onLeftPress,
    onRightPress,
    onRightPress2,
    rightIcon,
    rightIcon2,
    leftIcon,
    headerText,
    headerTx,
    style,
    titleStyle,
    iconStyle,
    color = palette.grey33,
  } = props;

  const auth = useSelector((state: any) => {
    return state.auth;
  });
  const header = headerText || (headerTx && t(headerTx)) || '';
  useFocusEffect(
    React.useCallback(() => {
      if (auth.agentCode && auth.token) {
        setTimeout(() => {
          dispatch(getMessageUnreadCountsAsync(auth.agentCode));
        });
      }
    }, [auth.agentCode, auth.token]),
  );
  const unreadCount = useSelector((state: any) => {
    return state?.common?.unReadCount || 0;
  });
  return (
    <View style={{ ...ROOT, ...style }}>
      <LinearGradient
        accessible={false}
        colors={['rgba(255, 255, 255, 0.2)', 'rgba(255, 255, 255, 0.0)']}
        start={{ x: 0, y: 0 }}
        end={{ x: 0.6, y: 0 }}
        style={{
          width: '100%',
          height: 200,
          position: 'absolute',
          left: 0,
          top: 0,
        }}
      />

      <View
        style={{
          // width: 332, height: 332, backgroundColor: palette.white, opacity: 0.16, borderRadius: 166, position: 'absolute',
          width: 332,
          height: 332,
          backgroundColor: 'rgba(255, 255, 255, 0.12)',
          borderRadius: 166,
          position: 'absolute',

          right: -160,
          top: -300,
        }}
      />

      {leftIcon ? (
        <Button preset="link" onPress={onLeftPress} accessibilityLabel='settingButton'>
          <IconFont name={leftIcon} color={color} size={24} />
        </Button>
      ) : (
        <View style={LEFT} />
      )}
      <View style={TITLE_MIDDLE}>
        <Text {...pruTestID('TitleMiddle')} numberOfLines={2} style={{ ...TITLE, ...titleStyle, color: color }} text={header} />
      </View>

      {rightIcon2 && (
        <Button {...pruTestID('rightIcon2')} preset="link" onPress={onRightPress2} style={{ marginRight: spacing.spacing12 }}>
          {/* TODO */}
          <IconFont name={rightIcon2} color={color} size={24} />
        </Button>
      )}
      {rightIcon ? (
        <Button {...pruTestID('rightIcon')} preset="link" onPress={onRightPress} accessible={false}>
          {/* TODO */}
          <IconFont accessibilityLabel='inbox' name={rightIcon} color={color} size={24}/>
          {unreadCount ? (
            <View
              style={{
                width: 32,
                position: 'absolute',
                left: 6,
                top: -10,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <View
                style={{
                  height: 18,
                  borderRadius: 9,
                  minWidth: 18,
                  backgroundColor: palette.yellow,
                  justifyContent: 'center',
                  alignItems: 'center',
                }}>
                <Text
                  {...pruTestID('msgNum')}
                  style={{
                    ...textStyleSet.info_10_bold,
                    color: palette.red,
                    paddingHorizontal: 6,
                  }}>
                  {unreadCount <= 99 ? unreadCount : '99+'}
                </Text>
              </View>
            </View>
          ) : null}
        </Button>
      ) : (
        <View style={RIGHT} />
      )}
    </View>
  );
};
