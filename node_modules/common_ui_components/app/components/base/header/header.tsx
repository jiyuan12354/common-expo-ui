import * as React from 'react';
import { View, ViewStyle, TextStyle, TouchableOpacity } from 'react-native';
import { useTranslation } from 'react-i18next';
import { pruTestID } from 'common_services_frontend';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import AntDesign from 'react-native-vector-icons/AntDesign';
import Entypo from 'react-native-vector-icons/Entypo';
import EvilIcons from 'react-native-vector-icons/EvilIcons';
import Feather from 'react-native-vector-icons/Feather';
import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
import Fontisto from 'react-native-vector-icons/Fontisto';
import Foundation from 'react-native-vector-icons/Foundation';
import Ionicons from 'react-native-vector-icons/Ionicons';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import Octicons from 'react-native-vector-icons/Octicons';
import Zocial from 'react-native-vector-icons/Zocial';
import SimpleLineIcons from 'react-native-vector-icons/SimpleLineIcons';

import { HeaderProps } from './header.props';
import { Button } from '../button/button';
import { Text } from '../text/text';
import { palette, spacing } from '../../../theme';
import { IconFont } from '../../icon-font/icon-font';

const ROOT: ViewStyle = {
  flexDirection: 'row',
  paddingHorizontal: spacing.spacing20,
  alignItems: 'center',
  paddingVertical: spacing.spacing8,
  justifyContent: 'flex-start',
};
const TITLE: TextStyle = { textAlign: 'center' };
const TITLE_MIDDLE: ViewStyle = {
  flex: 1,
  justifyContent: 'center',
  paddingLeft: spacing.spacing20,
};
const LEFT: ViewStyle = { width: 32 };
const RIGHT: ViewStyle = { width: 32 };

/**
 * Header that appears on many screens. Will hold navigation buttons and screen title.
 */
export const Header: React.FunctionComponent<HeaderProps> = (props) => {
  const { t } = useTranslation();
  const {
    onLeftPress,
    onRightPress,
    onRightPress2,
    onRightPress3,
    onRightButtonPress,
    rightIcon,
    rightIcon2,
    rightIcon3,
    rightButton,
    leftIcon,
    headerText,
    headerTx,
    style,
    iconStyle,
    color = palette.grey33,
  } = props;
  let { titleStyle } = props;

  const header = headerText || (headerTx && t(headerTx)) || '';

  if (!titleStyle) {
    titleStyle = {
      fontSize: 20,
      fontWeight: 'bold',
      color: palette.grey33,
      textAlign: 'left',
    };
  }

  const getIcon = (icon: string) => {
    if (icon) {
      const iconInfoArr = icon.split(':');
      const iconType = iconInfoArr[0];
      let iconName = iconInfoArr[1];
      if (!iconName) {
        iconName = iconType;
        return <IconFont name={iconName} color={color} size={24} />;
      }
      switch (iconType) {
        case 'antdesign':
          return <AntDesign name={iconName} color={color} size={24} />;
        case 'entypo':
          return <Entypo name={iconName} color={color} size={24} />;
        case 'evilicons':
          return <EvilIcons name={iconName} color={color} size={24} />;
        case 'feather':
          return <Feather name={iconName} color={color} size={24} />;
        case 'fontawesome':
          return <FontAwesome name={iconName} color={color} size={24} />;
        case 'fontawesome5':
          return <FontAwesome5 name={iconName} color={color} size={24} />;
        case 'fontisto':
          return <Fontisto name={iconName} color={color} size={24} />;
        case 'foundation':
          return <Foundation name={iconName} color={color} size={24} />;
        case 'ionicons':
          return <Ionicons name={iconName} color={color} size={24} />;
        case 'materialicons':
          return <MaterialIcons name={iconName} color={color} size={24} />;
        case 'materialcommunityicons':
          return <MaterialCommunityIcons name={iconName} color={color} size={24} />;
        case 'octicons':
          return <Octicons name={iconName} color={color} size={24} />;
        case 'zocial':
          return <Zocial name={iconName} color={color} size={24} />;
        case 'simplelineicons':
          return <SimpleLineIcons name={iconName} color={color} size={24} />;
        default:
          return <IconFont name={iconName} color={color} size={24} />;
      }
    }
    return null;
  };
  return (
    <View style={{ ...ROOT, ...style }}>
      {leftIcon ? (
        <Button accessibilityLabel="back" preset="link" onPress={onLeftPress}>
          <IconFont name={leftIcon} color={color} size={24} />
        </Button>
      ) : (
        <View style={LEFT} />
      )}
      <View style={TITLE_MIDDLE}>
        <Text
          {...pruTestID('header_title')}
          numberOfLines={2}
          style={{ ...TITLE, ...titleStyle, color }}
          text={header}
        />
      </View>
      {rightIcon3 && (
        <Button preset="link" onPress={onRightPress3} style={{ marginRight: spacing.spacing20 }}>
          {getIcon(rightIcon3)}
        </Button>
      )}
      {rightIcon2 && (
        <Button preset="link" onPress={onRightPress2} style={{ marginRight: spacing.spacing20 }}>
          {getIcon(rightIcon2)}
        </Button>
      )}
      {rightIcon ? (
        <Button
          accessibilityLabel="rightIcon"
          preset="link"
          onPress={onRightPress}
          style={{ marginRight: spacing.spacing8 }}>
          {getIcon(rightIcon)}
        </Button>
      ) : (
        <View style={RIGHT} />
      )}

      {rightButton && (
        <Button
          accessibilityLabel="rightButton"
          text={rightButton}
          onPress={onRightButtonPress}
          style={{
            marginRight: spacing.spacing8,
            backgroundColor: palette.red,
            height: 28,
            width: 72,
            borderRadius: 14,
            // margin: 20,
            // marginBottom: 48,
          }}
          textStyle={{
            color: palette.white,
            fontSize: 14,
          }}>
          {/* TODO */}
        </Button>
      )}
      {props.children}
    </View>
  );
};
