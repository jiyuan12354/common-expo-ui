import React, { FunctionComponent as Component, useState, useEffect } from 'react';
import { View, TouchableOpacity, Text, TextStyle, ViewStyle } from 'react-native';
import { tagLabelItemStyles as styles } from './category-label-item.styles';
import { textStyleSet, palette } from '../../../theme';
import { CategoryLabel } from '../scroll-category-list/scroll-category-list';
import { pruTestID } from 'common_services_frontend';

export interface CategoryLabelItemProps {
  tagLabel: CategoryLabel;
  selected?: boolean;
  onPress: Function;
  model?: 'Large' | 'Medium' | 'Small';
}

export const CategoryLabelItem: Component<CategoryLabelItemProps> = (props) => {
  const { model = 'Small' } = props;
  const [selected, setSelected] = useState(props.selected);
  useEffect(() => {
    setSelected(props.selected);
  }, [props.selected]);

  function getTextStyle(): TextStyle {
    switch (model) {
      case 'Small': 
      return {
        ...textStyleSet.info_12_med,
        color: palette.grey85,
        paddingHorizontal: 0,
        lineHeight: 20,
      };
      case 'Medium': 
      return {
        ...textStyleSet.info_12_med,
        color: palette.grey85,
        paddingHorizontal: 10,
        lineHeight: 20,
      };
      case 'Large': 
      return {
        ...textStyleSet.info_12_med,
        color: palette.grey85,
        paddingHorizontal: 16,
        lineHeight: 20,
      };
      default:
        return {
          ...textStyleSet.info_12_med,
          color: palette.grey85,
          paddingHorizontal: 10,
          lineHeight: 20,
        }
    }
  }
  return (
    <TouchableOpacity
      accessible={false}
      activeOpacity={0.9}
      style={[
        styles.WRAPPER,
        selected
          ? {
              backgroundColor: palette.cobalt,
              borderColor: palette.cobalt,
            }
          : {},
      ]}
      onPress={() => {
        props.onPress(props.tagLabel);
      }}>
      <Text
        {...pruTestID('CategoryLabelItem')}
        style={[
          getTextStyle(),
          selected
            ? {
                color: palette.white,
              }
            : {},
        ]}>
        {props.tagLabel.label}
      </Text>
    </TouchableOpacity>
  );
};
