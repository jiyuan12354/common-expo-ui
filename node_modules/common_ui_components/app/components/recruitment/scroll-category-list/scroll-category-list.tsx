import React, { FunctionComponent as Component, useState, useEffect, useCallback } from 'react';
import { ScrollView, FlatList } from 'react-native';
import { max } from 'ramda';
import { useTranslation } from 'react-i18next';
import { CommonTranslateKey } from '../../../translation/__translation-keys';
import { spacing } from '../../../theme';
import { scrollTagListStyles as styles } from './scroll-category-list.styles';
import { CategoryLabelItem } from '../category-label-item/category-label-item';
import { useFocusEffect } from '@react-navigation/core';

export interface CategoryLabel {
  id?: string;
  label: string;
  value: string;
  weight: number;
  counts?: number;
  searchTargetString?: string;
}
export interface ScrollCategoryListProps {
  inputTagList: CategoryLabel[];
  inputSelectedTagList?: string[];
  onLabelPressed?: Function;
  supportMulti?: boolean;
}

export const ScrollCategoryList: Component<ScrollCategoryListProps> = (props) => {
  const { t } = useTranslation();
  const _keyExtractor = (item, index) => item.label + index.toString();
  const TagOfAll: CategoryLabel = {
    label: t(CommonTranslateKey.all),
    value: 'All',
    weight: Number.MAX_VALUE,
  };
  // 一行最少要展示多少条tag label
  const lineMinContainer = 7;
  let firstLineInitNum = 0;
  const [firstLinTags, setFirstLine] = useState([
    'All',
    ...props.inputTagList.slice(0, firstLineInitNum - 1),
  ]);
  const [colNum, setColnum] = useState(Math.max(firstLinTags.length, lineMinContainer));
  useEffect(() => {
    if (props.inputTagList.length > lineMinContainer) {
      firstLineInitNum = max(Math.floor(props.inputTagList.length / 2) + 1, lineMinContainer);
    } else {
      firstLineInitNum = props.inputTagList.length;
    }
    setFirstLine(['All', ...props.inputTagList.slice(0, firstLineInitNum - 1)]);
  }, [props.inputTagList]);
  useEffect(() => {
    setColnum(Math.max(firstLinTags.length, lineMinContainer));
  }, [firstLinTags]);
  const [inputSelectedTagList, setInputSelectedTagList] = useState(
    props.inputSelectedTagList && props.inputSelectedTagList.length
      ? props.inputSelectedTagList
      : ['All'],
  );
  useFocusEffect(
    useCallback(() => {
      setInputSelectedTagList(
        props.inputSelectedTagList && props.inputSelectedTagList.length
          ? props.inputSelectedTagList
          : ['All'],
      );
    }, [props.inputSelectedTagList]),
  );
  const renderItem = ({ item, index }) => {
    return (
      <CategoryLabelItem
        onPress={(tag: CategoryLabel) => {
          const currentSelectedTags = [tag.value];

          setInputSelectedTagList(currentSelectedTags);
          if (props.onLabelPressed) {
            props.onLabelPressed([tag]);
          }
        }}
        selected={inputSelectedTagList?.includes(item.value)}
        key={index}
        tagLabel={item}
      />
    );
  };
  return (
    <ScrollView
      accessible={false}
      horizontal
      showsHorizontalScrollIndicator={false}
      style={styles.WRAPPER}>
      {props.inputTagList?.length >= 1 && (
        <FlatList
          style={{
            marginHorizontal: spacing.spacing14,
            marginBottom: spacing.spacing10,
            marginTop: spacing.spacing6,
          }}
          keyExtractor={_keyExtractor}
          contentContainerStyle={{ alignSelf: 'flex-start' }}
          key={colNum.toString()}
          numColumns={colNum}
          showsVerticalScrollIndicator={false}
          showsHorizontalScrollIndicator={false}
          data={[TagOfAll, ...props.inputTagList].sort((labelA, labelB) => {
            if (labelB.weight > labelA.weight) {
              return 1;
            } else if (labelB.weight < labelA.weight) {
              return -1;
            } else {
              if (labelB.label > labelA.label) {
                return -1;
              } else if (labelB.label < labelA.label) {
                return 1;
              } else {
                return 0;
              }
            }
          })}
          renderItem={renderItem}
        />
      )}
    </ScrollView>
  );
};
