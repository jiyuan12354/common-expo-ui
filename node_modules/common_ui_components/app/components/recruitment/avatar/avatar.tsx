import * as React from 'react';
import { View, Image, ImageStyle } from 'react-native';
import { assets, AssetTypes } from '../../../assets';
import { Text } from '../../text/text';
import { TestID } from '../../test-id';
import { palette } from '../../../theme';

export interface AvatarStyle extends ImageStyle {
  height?: number;
  width?: number;
}

interface fakeImageProps extends AvatarProps {
  // 没有头像提供，使用颜色和title填充头像
  title?: string;
  color: string;
}

interface externalImageProps extends AvatarProps {
  // 通过remote链接图片
  uri: string;
}

interface localImageProps extends AvatarProps {
  // 本地头像
  assetType?: AssetTypes;
}

interface AvatarProps {
  style?: AvatarStyle;
  type?: string;
}

export const FakeAvatar: React.FunctionComponent<fakeImageProps> = (props) => {
  const { height, width, ...rest } = props.style;

  const { title } = props;
  let { style } = props;
  style = {
    ...style,
    borderRadius: Math.min(height, width) / 2,
  };
  return (
    <View style={[{}, rest]}>
      <View
        style={{
          ...style,
          backgroundColor: props.color,
          justifyContent: 'center',
          alignItems: 'center',
        }}>
        <Text
          style={{
            color: palette.white,
            fontSize: 24,
          }}>
          {title}
        </Text>
      </View>
    </View>
  );
};

export const LocalAvatar: React.FunctionComponent<localImageProps> = (props) => {
  const { height, width } = props.style;

  const { assetType } = props;

  let style = { ...props.style };
  style = {
    ...style,
    borderRadius: Math.min(height, width) / 2,
  };
  return (
    <View
      testID={TestID.LocalAvatar}
      accessibilityLabel={TestID.LocalAvatar}
      style={{ justifyContent: 'center' }}>
      <Image source={assets[assetType]} style={style} />
    </View>
  );
};

export const ExternalAvatar: React.FunctionComponent<externalImageProps> = (props) => {
  return (
    <View
      testID={TestID.ExternalAvatar}
      accessibilityLabel={TestID.ExternalAvatar}
      style={{ justifyContent: 'center' }}>
      <Image source={{ uri: props.uri }} style={props.style || {}} />
    </View>
  );
};

// interface OtherData {
//   Local: any,
//   External: any
// }
// /**
// * @type {OtherData}
// */
export const Avatar: {
  [key: string]: React.FunctionComponent<localImageProps | externalImageProps>;
} = {
  Local: LocalAvatar,
  External: ExternalAvatar,
};
