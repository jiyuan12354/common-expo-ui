import { ResourceContentType, Resource, ResourceCategory } from 'common_services_frontend';
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Dimensions, View } from 'react-native';
import { palette, spacing } from '../../../theme';
import { SearchTextBar } from '../../common/search-text-bar/search-text-bar';
import { CommonTranslateKey } from '../../../translation/__translation-keys';
import { MaterialSection } from '../../../components/recruitment/material-page/material-section';
import { ErrorHandlePageWrapper } from '../../../components/common/error-handle-page/error-handle-page';

export interface MaterialPageProps {
  tabLabel?: string;
  onResourceSearch: Function;
  onResourceItemPressed: Function;
  contentType: ResourceContentType;
  refresh?: boolean;
}

let pickedCategoryIds: string[] = [];
let goDetail = false;

const weightResource = (resourceA: Resource, resourceB: Resource): number => {
  let delta = 0;
  const sortColumn = (colA: ResourceCategory, colB: ResourceCategory) => {
    return colB.weight - colA.weight;
  };
  const columnsA = [...resourceA.category].sort(sortColumn);
  const columnsB = [...resourceB.category].sort(sortColumn);
  for (let index = 0; index < columnsA.length; index++) {
    const colAWeight = columnsA[index].weight;
    if (pickedCategoryIds.length && !pickedCategoryIds.includes(columnsA[index].id)) {
      // 當前選中了需要過濾的column，那就跳過其他column的比較
      continue;
    }
    if (index < columnsB.length) {
      const colBWeight = columnsB[index].weight;
      if (colAWeight === colBWeight) {
        // 如果是同一列的resource，則根據當前column的itemWeigth進行排序
        if (columnsA[index].itemWeight === columnsB[index].itemWeight) {
          // 如果itemWeight也相同，再按updated_at排序
          if (resourceB.updated_at === resourceA.updated_at) {
            // 如果updated_at也相同，則再按title排序
            if (resourceB.title > resourceA.title) {
              delta = -1;
            } else if (resourceB.title < resourceA.title) {
              delta = 1;
            } else {
              delta = 0;
            }
          } else {
            delta = resourceB.updated_at - resourceA.updated_at;
          }
        } else {
          delta = columnsB[index].itemWeight - columnsA[index].itemWeight;
        }
        if (delta === 0) {
          continue;
        } else {
          return delta;
        }
      } else {
        delta = colBWeight - colAWeight;
        break;
      }
    } else {
      delta = -1;
      break;
    }
  }
  return delta;
};

const sortResources = (rawResources: Resource[]) => {
  return rawResources.sort(weightResource);
};

export const MaterialPage: React.FunctionComponent<MaterialPageProps> = (props) => {
  const { t, i18n } = useTranslation();

  const placeholderTip = t(CommonTranslateKey.search_for);
  return (
    <View style={{ backgroundColor: palette.greyeb, flex: 1 }}>
      <View
        style={{
          width: Dimensions.get('window').width,
          justifyContent: 'center',
          paddingHorizontal: spacing.spacing18,
          alignItems: 'center',
          paddingVertical: spacing.spacing12,
          backgroundColor: palette.white,
        }}>
        <SearchTextBar
          placeholder={placeholderTip}
          onFocus={() => {
            props.onResourceSearch(props.contentType);
          }}
        />
      </View>
      {ErrorHandlePageWrapper(<MaterialSection {...props} />)}
    </View>
  );
};
