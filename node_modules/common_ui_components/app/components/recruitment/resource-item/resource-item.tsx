import React, { FunctionComponent as Component } from 'react';

import { View, TouchableOpacity, ViewStyle, Text, TextStyle } from 'react-native';
import { Resource, pruTestID } from 'common_services_frontend';
import { HighlightText } from '../../common/highlight-text/highlight-text';
import { resourceItemStyles as styles } from './resource-item.styles';
import { ExternalAvatar } from '../avatar/avatar';
import { palette, textStyleSet, spacing } from '../../../theme';
import { Icon } from '../../base/icon/icon';

export interface ResourceItemProps {
  data: Resource;
  onPress?: Function;
  style?: ViewStyle;
  isUnread?: boolean;
}

const TEXT__STYLE__RESOURCE__TAG: TextStyle = {
  ...textStyleSet.info_12_med,
  color: palette.cobalt,
  lineHeight: 14.5,
};

export const ResourceItem: Component<ResourceItemProps> = (props) => {

  return (
    <View
      {...pruTestID('ResourceItem')}
      style={{
        backgroundColor: palette.greyeb,
        marginBottom: spacing.spacing12,
      }}>
      <TouchableOpacity
        accessible={false}
        activeOpacity={0.9}
        onPress={() => {
          if (props.onPress) {
            props.onPress(props.data);
          }
        }}
        style={[styles.WRAPPER, props.style]}>
        <View
          style={{
            height: '100%',
            justifyContent: 'flex-start',
            alignItems: 'flex-start',
          }}>
          {props.data.portalLink ? (
            <ExternalAvatar
              uri={props.data.portalLink}
              style={{
                width: 100,
                height: 100,
                borderRadius: 8,
              }}
            />
          ) : (
            <Icon
              icon="no_content"
              style={{
                width: 100,
                height: 100,
                borderRadius: 8,
              }}
            />
          )}
        </View>

        {props.isUnread && (
          <View
            style={{
              width: 16,
              height: 16,
              marginTop: -8,
              marginLeft: -8,
              backgroundColor: palette.red,
              borderRadius: 8,
            }}
          />
        )}

        <View style={styles.Content}>
          {(() => {
            const { title } = props.data;
            const searchKey = props.data.highlight_text;
            if (!searchKey || !title.toLocaleLowerCase().includes(searchKey.toLocaleLowerCase())) {
              return (
                <Text
                  {...pruTestID('resource_title')}
                  ellipsizeMode="tail"
                  style={[styles.TitleText]}>
                  {title}
                </Text>
              );
            }
            return (
              <HighlightText highLightText={searchKey} textStyle={styles.TitleText}>
                {title}
              </HighlightText>
            );
          })()}
          <View style={styles.Description}>
            {(() => {
              const searchKey = props.data.highlight_text;
              if (
                !searchKey ||
                !props.data.description ||
                !props.data.description.toLocaleLowerCase().includes(searchKey.toLocaleLowerCase())
              ) {
                return <Text style={styles.DescriptionText}>{props.data.description}</Text>;
              }
              return (
                <HighlightText
                  textStyle={{ ...styles.DescriptionText, height: 20 }}
                  highLightColor={palette.red}
                  highLightText={searchKey}>
                  {props.data.description}
                </HighlightText>
              );
            })()}
          </View>

          <View
            style={{
              flexDirection: 'row',
              // maxHeight: 61,
              flexWrap: 'wrap',
            }}>
            {props.data.tags.map((tag) => {
              return (
                <View style={styles.LabelContainer}>
                  <View
                    style={{
                      paddingVertical: 2,
                      paddingHorizontal: 8,
                      justifyContent: 'center',
                      alignItems: 'center',
                      backgroundColor: palette.cobaltLight,
                      borderWidth: 1,
                      borderColor: palette.cobaltLight,
                      borderRadius: 10,
                    }}>
                    {(() => {
                      const searchKey = props.data.highlight_text;
                      if (
                        !searchKey ||
                        !tag.toLocaleLowerCase().includes(searchKey.toLocaleLowerCase())
                      ) {
                        return (
                          <Text numberOfLines={1} style={TEXT__STYLE__RESOURCE__TAG}>
                            {tag}
                          </Text>
                        );
                      }
                      return (
                        <HighlightText
                          textStyle={TEXT__STYLE__RESOURCE__TAG}
                          style={{
                            flexWrap: 'nowrap',
                          }}
                          highLightText={searchKey}>
                          {tag}
                        </HighlightText>
                      );
                    })()}
                  </View>
                  {/* <View style={{ flex: 1 }} /> */}
                </View>
              );
            })}
          </View>
        </View>
      </TouchableOpacity>
    </View>
  );
};
