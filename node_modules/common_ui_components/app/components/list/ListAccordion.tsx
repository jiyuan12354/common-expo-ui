import React, { FC } from 'react';
import { List } from 'react-native-paper';
import { StyleSheet, Image, StyleProp, ViewStyle, View, TextStyle, Alert } from 'react-native';
import { Font } from '../../style';
import { color, palette } from '../../theme';
import ExpandableIcon from './ExpandableIcon'

type Props = React.ComponentProps<typeof List.Accordion> & {
  title?: string | JSX.Element;
  style?: StyleProp<ViewStyle>;
  titleStyle?: StyleProp<TextStyle>;
  boundStyle?: StyleProp<ViewStyle>;
  isHiddenLeftIcon?: boolean;
  leftIcon?: (isExpand?:boolean) => React.ReactNode;
  leftIconColor?: color.primary;
  leftIconStyle?: StyleProp<TextStyle>;
};

const ListAccordion: FC<Props> = ({ 
  boundStyle, 
  isHiddenLeftIcon, 
  style, 
  titleStyle, 
  title, 
  leftIcon, 
  leftIconColor, 
  leftIconStyle, 
  ...props 
}) => {
  return (
    <View style={[boundStyle]}>
      <List.Accordion
        {...props}
        style={[styles.container, style]}
        titleStyle={[styles.title, titleStyle]}
        title={title}
        left={(props) => {
          if (isHiddenLeftIcon) {
            return <View/>
          } else {

            const isExpand = props.color == '#6200ee' || props.color == '#E02020';
            return (
              leftIcon ? 
              leftIcon(isExpand) : 
              <ExpandableIcon isExpand={isExpand} color={leftIconColor} leftIconStyle={leftIconStyle} />
            );
          }
        }}
        >
        <View style={{ paddingLeft: 0, height: props.children ? 'auto' : 0 }}>
          {props.children}
        </View>
      </List.Accordion>
    </View>
  );
}


export default ListAccordion;

const styles = StyleSheet.create({
  container: {
    width: '100%',
    height: 50,
    backgroundColor: '#FFFFFF',
  },
  title: {
    fontSize: 16,
    fontWeight: '500',
    fontStyle: 'normal',
    letterSpacing: 0,
    fontFamily: Font.primary,
    color: '#333333',
  },
});
