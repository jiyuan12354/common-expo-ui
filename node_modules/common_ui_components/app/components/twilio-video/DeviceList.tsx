import React, { Component } from 'react';
import { StyleSheet, View, Text, TouchableOpacity, Image, Dimensions } from 'react-native';
// import PopupDialog, { DialogContent, SlideAnimation } from 'react-native-popup-dialog';
import { TFunction } from 'i18next';
import { withTranslation } from 'react-i18next';
import HeadphoneDetection from 'react-native-headphone-detection';
import { IconFont } from '../icon-font/icon-font';
import { DialogContainer as PruDialogContainer } from '../../components/common/dialog-container/dialog-container';
import { pruTestID } from 'common_services_frontend';

const icons = {
  speaker: require('../../assets/twilio-video/icon-voice-device.png'),
  bluetooth: require('../../assets/twilio-video/icon-bluetooth.png'),
  headphone: require('../../assets/twilio-video/icon-headphone.png'),
  selected: require('../../assets/twilio-video/icon-right-white.png'),
};

export type DeviceType = 'speaker' | 'bluetooth' | 'headphone';
export type Headphone = { audioJack?: boolean; bluetooth?: boolean };
export type StateType = {
  isVisible: boolean;
  selectedDevice: DeviceType;
  headphoneDevice: Headphone;
};
export type PropType = {
  t?: TFunction; // i18n
  onSelectDevice?: (deviceName: DeviceType) => void; // callback when selected device changed
};

class DeviceList extends Component<PropType, StateType> {
  constructor(props: any) {
    super(props);
    // @ts-ignore
    this.state = {
      isVisible: false,
      selectedDevice: 'speaker',
      headphoneDevice: {},
    };
  }
  componentDidMount() {
    HeadphoneDetection.isAudioDeviceConnected().then((device: Headphone) => {
      this.outputDeviceChange(device);
    });
    HeadphoneDetection.addListener((device: Headphone) => {
      this.outputDeviceChange(device);
    });
  }
  outputDeviceChange(device: Headphone) {
    // if headphone is plugged in, default output is headphone, else speaker is default
    const defaultOutput = device.audioJack ? 'headphone' : 'speaker';
    this.setState({ headphoneDevice: device || {}, selectedDevice: defaultOutput });
    this.props.onSelectDevice && this.props.onSelectDevice(defaultOutput);
  }

  componentWillUnmount() {
    if (HeadphoneDetection.remove) {
      // The remove is not necessary on Android
      HeadphoneDetection.remove();
    }
  }

  selectDevice(deviceName: DeviceType) {
    // this.props.setBluetooth.toggleSoundSetup()
    // this.props.setBluetooth(true).then((isEnabled) => {
    //   console.log("blue==",isEnabled)
    // })
    this.setState({ selectedDevice: deviceName });
    const { onSelectDevice } = this.props;
    if (onSelectDevice) {
      onSelectDevice(deviceName);
    }
  }

  onOpen = () => {
    this.setState({ isVisible: true });
  };
  onClose = () => {
    this.setState({ isVisible: false });
  };

  getSelectedIcon(deviceName: DeviceType) {
    if (deviceName === this.state.selectedDevice) {
      return <Image style={{ height: 16, width: 16 }} source={icons.selected}></Image>;
    }
    return null;
  }

  render() {
    const { t } = this.props;
    const { isVisible, headphoneDevice, selectedDevice } = this.state;
    return (
      <>
        <TouchableOpacity accessible={false} onPress={this.onOpen}>
          <View style={[styles.optionColumn]}>
            <View style={styles.optionButton}>
              <Image style={styles.imageStyle} source={icons[selectedDevice]}></Image>
            </View>
            <Text {...pruTestID('device')} style={styles.optionText}>{t('Common:device')}</Text>
          </View>
        </TouchableOpacity>
        <PruDialogContainer
          onModalHide={this.onClose}
          visible={isVisible}
          dismissCallBack={this.onClose}>
          <View style={styles.popupWrap}>
            <TouchableOpacity accessible={false} style={styles.centeredView} onPress={this.onClose}>
              <IconFont {...pruTestID('close')} name="popup_arrow" color="#666" size={16}></IconFont>
            </TouchableOpacity>
            {headphoneDevice.bluetooth && (
              <View style={[styles.deviceRow, styles.deviceRowBorder]}>
                <TouchableOpacity
                  accessible={false}
                  style={styles.deviceFlexWrap}
                  onPress={this.selectDevice.bind(this, 'bluetooth')}>
                  <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                    <Image style={{ height: 16, width: 16 }} source={icons.bluetooth}></Image>
                    <Text {...pruTestID('bluetooth')} style={styles.deviceRowItem}>{t('Common:bluetooth')}</Text>
                  </View>
                  {this.getSelectedIcon('bluetooth')}
                </TouchableOpacity>
              </View>
            )}
            {headphoneDevice.audioJack && (
              <View style={[styles.deviceRow, styles.deviceRowBorder]}>
                <TouchableOpacity
                  accessible={false}
                  style={styles.deviceFlexWrap}
                  onPress={this.selectDevice.bind(this, 'headphone')}>
                  <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                    <Image
                      style={{ height: 16, width: 16 }}
                      source={require('../../assets/twilio-video/icon-headphone.png')}></Image>
                    <Text {...pruTestID('headphone')} style={styles.deviceRowItem}>{t('Common:headphone', 'Headphone')}</Text>
                  </View>
                  {this.getSelectedIcon('headphone')}
                </TouchableOpacity>
              </View>
            )}

            <View style={styles.deviceRow}>
              <TouchableOpacity
                accessible={false}
                style={styles.deviceFlexWrap}
                onPress={this.selectDevice.bind(this, 'speaker')}>
                <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                  <Image style={{ height: 14, width: 14 }} source={icons.speaker}></Image>
                  <Text {...pruTestID('speaker')} style={styles.deviceRowItem}>{t('Common:loudspeaker', 'Loudspeaker')}</Text>
                </View>
                {this.getSelectedIcon('speaker')}
              </TouchableOpacity>
            </View>
          </View>
        </PruDialogContainer>
      </>
    );
  }
}

export default withTranslation()(DeviceList);

const styles = StyleSheet.create({
  centeredView: {
    justifyContent: 'center',
    alignItems: 'center',
    height: 34,
  },
  popupWrap: {
    // marginHorizontal: -18, // dialog full screen
    // width: Dimensions.get('window').width - 2,
    // backgroundColor: PruPalette.white,
    width: Dimensions.get('window').width,
    paddingBottom: 12,
    paddingHorizontal: 20,
    borderTopLeftRadius: 12,
    borderTopRightRadius: 12,
    backgroundColor: '#222',
  },
  deviceFlexWrap: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    height: '100%',
    alignItems: 'center',
  },
  imageStyle: {
    height: 24,
    width: 24,
  },
  deviceRow: { height: 50 },
  deviceRowItem: {
    color: '#fff',
    fontSize: 14,
    marginLeft: 10,
  },
  deviceRowBorder: {
    borderBottomColor: '#666',
    borderBottomWidth: 1,
  },
  optionColumn: { flexDirection: 'column', alignItems: 'center' },
  optionText: {
    fontSize: 12,
    color: '#fff',
    paddingTop: 4,
  },
  optionButton: {
    width: 52,
    height: 52,
    borderRadius: 100 / 2,
    borderColor: '#666',
    borderWidth: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
