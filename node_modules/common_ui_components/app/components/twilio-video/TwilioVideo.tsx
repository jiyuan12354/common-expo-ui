import React, { Component } from 'react';
import {
  TwilioVideoLocalView,
  TwilioVideoParticipantView,
  TwilioVideo,
} from 'react-native-twilio-video-webrtc-pru';

import { Text, View, Platform, TouchableOpacity, Image, Alert, AppState } from 'react-native';

import AttendeeList from './AttendeeList';
import LeaveConfirmDialog from './LeaveConfirmDialog';
import { withTranslation } from 'react-i18next';
import { TFunction } from 'i18next';
import { styles } from './Style';
import { ParticipantList } from './ParticipantList';
import DeviceList, { DeviceType } from './DeviceList';
import { pruTestID } from 'common_services_frontend'

export type StateType = {
  permissionStatus: number; // 0: checking, 1: granted, -1: no permission
  isAudioEnabled: boolean;
  isVideoEnabled: boolean;
  isModalVisible: boolean;
  status: string;
  localVideoFocus: boolean;
  trackIdentifierFocus: any;
  videoTracks: any;
  participantList: any;
  HeadphoneDevice: { audioJack?: boolean; bluetooth?: boolean };
};
export type PropType = {
  t?: TFunction; // i18n
  token: string; // interview room id
  userName: string; // user identity in the room
  onStatusChange?: (status: string) => void; // callback when the connection status change
  onLeave?: () => void; // callback when disconnect the room
  onInvite?: () => void; // callback when click invite btn
  // onError?: (errorMsg:string) => void;  // callback when error occurred
};
type TypeTrackIdentifier = {
  participantSid: string;
  videoTrackSid: string;
  identity: string;
};

class TwilioVideoRoom extends Component<PropType, StateType> {
  private refTwilioVideo: React.RefObject<TwilioVideo>;
  constructor(props: any) {
    super(props);
    this.state = {
      // android needs user granted audio & video permission for the first time
      permissionStatus: Platform.OS === 'android' ? 0 : 1,
      isAudioEnabled: true,
      isVideoEnabled: true,
      isModalVisible: false, // leave confirm modal
      status: 'disconnected',
      localVideoFocus: true,
      trackIdentifierFocus: null, // { participantSid: string; videoTrackSid: string;}
      participantList: new Map(), // user list {participant, trackIdentifier,trackAudio:bool}
    };
    this.refTwilioVideo = React.createRef();
  }

  async componentDidMount() {
    // app is active listener
    AppState.addEventListener('change', (nextAppState) => {
      if (nextAppState === 'active') {
        this.setState({ isVideoEnabled: true });
      }
    });

    if (Platform.OS === 'ios') {
      return this.getTokenConnect();
    }

    if (Platform.OS === 'android') {
      const { requestMultiple, PERMISSIONS } = await import('react-native-permissions');
      requestMultiple([PERMISSIONS.ANDROID.RECORD_AUDIO, PERMISSIONS.ANDROID.CAMERA]).then(
        (statuses) => {
          const RECORD_AUDIO = statuses[PERMISSIONS.ANDROID.RECORD_AUDIO];
          const CAMERA = statuses[PERMISSIONS.ANDROID.CAMERA];

          if (RECORD_AUDIO === 'granted' && CAMERA === 'granted') {
            this.setState({ permissionStatus: 1 });
            this.getTokenConnect();
          } else {
            this.setState({ permissionStatus: -1 });
          }
        },
      );
    }
    return null;
  }
  componentWillUnmount() {
    this.refTwilioVideo.current?.disconnect();
  }

  getTokenConnect() {
    const { token, userName } = this.props;
    if (!token || !userName) {
      return;
    }
    try {
      this.refTwilioVideo.current?.connect({ accessToken: token });
      this.setState({ status: 'connecting' });
    } catch (error) {}
  }

  _onEndButtonPress = () => {
    this.setState({ isModalVisible: true });
  };

  _onEndYes = () => {
    this.refTwilioVideo.current?.disconnect();
    this.props.onLeave && this.props.onLeave();
    this.setState({ isModalVisible: false });
  };
  _onEndCancel = () => {
    this.setState({ isModalVisible: false });
  };

  _onMuteButtonPress = () => {
    this.refTwilioVideo.current
      ?.setLocalAudioEnabled(!this.state.isAudioEnabled)
      .then((isEnabled: boolean) => this.setState({ isAudioEnabled: isEnabled }));
  };

  _onVideoButtonPress = () => {
    const { isVideoEnabled } = this.state;
    this.refTwilioVideo.current
      ?.setLocalVideoEnabled(!isVideoEnabled)
      .then((isEnabled: boolean) => {
        this.setState({ isVideoEnabled: isEnabled });
      });
  };

  _onSelectDevice = (device: DeviceType) => {
    const tw = this.refTwilioVideo.current;
    if (!tw) {
      return;
    }
    if (device === 'bluetooth') {
      tw.setBluetoothHeadsetConnected(true).then();
    } else if (device === 'headphone') {
      tw.setBluetoothHeadsetConnected(false).then(() => tw.toggleSoundSetup(false));
    } else {
      tw.toggleSoundSetup(true);
    }
  };

  _onFlipButtonPress = () => {
    this.refTwilioVideo.current?.flipCamera();
  };

  _onRoomDidConnect = ({ roomName, error }) => {
    this.setState({ status: 'connected' });
    this.props.onStatusChange && this.props.onStatusChange('connected');
  };

  _onRoomDidDisconnect = ({ roomName, error }) => {
    if (error) {
      Alert.alert(error?.error || 'Disconnected, please try again');
    }

    this.setState({ status: 'disconnected' });
    setTimeout(() => {
      this.props.onStatusChange && this.props.onStatusChange('disconnected');
    }, 2000);
  };

  _onRoomDidFailToConnect = (error: any) => {
    if (error) {
      Alert.alert(error?.error || 'Fail to connect, please try again');
    }
    this.setState({ status: 'disconnected' });
    this.props.onStatusChange && this.props.onStatusChange('disconnected');
  };

  /**
   * new user attend
   * json: {"participant": {"identity": "teste", "sid": "PAa25a01cb44fe4a1812148a4ffeb64fba"}, "roomName": "room2", "roomSid": "RM29e26e6466d66d04c1298e9919e61b2f"}
   */
  _onRoomParticipantDidConnect = ({ participant }) => {
    let copyParticipantList = new Map(this.state.participantList);
    copyParticipantList.set(participant.sid, { participant });
    this.setState({ participantList: copyParticipantList });
  };

  // user leave
  _onRoomParticipantDidDisconnect = ({ participant }) => {
    let copyParticipantList = new Map(this.state.participantList);
    let trackIdentifierFocus: TypeTrackIdentifier = this.state.trackIdentifierFocus;
    if (trackIdentifierFocus && trackIdentifierFocus.participantSid === participant.sid) {
      trackIdentifierFocus = null;
    }

    copyParticipantList.delete(participant.sid);
    this.setState({
      participantList: copyParticipantList,
      trackIdentifierFocus,
    });
    // this.state.participantList.delete(participant.sid);
  };

  _onParticipantAddedVideoTrack = ({ participant, track }) => {
    var copyParticipantList = new Map(this.state.participantList);

    const trackIdentifier = {
      participantSid: participant.sid,
      videoTrackSid: track.trackSid,
      identity: participant.identity,
    };

    const trackInfo: any = copyParticipantList.get(participant.sid) || {};

    copyParticipantList.set(participant.sid, { ...trackInfo, participant, trackIdentifier });
    this.setState({ participantList: copyParticipantList });
  };
  // when disable video, remove the trackIdentifier from state
  _onParticipantRemovedVideoTrack = ({ participant }) => {
    var copyParticipantList = new Map(this.state.participantList);
    const trackInfo: any = copyParticipantList.get(participant.sid) || {};

    copyParticipantList.set(participant.sid, { ...trackInfo, trackIdentifier: null });
    this.setState({ participantList: copyParticipantList });
  };

  /** add audio */
  // track: {"enabled": true, "trackName": "347d1857-ae44-4952-9c7b-aa61f8023211", "trackSid": "MT3cba4b2305eba7f26e5b0036e408a120"}
  onParticipantEnabledAudioTrack = ({ participant, track }) => {
    var copyParticipantList = new Map(this.state.participantList);
    const trackInfo: any = copyParticipantList.get(participant.sid) || {};

    const enabled = track && track.enabled ? true : false;
    copyParticipantList.set(participant.sid, { ...trackInfo, participant, trackAudio: enabled });
    this.setState({ participantList: copyParticipantList });
  };

  /** remove audio */
  _onParticipantDisabledAudioTrack = ({ participant }) => {
    var copyParticipantList = new Map(this.state.participantList);
    const trackInfo: any = copyParticipantList.get(participant.sid) || {};
    copyParticipantList.set(participant.sid, { ...trackInfo, trackAudio: false });
    this.setState({ participantList: copyParticipantList });
  };

  _onParticipantViewPress = (trackIdentifier: TypeTrackIdentifier) => {
    // { participantSid: string; videoTrackSid: string;}
    const { participantSid } = this.state.trackIdentifierFocus || {};
    // current click view
    const clickParticipantSid = trackIdentifier ? trackIdentifier.participantSid : null;
    if (participantSid === null || clickParticipantSid !== participantSid) {
      this.setState({
        trackIdentifierFocus: { ...trackIdentifier },
        localVideoFocus: false,
      });
    }
  };

  _onLocalViewPress = () => {
    if (!this.state.localVideoFocus) {
      this.setState({ trackIdentifierFocus: null, localVideoFocus: true });
    }
  };

  render() {
    const { token, userName, onInvite, t } = this.props;

    const {
      isModalVisible,
      status,
      permissionStatus,
      participantList,
      localVideoFocus,
      trackIdentifierFocus,
    } = this.state;

    if (!token || !userName) {
      return (
        <Text style={{ textAlign: 'center', color: 'red', padding: 50 }}>
          Error: empty token or userName
        </Text>
      );
    }

    if (permissionStatus === 0) {
      return null;
    }

    if (permissionStatus === -1) {
      return (
        <View style={styles.permissionError}>
          <Text style={{ textAlign: 'center', color: 'red', fontSize: 16 }}>
            Please Grant Audio & Video Permissions
          </Text>
        </View>
      );
    }

    const showSpinner: boolean = permissionStatus !== -1 && status === 'connecting';

    return (
      <View style={styles.container}>
        {(status === 'connected' || status === 'connecting') && (
          <View style={styles.callContainer}>
            {status === 'connected' && (
              <ParticipantList
                participantList={participantList}
                userName={userName}
                onParticipantViewPress={this._onParticipantViewPress}
                onLocalViewPress={this._onLocalViewPress}
              />
            )}
            <View style={styles.optionsContainer}>
              <TouchableOpacity accessible={false} onPress={this._onMuteButtonPress}>
                <View style={[styles.optionColumn]}>
                  <View style={styles.optionButton}>
                    {this.state.isAudioEnabled ? (
                      <Image
                        source={require('../../assets/twilio-video/icon-voice-on.png')}
                        style={{ width: 24, height: 24 }}
                      />
                    ) : (
                      <Image
                        source={require('../../assets/twilio-video/icon-voice-off.png')}
                        style={{ width: 24, height: 24 }}
                      />
                    )}
                  </View>
                  <Text {...pruTestID('muteButton')} style={styles.optionText}>{t('Common:mute')}</Text>
                </View>
              </TouchableOpacity>
              <TouchableOpacity accessible={false} onPress={this._onVideoButtonPress}>
                <View style={[styles.optionColumn]}>
                  <View style={styles.optionButton}>
                    {this.state.isVideoEnabled ? (
                      <Image
                        source={require('../../assets/twilio-video/icon-video-on.png')}
                        style={{ width: 24, height: 24 }}
                      />
                    ) : (
                      <Image
                        source={require('../../assets/twilio-video/icon-video-off.png')}
                        style={{ width: 24, height: 24 }}
                      />
                    )}
                  </View>
                  <Text {...pruTestID('videoButton')} style={styles.optionText}> {t('Common:video')} </Text>
                </View>
              </TouchableOpacity>

              <AttendeeList
                userName={userName}
                isAudioEnabled={this.state.isAudioEnabled}
                isVideoEnabled={this.state.isVideoEnabled}
                participantList={participantList}
                onInvite={onInvite}></AttendeeList>

              <DeviceList onSelectDevice={this._onSelectDevice}></DeviceList>

              <TouchableOpacity accessible={false} onPress={this._onEndButtonPress}>
                <View style={[styles.optionColumn]}>
                  <View style={[styles.optionButton, styles.leaveButton]}>
                    <Image
                      source={require('../../assets/twilio-video/icon-phone.png')}
                      style={{ width: 24, height: 24 }}
                    />
                  </View>
                  <Text {...pruTestID('leaveButton')} style={styles.optionText}> {t('Common:leave')}</Text>
                </View>
              </TouchableOpacity>
              {/* <TwilioVideoLocalView c enabled={true} style={styles.localVideo} /> */}
            </View>
            {/* full screen participant */}
            {trackIdentifierFocus && (
              <View style={styles.remoteVideoFull}>
                <TwilioVideoParticipantView
                  style={styles.remoteVideoFull}
                  key={trackIdentifierFocus.videoTrackSid}
                  trackIdentifier={trackIdentifierFocus}
                />
              </View>
            )}

            {/* full screen local video */}
            {localVideoFocus && (
              <View>
                <TwilioVideoLocalView enabled={true} key="large" style={styles.localVideo} />
              </View>
            )}
          </View>
        )}

        <TwilioVideo
          // ref="twilioVideo"
          ref={this.refTwilioVideo}
          onRoomDidConnect={this._onRoomDidConnect}
          onRoomDidDisconnect={this._onRoomDidDisconnect}
          onRoomDidFailToConnect={this._onRoomDidFailToConnect}
          onParticipantAddedVideoTrack={this._onParticipantAddedVideoTrack}
          onParticipantRemovedVideoTrack={this._onParticipantRemovedVideoTrack}
          onRoomParticipantDidDisconnect={this._onRoomParticipantDidDisconnect}
          onRoomParticipantDidConnect={this._onRoomParticipantDidConnect}
          onParticipantEnabledAudioTrack={this.onParticipantEnabledAudioTrack}
          onParticipantDisabledAudioTrack={this._onParticipantDisabledAudioTrack}
          onParticipantAddedAudioTrack={this.onParticipantEnabledAudioTrack}
          onParticipantRemovedAudioTrack={this._onParticipantDisabledAudioTrack}
        />

        <LeaveConfirmDialog
          isVisible={isModalVisible}
          onCancel={this._onEndCancel}
          onConfirm={this._onEndYes}></LeaveConfirmDialog>
      </View>
    );
  }
}
export default withTranslation()(TwilioVideoRoom);
