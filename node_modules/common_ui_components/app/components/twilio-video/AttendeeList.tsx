import React, { memo, useMemo, useState } from 'react';
import { StyleSheet, View, TouchableOpacity, Image, Dimensions, Text } from 'react-native';
// import PopupDialog, { DialogContent, SlideAnimation } from 'react-native-popup-dialog';
import { DialogContainer as PruDialogContainer } from '../../components/common/dialog-container/dialog-container';
import AttendeeName from './AttendeeName';
import { getColorList } from './ParticipantList';
import { IconFont } from '../icon-font/icon-font';
import { useTranslation } from 'react-i18next';
import { useFocusEffect } from '@react-navigation/native';
import { pruTestID } from 'common_services_frontend';

const AttendeeList = ({
  userName,
  participantList,
  isAudioEnabled,
  isVideoEnabled,
  onInvite,
}: {
  userName: string;
  participantList: any;
  isVideoEnabled: boolean;
  isAudioEnabled: boolean;
  onInvite: (() => void) | undefined;
}) => {
  if (!userName) {
    return null;
  }

  const arrColor = useMemo(() => getColorList(participantList.size), [participantList.size]);

  const [isVisible, setIsVisible] = useState(false);
  const [needInvite, setInvite] = useState(true);

  const toggleVisible = (visible: boolean) => setIsVisible(visible);

  const { t } = useTranslation(['Common']);

  useFocusEffect(
    React.useCallback(() => {
      // Do something when the screen is focused
      return () => {
        // colse the popup when the screen is unfocused
        setIsVisible(false);
      };
    }, []),
  );

  return (
    <>
      <TouchableOpacity accessible={false} onPress={() => toggleVisible(true)}>
        <View style={[styles.optionColumn]}>
          <View style={styles.optionButton}>
            <Image
              source={require('../../assets/twilio-video/icon-attendee.png')}
              style={{ width: 24, height: 24 }}
            />
          </View>
          <Text {...pruTestID('attendee')} style={styles.optionText}>{t('Common:attendee')}</Text>
        </View>
      </TouchableOpacity>
      <PruDialogContainer
        onModalHide={() => {
          if (needInvite) {
            onInvite();
          }
        }}
        visible={isVisible}
        dismissCallBack={() => {
          setInvite(false);
          toggleVisible(false);
        }}>
        <View style={styles.popupWrap}>
          <TouchableOpacity
            accessible={false}
            style={styles.centeredView}
            onPress={() => {
              setInvite(false);
              toggleVisible(false);
            }}>
            <IconFont {...pruTestID('close')} name="popup_arrow" color="#666" size={16}></IconFont>
          </TouchableOpacity>
          <AttendeeName
            name={userName}
            bgColor="#41d27c"
            videoOn={isVideoEnabled}
            audioOn={isAudioEnabled}></AttendeeName>
          {Array.from(participantList, ([sid, item], index) => {
            const { participant, trackIdentifier, trackAudio } = item;
            if (!participant) {
              return null;
            }
            return (
              <AttendeeName
                key={participant.sid}
                name={participant.identity}
                videoOn={!!trackIdentifier}
                audioOn={!!trackAudio}
                bgColor={arrColor[index]}></AttendeeName>
            );
          })}
          <TouchableOpacity
            accessible={false}
            style={[styles.centeredView, styles.inviteWrap]}
            onPress={() => {
              setInvite(true);
              toggleVisible(false);
            }}>
            <IconFont {...pruTestID('addInterviewer')} name="tabbar_recuit_normal1" color="#fff" size={24}></IconFont>
          </TouchableOpacity>
        </View>
      </PruDialogContainer>
    </>
  );
};

const styles = StyleSheet.create({
  centeredView: {
    justifyContent: 'center',
    alignItems: 'center',
    height: 40,
  },
  popupWrap: {
    // marginHorizontal: -18, // dialog full screen
    // width: Dimensions.get('window').width - 2,
    // paddingLeft: 20,
    // paddingRight: 20,
    width: Dimensions.get('window').width,
    paddingBottom: 12,
    paddingHorizontal: 20,
    borderTopLeftRadius: 12,
    borderTopRightRadius: 12,
    backgroundColor: '#222',
  },
  circleView: {
    width: 54,
    height: 54,
    borderRadius: 30,
    marginRight: 10,
    marginLeft: 10,
  },
  nameLetter: {
    color: '#fff',
    fontSize: 24,
    textAlign: 'center',
    height: 54,
    lineHeight: 50,
  },
  nameText: {
    color: '#fff',
    fontSize: 18,
  },
  inviteWrap: {
    borderWidth: 1,
    borderColor: '#858585',
    borderRadius: 12,
    height: 48,
  },
  optionColumn: { flexDirection: 'column', alignItems: 'center' },
  optionText: {
    fontSize: 12,
    color: '#fff',
    paddingTop: 4,
  },
  optionButton: {
    width: 52,
    height: 52,
    borderRadius: 100 / 2,
    borderColor: '#666',
    borderWidth: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default memo(AttendeeList);
