import React, { useMemo } from 'react';
import {
  StyleSheet,
  View,
  TouchableOpacity,
  ScrollView,
  Text,
  Platform,
  Image,
} from 'react-native';
import { styles } from './Style';
import {
  TwilioVideoLocalView,
  TwilioVideoParticipantView,
} from 'react-native-twilio-video-webrtc-pru';

/** split name by space, get the first letter */
function getNameInitials(name: string): string {
  let nameInitials = '';
  if (!name) {
    return nameInitials;
  }

  const arr = name.split(' ');
  arr.forEach((item) => {
    nameInitials += item[0] || '';
  });
  return nameInitials.toUpperCase();
}

export function getColorList(length: number): string[] {
  const arrColorSample = ['#3994f2', '#9983dc', '#27b7d5', '#ff616f', '#41d27c'];
  let arrColor: string[] = [...arrColorSample];
  while (arrColor.length < length) {
    arrColor = [...arrColor, ...arrColorSample];
  }
  arrColor.length = length; // delete extra element to make arrColor.length == length
  return arrColor;
}

export const ParticipantList = ({
  userName,
  participantList,
  onParticipantViewPress,
  onLocalViewPress,
}: {
  userName: string;
  participantList: Map<any, any>;
  onParticipantViewPress: (trackIdentifier: any) => void;
  onLocalViewPress: () => void;
}) => {
  const arrColor = useMemo(() => getColorList(participantList.size), [participantList.size]);
  if (Platform.OS === 'ios') {
    return (
      <ScrollView horizontal={true} style={styles.remoteGrid}>
        <TouchableOpacity onPress={() => onLocalViewPress()} style={{ height: 100 }}>
          <TwilioVideoLocalView enabled={true} style={styles.remoteVideo} />
          <Text numberOfLines={1} style={styles.identityName}>
            {userName}
          </Text>
        </TouchableOpacity>
        {participantList.size > 0 &&
          Array.from(participantList, ([sid, item]) => {
            console.log('sid==', sid, '&track===', item);
            // user and video track
            const { participant, trackIdentifier, trackAudio } = item;
            if (trackIdentifier) {
              return (
                <TouchableOpacity
                  style={{ height: 100, marginRight: 10 }}
                  key={sid}
                  onPress={() => onParticipantViewPress(trackIdentifier)}>
                  <View
                    style={{
                      width: 100,
                      height: 100,
                      borderRadius: 10,
                    }}>
                    <TwilioVideoParticipantView
                      style={styles.remoteVideo}
                      key={sid + 'top'}
                      trackIdentifier={trackIdentifier}
                    />
                    <Text numberOfLines={1} style={styles.identityName}>
                      {participant.identity}
                    </Text>
                    {/* {trackAudio === false && (
                      <Image
                        source={require('../../assets/twilio-video/icon-voice-off.png')}
                        style={stylePar.audioOff}
                      />
                    )} */}
                  </View>
                </TouchableOpacity>
              );
            } else {
              return (
                <TouchableOpacity
                  style={{ height: 100, marginLeft: 10 }}
                  key={sid}
                  onPress={() => onParticipantViewPress(trackIdentifier)}>
                  <View
                    style={{
                      width: 100,
                      height: 100,
                      padding: 4,
                      backgroundColor: '#999',
                    }}>
                    {/* <Image
                      source={require('../../assets/twilio-video/icon-video-off.png')}
                      style={{ width: 22, height: 22 }}
                    />
                    {trackAudio === false && (
                      <Image
                        source={require('../../assets/twilio-video/icon-voice-off.png')}
                        style={stylePar.audioOff}
                      />
                    )} */}

                    <Text numberOfLines={1} style={stylePar.identityName}>
                      {participant.identity}
                    </Text>
                  </View>
                </TouchableOpacity>
              );
            }
          })}
      </ScrollView>
    );
  }

  // android
  return (
    <ScrollView horizontal={true} style={styles.remoteGrid}>
      {/* agent */}
      <TouchableOpacity onPress={() => onLocalViewPress()} style={{ height: 72 }}>
        <View style={stylePar.rowWrap}>
          <View style={[stylePar.circleView, { backgroundColor: '#41d27c' }]}>
            <Text style={stylePar.nameLetter}>{getNameInitials(userName)}</Text>
          </View>
        </View>
      </TouchableOpacity>
      {/* candidate list */}
      {Array.from(participantList, ([sid, item], index) => {
        const { participant, trackIdentifier, trackAudio } = item;
        return (
          <TouchableOpacity
            key={sid}
            onPress={() => onParticipantViewPress(trackIdentifier)}
            style={{ height: 72 }}>
            <View style={stylePar.rowWrap}>
              <View style={[stylePar.circleView, { backgroundColor: arrColor[index] }]}>
                <Text style={stylePar.nameLetter}>{getNameInitials(participant.identity)}</Text>
                {/* {!trackIdentifier && (
                  <Image
                    source={require('../../assets/twilio-video/icon-video-off.png')}
                    style={stylePar.videoOff}
                  />
                )}

                {trackAudio === false && (
                  <Image
                    source={require('../../assets/twilio-video/icon-voice-off.png')}
                    style={stylePar.audioOff}
                  />
                )} */}
              </View>
            </View>
          </TouchableOpacity>
        );
      })}
    </ScrollView>
  );
};

const stylePar = StyleSheet.create({
  rowWrap: { height: 72, flexDirection: 'row', alignItems: 'center' },
  circleView: {
    width: 72,
    height: 72,
    borderRadius: 10,
    marginRight: 10,
    marginLeft: 10,
  },
  nameLetter: {
    color: '#fff',
    fontSize: 24,
    textAlign: 'center',
    height: 72,
    lineHeight: 72,
  },
  identityName: {
    position: 'absolute',
    top: 72,
    paddingLeft: 10,
    color: '#fff',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    width: 100,
    overflow: 'hidden',
    // borderBottomLeftRadius:10,
    // borderBottomRightRadius:10,
  },
  audioOff: {
    width: 20,
    height: 20,
    padding: 10,
    position: 'absolute',
    right: 4,
    top: 4,
  },
  videoOff: {
    width: 20,
    height: 20,
    padding: 10,
    position: 'absolute',
    left: 4,
    top: 4,
  },
});
