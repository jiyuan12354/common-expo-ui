import React, { useState } from 'react';
import { View, Text } from 'react-native';
import {
  CommonTranslateKey,
  PruDialogContainer,
  SubmitButtonGroup,
  PruDialogToast,
} from 'common_ui_components';
import { useTranslation } from 'react-i18next';
import { styles } from './style';
import Header from './Header';
import { FilterType, DatesOptions, Radios } from './components';
import { RadioComponent } from '../sort-modal/radio/radio.component';

export interface FilterDilogProps {
  visible: boolean;
  modalTitle: string;
  confirmButtonText?: string;
  confirmCallBack: Function;
  cancelButtonText?: string;
  dismissCallBack: Function;
  customValidatFn: (selectedValues: any) => string; // custom validation function
  columns: Record<string, any>[];
  defaultValues: Record<string, any>;
}

export const FilterModal: React.FunctionComponent<FilterDilogProps> = ({
  visible: propsVisble,
  dismissCallBack,
  confirmCallBack,
  modalTitle = '',
  columns = [],
  defaultValues,
  customValidatFn,
  ...restProps
}) => {
  const { t } = useTranslation();
  const [needValidateFun, setNeedValidateFun] = useState({});
  const [visible, setVisible] = useState(propsVisble);
  const [customError, setCustomError] = useState('');
  const [filterValues, setFilterValues] = useState(defaultValues);

  React.useEffect(() => {
    setVisible(propsVisble);
  }, [propsVisble]);

  const onSelect = (name, values) => {
    setNeedValidateFun([]);
    setFilterValues({
      ...filterValues,
      ...{
        [`${name}`]: values,
      },
    });
  };

  const onValidates = async (name, validateFun: any) => {
    const copyNeedValidateFun = { ...needValidateFun };
    copyNeedValidateFun[`${name}`] = validateFun;
    setNeedValidateFun(copyNeedValidateFun);
  };

  const validateAction = async () => {
    let allResults: any = [];

    Object.keys(needValidateFun).forEach(async (i) => {
      const result = await needValidateFun[i]();
      allResults.push(result);
    });

    return allResults;
  };

  const onConfirm = async () => {
    if (customValidatFn) {
      const error = await customValidatFn(filterValues);
      if (!error) {
        confirmCallBack(filterValues);
      } else {
        setCustomError(error);
      }
    } else {
      const validationResults = await validateAction();
      if (validationResults.length === 0 || validationResults.find((item) => item)) {
        // console.log('filterValues====', filterValues);
        confirmCallBack(filterValues);
      }
    }
  };

  const onReset = () => {
    setNeedValidateFun([]);
    setFilterValues(defaultValues);
  };

  const renderFilters = (column: Record<string, unknown>) => {
    switch (column.type) {
      case FilterType.DateRange:
        return (
          <DatesOptions
            name={column.name}
            onSelect={onSelect}
            onValidates={onValidates}
            data={filterValues[column.name]}
          />
        );

      case FilterType.Radios:
        return (
          <Radios
            name={column.name}
            options={column.options}
            onSelect={onSelect}
            data={filterValues[column.name]}
          />
        );
      case FilterType.SortingRadios:
        return (
          <RadioComponent
            name={column.name}
            options={column.options}
            onSelect={onSelect}
            data={filterValues[column.name]}
          />
        );
      default:
        break;
    }
  };

  return (
    <PruDialogContainer visible={visible} dismissCallBack={dismissCallBack}>
      <View style={styles.WRAPPER}>
        <Header
          dismissCallBack={dismissCallBack}
          modalTitle={modalTitle || t(CommonTranslateKey.filter)}
        />
        {/* style={[styles.lineBox, { marginBottom: 12 }]} */}
        <View>
          {columns.map((column: any, index) => {
            return (
              <>
                <View>
                  <Text style={styles.filterTitle}>{column.label}</Text>
                </View>
                {renderFilters(column)}
              </>
            );
          })}
        </View>

        <SubmitButtonGroup
          style={{ marginBottom: 16 }}
          cancelButtonText={t(CommonTranslateKey.reset)}
          onCancel={onReset}
          onConfirm={onConfirm}
        />
      </View>
      <PruDialogToast
        duration={3000}
        message={customError}
        visible={!!customError}
        dismissCallBack={() => setCustomError('')}
      />
    </PruDialogContainer>
  );
};
