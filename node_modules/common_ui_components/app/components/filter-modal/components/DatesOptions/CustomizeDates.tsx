import React, { useEffect, useCallback, useRef, useState } from 'react';
import { View, Platform, TouchableOpacity, Keyboard, TextInput, Text } from 'react-native';
import { useDispatch } from 'react-redux';
import moment from 'moment';
import { constants, pruTestID, DateToTs } from 'common_services_frontend';
import {
  PruPalette,
  CommonTranslateKey,
  PruDialogContainer,
  textStyleSet,
  PruIconFont,
  PruDateTimePickerView,
} from 'common_ui_components';
import { useTranslation } from 'react-i18next';
import { styles } from './style';
import { dateType } from './datesConfigs';
import { Colors } from 'react-native/Libraries/NewAppScreen';
import { constants as commonConstants } from 'common_services_frontend/src/utils/constants';

const CustomizeDates: React.FunctionComponent<any> = ({
  name,
  onSelect,
  onValidates,
  customizeDateValidateFun,
  values,
}) => {
  const { t, i18n } = useTranslation();
  const dispatch = useDispatch();

  const [showStartDate, setShowStartDate] = useState(false);
  const [showEndDate, setShowEndDate] = useState(false);

  const [startDateTs, setStartDateTs] = useState();
  const [endDateTs, setEndDateTs] = useState();

  useEffect(() => {
    values[0] && setStartDateTs(moment(values[0]));
    values[1] && setEndDateTs(moment(values[1]));
  }, [values]);

  return (
    <View>
      <View>
        <View style={styles.lineBox}>
          <View style={{ flex: 1 }}>
            <View style={styles.dateArea}>
              <PruIconFont name="date" color={PruPalette.grey66} size={24} />

              <TextInput
                showSoftInputOnFocus={false}
                value={
                  startDateTs ? moment(startDateTs).format(commonConstants.Default_Date_Format) : ''
                }
                onTouchEnd={() => {
                  Keyboard.dismiss();
                  setShowStartDate(true);
                }}
                placeholder={t(CommonTranslateKey.first_day)}
                placeholderTextColor={PruPalette.greyba}
                underlineColorAndroid={Colors.transparent}
                style={styles.timeInput}
              />
            </View>
            <View
              style={{
                height: 1,
                marginTop: 5,
                backgroundColor: PruPalette.greyf4,
              }}
            />
          </View>

          <Text
            style={{
              width: 38.5,
              textAlign: 'center',
              ...textStyleSet.content_14_med_18,
            }}>
            {t(CommonTranslateKey.to)}
          </Text>

          <View style={{ flex: 1 }}>
            <View style={styles.dateArea}>
              <PruIconFont name="date" color={PruPalette.grey66} size={24} />
              <TextInput
                showSoftInputOnFocus={false}
                value={endDateTs ? moment(endDateTs).format(constants.Default_Date_Format) : ''}
                onTouchEnd={() => {
                  Keyboard.dismiss();
                  setShowEndDate(true);
                }}
                placeholder={t(CommonTranslateKey.last_day)}
                placeholderTextColor={PruPalette.greyba}
                underlineColorAndroid={Colors.transparent}
                style={styles.timeInput}
              />
            </View>

            <View
              style={{
                height: 1,
                marginTop: 5,
                backgroundColor: PruPalette.greyf4,
              }}
            />
          </View>
        </View>
      </View>

      <PruDialogContainer
        visible={showStartDate}
        dismissCallBack={() => {
          setShowStartDate(false);
        }}>
        <PruDateTimePickerView
          model="date"
          hideTime={true}
          title={`${t(CommonTranslateKey.please_select)} ${t(CommonTranslateKey.first_day)}`}
          onDateTimeConfirm={(date) => {
            setStartDateTs(date);
            setShowStartDate(false);
            onSelect(name, {
              label: dateType.customize,
              value: [moment(date).toISOString(), moment(endDateTs).toISOString()],
            });
            onValidates(name, () => {
              return customizeDateValidateFun([date, endDateTs]);
            });
          }}
          onClose={() => {
            setShowStartDate(false);
          }}
          initPickeredDate={new Date(startDateTs)}
        />
      </PruDialogContainer>
      <PruDialogContainer
        visible={showEndDate}
        dismissCallBack={() => {
          setShowEndDate(false);
        }}>
        <PruDateTimePickerView
          model="date"
          hideTime={true}
          title={`${t(CommonTranslateKey.please_select)} ${t(CommonTranslateKey.last_day)}`}
          onDateTimeConfirm={(date) => {
            setEndDateTs(date);
            setShowEndDate(false);
            onSelect(name, {
              label: 'customize',
              value: [moment(startDateTs).toISOString(), moment(date).endOf('day').toISOString()],
            });
            onValidates(name, () => {
              return customizeDateValidateFun([
                startDateTs,
                moment(date).endOf('day').toISOString(),
              ]);
            });
          }}
          onClose={() => {
            setShowEndDate(false);
          }}
          initPickeredDate={new Date(endDateTs)}
        />
      </PruDialogContainer>
    </View>
  );
};

export default CustomizeDates;
