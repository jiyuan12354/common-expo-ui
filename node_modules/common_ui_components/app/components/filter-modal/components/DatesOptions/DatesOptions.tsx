import React, { useEffect, useCallback, useRef, useState, useImperativeHandle } from 'react';
import { View, Platform, TouchableOpacity, Keyboard, TextInput, Text } from 'react-native';
import { useDispatch } from 'react-redux';
import moment from 'moment';
import { constants, pruTestID, DateToTs } from 'common_services_frontend';
import { PruDialogToast } from 'common_ui_components';
import { useTranslation } from 'react-i18next';
import { styles } from './style';
import { getConfigs, dateType } from './datesConfigs';
import { CommonTranslateKey } from '../../../../translation/__translation-keys';
import CustomizeDates from './CustomizeDates';

const DatesOptions: React.FunctionComponent<any> = ({ name, data, onSelect, onValidates }) => {
  const { t, i18n } = useTranslation();
  const dispatch = useDispatch();
  const configs = getConfigs(t);

  const endOfToday = moment().endOf('day');

  const [selectedKey, setSelectedKey] = useState('');
  const [startDateTs, setStartDateTs] = useState();
  const [endDateTs, setEndDateTs] = useState();

  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');

  useEffect(() => {
    setSelectedKey(data?.label);
    setStartDateTs(data?.value[0]);
    setEndDateTs(data?.value[1]);
  }, [data]);

  // useEffect(() => {
  //   let timeoutId;
  //   if (showToast) {
  //     timeoutId = setTimeout(() => {
  //       setShowToast(false);
  //     }, 3000);
  //   }
  //   return () => timeoutId && clearTimeout(timeoutId);
  // }, [showToast]);

  let configValidate = async (values: string[]) => {
    const startDate = moment(values[0]);
    const endDate = moment(values[1]);

    if (endDate.isAfter(endOfToday)) {
      setShowToast(true);
      setToastMessage(t(CommonTranslateKey.the_end_time_cannot_be_later_than_today));
      return false;
    }

    if (startDate.isAfter(endDate)) {
      setShowToast(true);
      setToastMessage(t(CommonTranslateKey.the_end_time_must_be_later_than_the_start_time));
      return false;
    }

    return true;
  };

  return (
    <View>
      <View>
        <View style={styles.lineBox}>
          {configs.map((config, index) => {
            const isSelected = selectedKey === config.key;
            return (
              <TouchableOpacity
                accessible={false}
                style={[styles.item, isSelected && styles.itemSelected]}
                activeOpacity={0.9}
                onPress={() => {
                  const dateRange =
                    typeof config.dataRange === 'function' ? config.dataRange() : config.dataRange;
                  const key = config.key;

                  onSelect(name, {
                    label: key,
                    value: dateRange,
                  });

                  if (config.key === dateType.customize) {
                    onValidates(name, () => {
                      return configValidate([startDateTs, endDateTs]);
                    });
                  }

                  setSelectedKey(key);
                }}>
                <Text
                  {...pruTestID(config.key)}
                  style={[styles.itemText, isSelected && styles.itemTextSelected]}>
                  {config.label}
                </Text>
              </TouchableOpacity>
            );
          })}
        </View>
      </View>

      {selectedKey === dateType.customize && (
        <CustomizeDates
          name={name}
          onSelect={onSelect}
          onValidates={onValidates}
          customizeDateValidateFun={configValidate}
          values={data.value}
        />
      )}

      <View>
        <PruDialogToast
          duration={3000}
          message={toastMessage}
          visible={showToast}
          dismissCallBack={() => {
            setShowToast(false);
          }}
        />
      </View>
    </View>
  );
};

export default DatesOptions;
