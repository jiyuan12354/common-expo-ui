import React, { useState } from 'react';
import { View, Text } from 'react-native';
import { CommonTranslateKey, SubmitButtonGroup } from 'common_ui_components';
import { useTranslation } from 'react-i18next';
import { styles } from './sort-modal.style';
import { HeaderComponent } from './header.component';
import { RadioComponent } from './radio/radio.component';

export interface SortModalProps {
  modalTitle: string;
  confirmButtonText?: string;
  cancelButtonText?: string;
  columns: Record<string, any>[];
  defaultValues: Record<string, any>;
  selectedValues: Record<string, any>;
  selectMultiple?: boolean; // can select multiple or not
  onClose?: Function;
  onConfirm: Function;
}

export const SortModal: React.FC<SortModalProps> = ({
  onClose,
  onConfirm,
  modalTitle = '',
  columns = [],
  defaultValues,
  selectedValues,
  selectMultiple,
  ...restProps
}) => {
  const { t } = useTranslation();
  const [filterValues, setFilterValues] = useState(selectedValues || defaultValues);

  const onSelect = (name: string, values: string) => {
    if (selectMultiple) {
      setFilterValues({
        ...filterValues,
        ...{
          [name]: values,
        },
      });
    } else {
      setFilterValues({
        [name]: values,
      });
    }
  };

  const onPressConfirm = async () => {
    onConfirm(filterValues);
    if (typeof onClose === 'function') {
      onClose();
    }
  };

  const onReset = () => {
    setFilterValues(defaultValues);
  };

  return (
    <View style={styles.WRAPPER}>
      <HeaderComponent dismissCallBack={onClose} modalTitle={modalTitle} />
      {columns.map((column: any, index) => {
        const data = filterValues[column?.name] || {};
        return (
          <View key={index}>
            <View>
              <Text style={styles.filterTitle}>{column.label}</Text>
            </View>
            <RadioComponent
              name={column.name}
              options={column.options}
              onSelect={onSelect}
              data={data}
            />
          </View>
        );
      })}

      <SubmitButtonGroup
        style={{ marginBottom: 16 }}
        cancelButtonText={t(CommonTranslateKey.reset)}
        onCancel={onReset}
        onConfirm={onPressConfirm}
      />
    </View>
  );
};
