import * as React from 'react';
import {
  View,
  ViewStyle,
  TouchableNativeFeedback,
  TouchableOpacity,
  Platform,
  Text,
  Dimensions,
} from 'react-native';
import { tabBarStyles as styles } from './tab-bar.styles';
import { tabViewStyles } from '../tab-view/tab-view.styles';
import { spacing } from '../../theme';
import { scale } from '../../style/ScalingUtil';
import { pruTestID } from 'common_services_frontend';
import { Colors, Fonts } from '../../pruforce';

export interface TabbarProps {
  activeStyle?: {
    activeColor?: string;
    fontWeight?:
      | 'normal'
      | 'bold'
      | '100'
      | '200'
      | '300'
      | '400'
      | '500'
      | '600'
      | '700'
      | '800'
      | '900';
    fontSize?: number;
    lineHeight?: number;
  };
  inActiveStyle?: {
    inactiveColor?: string;
    fontWeight?:
      | 'normal'
      | 'bold'
      | '100'
      | '200'
      | '300'
      | '400'
      | '500'
      | '600'
      | '700'
      | '800'
      | '900';
    fontSize?: number;
    lineHeight?: number;
  };
  tabCustomStyle?: ViewStyle;
  tabs?: any[];
  backgroundColor?: string;
  containerStyle?: ViewStyle;
  activeTab?: number;
  goToPage?: any;
  underlineStyle?: ViewStyle;
  onScroll?: Function;
  toolWidth?: number;
  isDivideEqually?: boolean;
  borderBottomWidth?: number;
  bottomSpacing?: number;
  divideEquallySection?: number;
  tabValues?: (tab:number) => number;
}

export const TabBar: React.SFC<TabbarProps> = (props) => {
  const { divideEquallySection, tabValues } = props;
  const _renderTab = (name, page, isTabActive, onPressHandler) => {
    const textColor = isTabActive
      ? props.activeStyle.activeColor
      : props.inActiveStyle.inactiveColor;

    const fontWeight = isTabActive
      ? props.activeStyle.fontWeight || 'bold'
      : props.inActiveStyle.fontWeight || 'bold';
    const fontSize = isTabActive
      ? props.activeStyle.fontSize || scale(16)
      : props.inActiveStyle.fontSize || scale(16);
    const lineHeight = isTabActive
      ? props.activeStyle.lineHeight || scale(24)
      : props.inActiveStyle.lineHeight || scale(24);
    const screenWidth = Dimensions.get('window').width;

    var tabStyle;
    if (props.isDivideEqually) {
      tabStyle = {
        alignItems: 'center',
        justifyContent: 'flex-end',
        paddingBottom: props.bottomSpacing ? props.bottomSpacing : spacing.spacing8,
        width: screenWidth / (divideEquallySection ? divideEquallySection : 3),
        borderBottomWidth: isTabActive
          ? props.borderBottomWidth
            ? props.borderBottomWidth
            : 3
          : 0,
        borderBottomColor:
          (props.underlineStyle && props.underlineStyle.backgroundColor) ||
          props.activeStyle.activeColor,
      };
    } else {
      tabStyle = {
        alignItems: 'flex-start',
        justifyContent: 'flex-end',
        paddingBottom: props.bottomSpacing ? props.bottomSpacing : spacing.spacing8,
        marginRight: (props.tabCustomStyle && props.tabCustomStyle.marginRight) || 26,
        borderBottomWidth: isTabActive
          ? props.borderBottomWidth
            ? props.borderBottomWidth
            : 3
          : 0,
        borderBottomColor:
          (props.underlineStyle && props.underlineStyle.backgroundColor) ||
          props.activeStyle.activeColor,
      };
    }

    return (
      <TouchableOpacity
        activeOpacity={0.9}
        style={tabStyle}
        key={name}
        accessible={false}
        accessibilityLabel={name}
        accessibilityTraits="button"
        onPress={() => (name ? onPressHandler(page) : {})}>
        <View style={[
          styles.TAB,
          {
            flexDirection: "row"
          }
        ]}>
          <Text
            {...pruTestID('tabBar')}
            style={{
              color: textColor,
              fontWeight,
              lineHeight,
              fontSize,
            }}>
            {name}
          </Text>
          {
            tabValues ? <View style={{
              backgroundColor: textColor,
              borderRadius: 7,
              justifyContent: "center",
              padding: 4,
              minWidth: 14,
              minHeight: 14,
              marginLeft: 2,
              alignItems: "center",
              alignSelf: "center",
            }}>
              <Text style={{
                fontFamily: 'Montserrat',
                fontWeight: '600',
                lineHeight: 10,
                fontSize: 10,
                color: Colors.white,
              }}>
                {tabValues(page)}
              </Text>
            </View>: null
          }
        </View>
      </TouchableOpacity>
    );
  };

  return (
    <View style={{ ...styles.TABS, ...props.containerStyle }}>
      {props.tabs.map((name, page) => {
        const isTabActive = props.activeTab === page;
        return _renderTab(name, page, isTabActive, props.goToPage);
      })}
    </View>
  );
};
