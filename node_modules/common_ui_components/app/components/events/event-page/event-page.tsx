import {
  AppRoutes,
  constants,
  EventContentType,
  getDateEndTs,
  getDateStartTs,
  getMonthEndTs,
  getMonthStartTs,
  getWeekEndTs,
  getWeekStartTs,
  GlobalHelper,
  pruTestID,
  selectEventFilterIsSet,
} from 'common_services_frontend';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Dimensions,
  FlatList,
  Keyboard,
  Platform,
  Pressable,
  Text,
  TextInput,
  TouchableOpacity,
  View,
  ViewStyle,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import DateTimePicker from '@react-native-community/datetimepicker';
import { color, palette, spacing, textStyleSet } from 'common_ui_components/app/theme';
import { SearchTextBar } from 'common_ui_components/app/components/common/search-text-bar/search-text-bar';
import { CommonTranslateKey } from 'common_ui_components/app/translation/__translation-keys';
import {
  CategoryLabel,
  ErrorHandlePageWrapper,
  modalService,
  ScrollCategoryList,
  SubmitButtonGroup,
} from 'common_ui_components/app/components';
import { EventSection } from './event-section';
import { IconFont } from 'common_ui_components/app/components/icon-font/icon-font';
import { TestID } from 'common_ui_components/app/components/test-id';
import { FilterStyles } from 'common_ui_components/app/screens/event-list-screen/styles';
import moment from 'moment';
import { Label } from 'common_ui_components/app/components/label/label';
import { useDispatch, useSelector } from 'react-redux';
import { SelectableLabelList } from 'common_ui_components/app/components/common/selectable-label-list/selectable-label-list';
import {
  getEventCategoriesAsync,
  setFilterOption,
} from 'common_services_frontend/src/redux/event/reducers';
import { useFocusEffect, useNavigation } from '@react-navigation/core';
import { throttle } from 'lodash';

export interface EventPageProps {
  tabLabel?: string;
  contentType: EventContentType;
  refresh?: boolean;
}

let _throttleFunc: any;
export const EventPage: React.FunctionComponent<EventPageProps> = (props) => {
  const { t } = useTranslation();
  const navigation = useNavigation();
  const placeholderTip = t(CommonTranslateKey.search_event_placeholder);
  const isSetFilter = useSelector(selectEventFilterIsSet);

  useFocusEffect(
    useCallback(() => {
      return () => {
        _throttleFunc = null;
      };
    }, []),
  );
  return (
    <View style={{ backgroundColor: palette.white, flex: 1 }}>
      <View
        style={{
          flexDirection: 'row',
          // height: 63,
          backgroundColor: palette.white,
          alignItems: 'center',
          marginHorizontal: spacing.spacing20,
          marginVertical: spacing.spacing16,
        }}>
        <View
          style={{
            flex: 1,
            alignItems: 'center',
            flexDirection: 'row',
          }}>
          <SearchTextBar
            placeholder={placeholderTip}
            onFocus={() => {
              navigation.navigate(AppRoutes.EVENT_SEARCH);
            }}
          />
        </View>
        <View
          style={{
            flexDirection: 'row',
            justifyContent: 'center',
            alignItems: 'center',
          }}>
          <Pressable
            accessible={false}
            onPress={() => {
              if (!_throttleFunc) {
                _throttleFunc = throttle(
                  () => {
                    modalService.open(<EventFilterView />);
                  },
                  1000,
                  { leading: true, trailing: false },
                );
              }
              _throttleFunc();
            }}>
            <IconFont
              {...pruTestID('FilterIcon')}
              name="filter"
              color={isSetFilter ? palette.cobalt : palette.grey66}
              size={24}
              style={{
                marginHorizontal: 12,
              }}
            />
          </Pressable>
        </View>
      </View>
      {ErrorHandlePageWrapper(<EventSection {...props} />)}
    </View>
  );
};

const EventFilterView: React.FunctionComponent = (props) => {
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const duration = 7;
  const firstDate = getDateStartTs();
  const secondDate = firstDate + duration * 24 * 3600000 - 1;
  const [startDateTs, setStartDateTs] = useState(0);
  const [showStart, setShowStart] = useState(false);
  const [endDateTs, setEndDateTs] = useState(0);
  const [showEnd, setShowEnd] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [expand, setExpand] = useState(false);
  const [firstIn, setFirstIn] = useState(true);
  const [categoriesBlocakHeight, setBlockHeight] = useState(0);
  const [foldStyle, setFoldStyle] = useState({ height: '100%' } as ViewStyle);

  const [pickedDateValues, setPickedDateValues] = useState(['all'] as string[]);
  const [pickedStatusValues, setPickedStatusValues] = useState([] as string[]);
  const [pickedCategoryValues, setPickedCategoryValues] = useState([] as string[]);

  const flatListRef = useRef();

  const eventCategories = useSelector((state: any) => {
    return (
      (state.event.eventCategories && state.event.eventCategories[GlobalHelper.getCurrentLang()]) ||
      ([] as CategoryLabel[])
    );
  });
  const filterOptions = useSelector((state: any) => state.event.filterOption);
  const isSetFilter = useSelector(selectEventFilterIsSet);

  const datePickerPool: CategoryLabel[] = [
    {
      label: t(CommonTranslateKey.all),
      value: 'all',
      weight: 4,
    },
    {
      label: t(CommonTranslateKey.today),
      value: 'day',
      weight: 3,
    },
    {
      label: t(CommonTranslateKey.this_week),
      value: 'week',
      weight: 2,
    },
    {
      label: t(CommonTranslateKey.this_month),
      value: 'month',
      weight: 1,
    },
  ];
  const statusPickerPool: CategoryLabel[] = [
    {
      label: t(CommonTranslateKey.upcoming),
      value: 'upcoming',
      weight: 4,
    },
    {
      label: t(CommonTranslateKey.ongoing),
      value: 'ongoing',
      weight: 3,
    },
    {
      label: t(CommonTranslateKey.expired),
      value: 'expired',
      weight: 2,
    },
  ];

  useEffect(() => {
    if (startDateTs && endDateTs) {
      if (startDateTs === getDateStartTs() && endDateTs === getDateEndTs()) {
        setPickedDateValues(['day']);
      } else if (startDateTs === getWeekStartTs() && endDateTs === getWeekEndTs()) {
        setPickedDateValues(['week']);
      } else if (startDateTs === getMonthStartTs() && endDateTs === getMonthEndTs()) {
        setPickedDateValues(['month']);
      } else {
        setPickedDateValues([]);
      }
    } else {
      if (startDateTs || endDateTs) {
        setPickedDateValues([]);
      } else {
        setPickedDateValues(['all']);
      }
    }
  }, [startDateTs, endDateTs]);

  useEffect(() => {
    dispatch(getEventCategoriesAsync());
    if (isSetFilter) {
      const pickedCategories = filterOptions.pickedCategoryValues;
      const pickedStatus = filterOptions.pickedStatusValues;
      const pickedDates = filterOptions.pickedDateValues;
      const pickedStartTs = filterOptions.startDateTs;
      const pickedEndTs = filterOptions.endDateTs;
      setStartDateTs(pickedStartTs);
      setEndDateTs(pickedEndTs);
      setPickedDateValues(pickedDates);
      if (pickedCategories && pickedCategories.length) {
        setPickedCategoryValues(pickedCategories);
        setExpand(true);
      }
      if (pickedStatus && pickedStatus.length) {
        setPickedStatusValues(pickedStatus);
      }
    }
  }, []);
  useEffect(() => {
    switch (pickedDateValues[0]) {
      case 'all':
        if (startDateTs || endDateTs) {
          setStartDateTs(0);
          setEndDateTs(0);
        }
        break;
      case 'day':
        setStartDateTs(getDateStartTs());
        setEndDateTs(getDateEndTs());
        break;
      case 'week':
        setStartDateTs(getWeekStartTs());
        setEndDateTs(getWeekEndTs());
        break;
      case 'month':
        setStartDateTs(getMonthStartTs());
        setEndDateTs(getMonthEndTs());
        break;
    }
  }, [pickedDateValues]);
  useEffect(() => {
    let timmer: number;
    if (showToast) {
      timmer = setTimeout(() => {
        setShowToast(false);
      }, 3000);
    }
    dispatch(getEventCategoriesAsync());
    return () => {
      timmer && clearTimeout(timmer);
    };
  }, [showToast]);
  useEffect(() => {
    if (!firstIn) {
      if (expand) {
        // collapse --> expand
        if (foldStyle.height === 80) {
          setFoldStyle({ height: '100%' });
        }
      } else {
        // expand --> collapse
        if (foldStyle.height === '100%') {
          setFoldStyle({ height: 80 });
          toTop();
        }
      }
    }
  }, [expand]);
  const toTop = () => {
    // use current
    flatListRef?.current?.scrollToOffset({ animated: false, offset: 0 });
  };
  return (
    <SafeAreaView edges={['bottom']} style={{ backgroundColor: palette.white }}>
      <View style={FilterStyles.WRAPPER}>
        <View style={FilterStyles.header}>
          <Text
            {...pruTestID('EventFilterHeader')}
            style={{
              ...textStyleSet.title_18_med,
              color: palette.grey33,
              flex: 1,
            }}>
            {t(CommonTranslateKey.filter)}
          </Text>
          <TouchableOpacity
            accessible={false}
            activeOpacity={0.9}
            onPress={() => {
              if (props.onClose) {
                props.onClose();
              }
            }}
            style={{}}>
            <IconFont {...pruTestID('closeIcon')} name="close" color={palette.grey85} size={24} />
          </TouchableOpacity>
        </View>
        <FlatList
          ref={flatListRef}
          data={null}
          renderItem={null}
          style={{ maxHeight: Dimensions.get('window').height - 200 }}
          showsVerticalScrollIndicator
          ListHeaderComponent={
            <View>
              <View style={[FilterStyles.subBox]}>
                <Text style={FilterStyles.title}>{t(CommonTranslateKey.event_start_date)}</Text>
                <View style={FilterStyles.lineBox}>
                  <SelectableLabelList
                    onLabelPressed={(selectedValues: string[]) => {
                      setPickedDateValues([...new Set(selectedValues)]);
                    }}
                    inputTagList={[...new Set(datePickerPool)]}
                    inputSelectedTagList={pickedDateValues}
                  />
                  {/* <View style={FilterStyles.flex1WithMargin10}></View> */}
                </View>
              </View>
              <View style={FilterStyles.subBox}>
                <View style={FilterStyles.lineBox}>
                  {/* 开始时间 */}
                  <View style={FilterStyles.flex1}>
                    <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                      <IconFont name="date" color={palette.grey66} size={24} />
                      <TextInput
                        multiline
                        showSoftInputOnFocus={false}
                        value={
                          startDateTs
                            ? moment(startDateTs).format(constants.Default_Date_Format)
                            : ''
                        }
                        onTouchEnd={() => {
                          Keyboard.dismiss();
                          setShowEnd(false);
                          if (Platform.OS === constants.Platform_IOS) {
                            setStartDateTs(startDateTs || firstDate);
                          } else {
                            setStartDateTs(startDateTs);
                          }

                          setShowStart(true);
                        }}
                        placeholder={t(CommonTranslateKey.dd_mm_yyyy_label)}
                        placeholderTextColor={palette.greyba}
                        underlineColorAndroid={color.transparent}
                        style={{
                          fontSize: 14,
                          width: 124,
                          paddingVertical: 0,
                          backgroundColor: color.transparent,
                          paddingLeft: spacing.spacing4,
                        }}
                      />
                    </View>
                    <View
                      style={{
                        height: 1,
                        marginTop: 5,
                        backgroundColor: palette.greyf4,
                      }}
                    />
                  </View>
                  <Text
                    style={{
                      width: 38.5,
                      textAlign: 'center',
                      ...textStyleSet.content_14_med_18,
                    }}>
                    {t(CommonTranslateKey.to)}
                  </Text>
                  <View style={FilterStyles.flex1}>
                    <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                      <IconFont name="date" color={palette.grey66} size={24} />
                      <TextInput
                        multiline
                        showSoftInputOnFocus={false}
                        value={
                          endDateTs ? moment(endDateTs).format(constants.Default_Date_Format) : ''
                        }
                        onTouchEnd={() => {
                          Keyboard.dismiss();
                          setShowStart(false);
                          if (Platform.OS === constants.Platform_IOS) {
                            setEndDateTs(endDateTs || secondDate);
                          } else {
                            setEndDateTs(endDateTs);
                          }
                          setShowEnd(true);
                        }}
                        placeholder={t(CommonTranslateKey.dd_mm_yyyy_label)}
                        placeholderTextColor={palette.greyba}
                        underlineColorAndroid={color.transparent}
                        style={{
                          fontSize: 14,
                          width: 124,
                          paddingVertical: 0,
                          backgroundColor: color.transparent,
                          paddingLeft: spacing.spacing4,
                        }}
                      />
                    </View>

                    <View
                      style={{
                        height: 1,
                        marginTop: 5,
                        backgroundColor: palette.greyf4,
                      }}
                    />
                  </View>
                </View>
              </View>

              {showStart && (
                <DateTimePicker
                  testID="startTimePicker"
                  value={new Date(startDateTs || firstDate)}
                  mode="date"
                  is24Hour
                  display="spinner"
                  onChange={(event, selectedDate) => {
                    setShowStart(Platform.OS === constants.Platform_IOS);
                    selectedDate && setStartDateTs(getDateStartTs(selectedDate?.getTime()));
                  }}
                />
              )}
              {showEnd && (
                <DateTimePicker
                  testID="endTimePicker"
                  value={new Date(endDateTs || secondDate)}
                  mode="date"
                  is24Hour
                  display="spinner"
                  onChange={(event, selectedDate) => {
                    setShowEnd(Platform.OS === constants.Platform_IOS);
                    selectedDate && setEndDateTs(getDateEndTs(selectedDate?.getTime()));
                  }}
                />
              )}
              <View style={[FilterStyles.subBox, { marginTop: 16 }]}>
                <Text style={FilterStyles.title}>{t(CommonTranslateKey.event_status)}</Text>
                <View style={FilterStyles.lineBox}>
                  <SelectableLabelList
                    supportMulti
                    onLabelPressed={(selectedValues: string[]) => {
                      setPickedStatusValues([...new Set(selectedValues)]);
                    }}
                    inputTagList={[...new Set(statusPickerPool)]}
                    inputSelectedTagList={pickedStatusValues}
                  />
                </View>
              </View>
              <View style={[FilterStyles.subBox, { paddingHorizontal: 0 }]}>
                <Pressable
                  accessible={false}
                  onPress={() => {
                    setExpand(!expand);
                  }}
                  style={{
                    flexDirection: 'row',
                    alignItems: 'center',
                    paddingVertical: 10,
                    paddingHorizontal: 14,
                  }}>
                  <View style={{ flex: 1 }}>
                    <Text style={[FilterStyles.title, { textAlign: 'left' }]}>
                      {t(CommonTranslateKey.category)}
                    </Text>
                  </View>
                  {categoriesBlocakHeight > 80 && (
                    <View
                      accessible={false}
                      style={{
                        width: 50,
                        flexDirection: 'row-reverse',
                      }}>
                      {expand ? (
                        <IconFont
                          {...pruTestID('CollapseIcon')}
                          style={{ transform: [{ rotateX: '180deg' }] }}
                          name="arrow_down"
                          size={12}
                          color={palette.grey85}
                        />
                      ) : (
                        <IconFont
                          {...pruTestID('ExpandIcon')}
                          name="arrow_down"
                          size={12}
                          color={palette.grey85}
                        />
                      )}
                    </View>
                  )}
                </Pressable>

                <View
                  style={[FilterStyles.lineBox, { paddingHorizontal: 14, marginTop: 0 }]}
                  onLayout={(event) => {
                    if (foldStyle.height === '100%') {
                      setBlockHeight(event.nativeEvent.layout.height);
                    }
                    if (event.nativeEvent.layout.height > 80) {
                      if (foldStyle.height === '100%' && firstIn) {
                        setFirstIn(false);
                        if (!pickedCategoryValues?.length) {
                          setFoldStyle({ height: 80 });
                        }
                      }
                    }
                  }}>
                  <View style={[foldStyle, { overflow: 'hidden' }]}>
                    <SelectableLabelList
                      supportMulti
                      onLabelPressed={(selectedValues: string[]) => {
                        setPickedCategoryValues([...new Set(selectedValues)]);
                      }}
                      inputTagList={[...new Set(eventCategories)]}
                      inputSelectedTagList={pickedCategoryValues}
                    />
                  </View>
                </View>
              </View>
            </View>
          }
        />
        <SubmitButtonGroup
          style={{
            paddingHorizontal: 20,
          }}
          cancelButtonText={t(CommonTranslateKey.reset)}
          onCancel={() => {
            setStartDateTs(0);
            setEndDateTs(0);
            setShowStart(false);
            setShowEnd(false);
            setPickedDateValues(['all']);
            setPickedStatusValues([]);
            setPickedCategoryValues([]);
          }}
          onConfirm={() => {
            if (endDateTs && startDateTs && endDateTs < startDateTs) {
              setShowToast(true);
            } else {
              setShowToast(false);
              dispatch(
                setFilterOption({
                  pickedDateValues,
                  pickedStatusValues,
                  pickedCategoryValues,
                  startDateTs,
                  endDateTs,
                  filterClickedCounts: (filterOptions.filterClickedCounts || 0) + 1,
                }),
              );
              if (props.onClose) {
                props.onClose();
              }
            }
          }}
        />
      </View>
      {showToast ? (
        <View
          style={{
            width: Dimensions.get('window').width,
            alignItems: 'center',
          }}>
          <View
            style={{
              position: 'absolute',
              justifyContent: 'center',
              top: -180,
              height: 40,
              opacity: 0.8,
              backgroundColor: palette.black,
              paddingHorizontal: 30,
              borderRadius: 20,
            }}>
            <Text
              {...pruTestID('EventFilterToast')}
              testID={TestID.DialogToast}
              style={{
                color: palette.white,
              }}>
              {t(CommonTranslateKey.the_end_time_must_be_later_than_the_start_time)}
            </Text>
          </View>
        </View>
      ) : null}
    </SafeAreaView>
  );
};
