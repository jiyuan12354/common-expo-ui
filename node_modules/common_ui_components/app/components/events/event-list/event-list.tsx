import React, { FunctionComponent as Component } from 'react';
import { View, FlatList, Text, RefreshControl } from 'react-native';
import { eventListStyles as styles } from './event-list.styles';
import { EventItem } from 'common_ui_components/app/components/events/event-item/event-item';
import { ItemSeparatorWrap } from 'common_ui_components/app/components/common/item-separator/item-separator';
import { TestID } from 'common_ui_components/app/components/test-id';
import { color, palette, spacing, textStyleSet } from 'common_ui_components/app/theme';
import { Event, selectEventsLoaded } from 'common_services_frontend';
import { ErrorPage } from 'common_ui_components/app/components/error-page/error-page';
import { useSelector } from 'react-redux';

export interface EventListProps {
  data: Event[];
  onItemPressed?: (item: Event) => void;
  highlightText?: string;
}

export const EventList: Component<EventListProps> = (props) => {
  const _keyExtractor = (item, index) => index.toString();

  const _onPressItem = (item) => {
    if (props.onItemPressed !== undefined) {
      props.onItemPressed(item);
    }
  };

  const ItemSeparator = ItemSeparatorWrap({
    width: '100%',
    height: spacing.spacing12,
    backgroundColor: color.transparent,
  });

  const _renderItem = ({ item, index }) => {
    return (
      <EventItem
        accessible={false}
        key={index}
        data={{ ...item, highlight_text: props.highlightText }}
        onPress={() => _onPressItem(item)}
      />
    );
  };
  return (
    <View testID={TestID.EventList} accessibilityLabel={TestID.EventList} style={[styles.WRAPPER]}>
      {props.data.length ? (
        <FlatList
          data={props.data}
          ItemSeparatorComponent={ItemSeparator}
          keyExtractor={_keyExtractor}
          renderItem={_renderItem}
          ListFooterComponent={
            <View
              style={{
                justifyContent: 'center',
                alignItems: 'center',
                paddingVertical: spacing.spacing10,
                backgroundColor: color.transparent,
                height: 200,
              }}>
              <Text
                style={{
                  ...textStyleSet.content_14_reg,
                  color: palette.grey85,
                }}>
                {/* {t(RecruitmentTranslateKey.no_more)} */}
              </Text>
            </View>
          }
        />
      ) : (
        <ErrorPage
          style={{
            marginTop: 93,
          }}
          icon="no_content"
          textKey="no_event_matched"
        />
      )}
    </View>
  );
};
