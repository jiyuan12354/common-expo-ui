import React, { FunctionComponent as Component } from 'react';
import { View, TouchableOpacity, ViewStyle, Text, TextStyle } from 'react-native';
import { constants, Event, pruTestID } from 'common_services_frontend';
import { ExternalAvatar } from '../../recruitment/avatar/avatar';
import { HighlightText as PruHighLightText } from '../../common/highlight-text/highlight-text';
import { eventItemStyles as styles } from './event-item.styles';
import { color, palette, textStyleSet } from '../../../theme';
import { Icon } from '../../base/icon/icon';
import { IconFont } from '../../icon-font/icon-font';
import moment from 'moment';

export interface EventItemProps {
  data: Event;
  onPress?: Function;
  style?: ViewStyle;
}

const TEXT__STYLE__RESOURCE__TAG: TextStyle = {
  ...textStyleSet.info_12_med,
  color: palette.cyan,
  lineHeight: 14.5,
};

export const EventItem: Component<EventItemProps> = (props) => {
  const expired = props.data.endTime < new Date().getTime();
  return (
    <View {...pruTestID('EventItem')}>
      <TouchableOpacity
        accessible={false}
        activeOpacity={0.9}
        onPress={() => {
          if (props.onPress) {
            props.onPress(props.data);
          }
        }}
        style={[styles.WRAPPER, props.style]}>
        <View
          style={[
            {
              height: '100%',
              justifyContent: 'flex-start',
              alignItems: 'flex-start',
            },
            expired
              ? {
                  opacity: 0.4,
                  backgroundColor: palette.white,
                }
              : {},
          ]}>
          {props.data.portalLink ? (
            <ExternalAvatar
              uri={props.data.portalLink}
              style={{
                width: 100,
                height: 100,
                borderRadius: 8,
              }}
            />
          ) : (
            <Icon
              icon="no_content"
              style={{
                width: 100,
                height: 100,
                borderRadius: 8,
              }}
            />
          )}
        </View>
        <View
          style={[
            styles.Content,
            expired
              ? {
                  opacity: 0.4,
                  backgroundColor: palette.white,
                }
              : {},
          ]}>
          {(() => {
            const { title } = props.data;
            const searchKey = props.data.highlight_text;
            if (!searchKey || !title.toLocaleLowerCase().includes(searchKey.toLocaleLowerCase())) {
              return (
                <Text
                  {...pruTestID('EventTitle')}
                  ellipsizeMode="tail"
                  style={[styles.TitleText]}>
                  {title}
                </Text>
              );
            }
            return (
              <PruHighLightText highLightText={searchKey} textStyle={styles.TitleText}>
                {title}
              </PruHighLightText>
            );
          })()}
          <View>
            {props.data.venue ? (
              <View
                style={{
                  flexDirection: 'row',
                  paddingVertical: 4,
                }}>
                <IconFont name="info_locate" size={18} color={palette.grey85} />
                <Text
                {...pruTestID('EventVenue')}
                  style={{
                    ...textStyleSet.content_14_med,
                    color: palette.grey85,
                    marginLeft: 8,
                    flex: 1,
                  }}>
                  {props.data.venue}
                </Text>
              </View>
            ) : (
              <View style={{ height: 4 }} />
            )}
            <View
              style={{
                marginTop: 4,
                flexDirection: 'row',
              }}>
              <IconFont name="info_time" size={18} color={palette.grey85} />
              <Text
              {...pruTestID('EventTime')}
                style={{
                  ...textStyleSet.content_14_med,
                  color: palette.grey85,
                  marginLeft: 8,
                }}>
                {moment(props.data.startTime).format(constants.Default_Date_Format) ===
                moment(props.data.endTime).format(constants.Default_Date_Format)
                  ? `${moment(props.data.startTime).format(
                      constants.Default_Date_Format + ' HH:mm',
                    )}-${moment(props.data.endTime).format('HH:mm')}`
                  : `${moment(props.data.startTime).format(constants.Default_Date_Format)}-${moment(
                      props.data.endTime,
                    ).format(constants.Default_Date_Format)}`}
              </Text>
            </View>
          </View>
          <View
            style={{
              marginTop: 8,
              flexWrap: 'wrap',
              flexDirection: 'row',
              flex: 1,
            }}>
            {props.data.tags.map((tag) => {
              const searchKey = props.data.highlight_text;
              if (!searchKey || !tag.toLocaleLowerCase().includes(searchKey.toLocaleLowerCase())) {
                return (
                  <View
                    style={{
                      paddingRight: 10,
                      paddingTop: 6,
                    }}>
                    <View
                      style={{
                        backgroundColor: palette.cyanLight,
                        borderRadius: 10,
                        paddingHorizontal: 7,
                        paddingVertical: 2,
                      }}>
                      <Text {...pruTestID('EventTag')} numberOfLines={1} style={TEXT__STYLE__RESOURCE__TAG}>
                        {tag}
                      </Text>
                    </View>
                  </View>
                );
              }
              return (
                <View
                  style={{
                    paddingRight: 10,
                    paddingTop: 6,
                  }}>
                  <View
                    style={{
                      backgroundColor: palette.cobaltLight,
                      borderRadius: 10,
                      paddingHorizontal: 7,
                      paddingVertical: 2,
                    }}>
                    <PruHighLightText
                      textStyle={TEXT__STYLE__RESOURCE__TAG}
                      style={{
                        flexWrap: 'nowrap',
                      }}
                      highLightText={searchKey}>
                      {tag}
                    </PruHighLightText>
                  </View>
                </View>
              );
            })}
          </View>
        </View>
      </TouchableOpacity>
    </View>
  );
};
