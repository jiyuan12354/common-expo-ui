import * as React from 'react';
import { View, ImageStyle, FlexAlignType } from 'react-native';
import { Text } from '../text/text';
import { IconFont } from '../icon-font/icon-font';
import { labelStyles as styles } from './label.styles';
import { color } from '../../theme';
import { IconTypes } from '../icon-font/fonts/__icontype';

export interface LabelStyle {
  fontColor?: string;
  iconStyle?: ImageStyle;
  // 注意：如果label的长度是根据text自适应的，也就是没有设置width的话， flex不要设置为1
  flex?: number;
  iconPosition?: string;
  backgroundColor?: string;
  height?: number;
  width?: number;
  fontSize?: number;
  fontWeight?: string;
  flexDirection?: 'row' | 'column';
  borderWidth?: number;
  borderColor?: string;
  borderRadius?: number;
  padding?: number;
  margin?: number;
  bottom?: number;
  justifyContent?:
    | 'center'
    | 'flex-start'
    | 'flex-end'
    | 'space-between'
    | 'space-around'
    | 'space-evenly';
  alignItems?: FlexAlignType;
}
export interface LabelProps {
  text?: string;
  iconType?: IconTypes;
  style?: LabelStyle;
}
export const Label: React.FunctionComponent<LabelProps> = (props) => {
  const {
    fontColor,
    backgroundColor,
    height,
    width,
    fontSize,
    fontWeight,
    flexDirection,
    borderColor,
    borderWidth,
    borderRadius,
    padding,
    margin,
    justifyContent,
  } = props.style;
  // if (!fontSize) {
  //   fontSize = height / 2;
  // }
  const deleteNullKey = (obj: { [key: string]: number | string }) => {
    const temp = obj;
    Object.keys(temp).forEach(function (key) {
      if (temp[key] === '' || temp[key] === undefined || temp[key] === null) {
        delete temp[key];
      }
    });
    return temp;
  };
  const viewStyle = deleteNullKey({
    backgroundColor,
    height,
    width,
    flexDirection,
    // If borderColor is not set and the background color is not set, set borderColor to the font color
    // 如果没有设置borderColor,且背景颜色也没有设置，则将borderColor设置为字体颜色
    borderColor: borderColor || (props.style.backgroundColor ? 'none' : fontColor || color.text),
    borderRadius,
    borderWidth,
    paddingLeft: padding,
    paddingRight: padding,
    marginLeft: margin,
    marginRight: margin,
    // Label should be centered by default when there is no icon set
    // Label没有图标时应该默认水平居中
    justifyContent: justifyContent || (props.iconType ? 'space-between' : 'center'),
  });

  const textStyle = deleteNullKey({
    color: fontColor,
    fontSize,
    fontWeight,
  });
  const flexStyle = deleteNullKey({
    flex: props.style.flex,
  });
  return (
    <View style={{ ...styles.WRAPPER, ...viewStyle }}>
      <View style={{ ...flexStyle }}>
        <Text style={{ ...styles.TEXT, ...textStyle }}>{props.text}</Text>
      </View>
      {props.iconType ? (
        <View
          style={{
            ...props.style.iconStyle,
          }}>
          <IconFont
            name={props.iconType}
            color={props.style.fontColor}
            size={props.style.fontSize}
          />
        </View>
      ) : (
        <></>
      )}
    </View>
  );
};
