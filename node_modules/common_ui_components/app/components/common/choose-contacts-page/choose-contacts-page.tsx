import { useContacts, pySegSort } from 'common_services_frontend';
import {
  textStyleSet,
  spacing,
  CommonTranslateKey,
  PruIconFont,
  PruErrorPage,
} from 'common_ui_components';
import { PruPalette, PruColor } from 'common_ui_components';
import React, { useState, useEffect, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import {
  ViewStyle,
  TextStyle,
  Dimensions,
  View,
  Text,
  Keyboard,
  SectionListData,
} from 'react-native';
import { Contact } from 'react-native-contacts';
import {
  AlphabetSectionList,
  PruActivityIndicator,
  PruNormalButton,
} from 'common_ui_components/app/components';
import sectionListGetItemLayout from 'react-native-section-list-get-item-layout';
import { ContactImportItem } from '../contact-import-item/contact-import-item';
import { useFocusEffect } from '@react-navigation/core';
import { useDispatch } from 'react-redux';
import { RecruitContact } from 'common_services_frontend/src/model/contacts';
import { ItemSeparatorWrap } from 'common_ui_components/app/components/common/item-separator/item-separator';
import { pruTestID } from 'common_services_frontend';
import {
  ACTIVE_SUBMIT_BUTTON,
  INACTIVE_SUBMIT_BUTTON,
  SUBMIT_BUTTON,
} from 'common_ui_components/app/theme/commonStyles';
import { palette } from 'common_ui_components/app/theme';

const CONTAINER: ViewStyle = {
  backgroundColor: PruColor.background,
  flex: 1,
  // width: Dimensions.get('window').width - 30,
};

const TEXT: TextStyle = {
  fontSize: 14,
  color: PruColor.primary,
};
export interface ISection<T> {
  title: string | null;
  data: Array<T>;
}

export interface ChooseContactsPageProps {
  /**
   * An optional style override useful for padding & margin.
   */
  importedList?: string[];
  searchValue?: string;
  onCheckNoPermission?: Function;
  onSubmit?: Function;
  style?: ViewStyle;
  supportMutiple?: boolean;
}

const regex = /[-()\s]*/g;
const fullName = (contact: Contact) => {
  if (contact.displayName) {
    return contact.displayName;
  } else {
    let displayName = '';
    let nameInfos: string[] = [];
    if (contact.givenName) {
      nameInfos.push(contact.givenName);
    }
    if (contact.familyName) {
      nameInfos.push(contact.familyName);
    }
    return nameInfos.join(' ') || '#Default';
  }
};

export const convertContactToSectionItem = (
  contact: Contact,
  uniqueContactKeys: any[],
): RecruitContact => {
  const { emailAddresses, phoneNumbers, recordID, thumbnailPath } = contact;
  let name = fullName(contact);
  return {
    name: name,
    key: name + recordID,
    userPhones: phoneNumbers
      .filter((item) => {
        item.number = item.number.replace(regex, '');
        const key = name + item.number;
        if (uniqueContactKeys.includes(key)) {
          return false;
        } else {
          uniqueContactKeys.push(key);
          return true;
        }
      })
      .map((item) => {
        return item.number;
      }),
    email: emailAddresses[0]?.email,
    thumbnailPath: thumbnailPath,
  };
};
/**
 * Describe your component here
 */
const sectionItemHeight = 80;
const sectionHeaderHeight = 30;
const initialNumToRender = 20;
export function ChooseContactsPage(props: ChooseContactsPageProps) {
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const { style, importedList = [] } = props;
  const [sectionsToRender, setSectionsToRender] = useState([] as SectionListData<RecruitContact>[]);
  const { canUseContacts, contacts } = useContacts();
  const [selectedList, setSelectedList] = useState([] as RecruitContact[]);
  const [allNotImportedList, setAllList] = useState([] as RecruitContact[]);
  const [showButton, setShowButton] = useState(true);
  const [loading, setLoading] = useState(true);
  const [activeImport, setActiveImport] = useState(false);
  const [filteredContacts, setFilteredContacts] = useState<Contact[]>(contacts);
  const ItemSeparator = ItemSeparatorWrap({
    width: '100%',
  });
  useEffect(() => {
    setLoading(false);
  }, [contacts]);

  const _keyboardDidShow = () => setShowButton(false);
  const _keyboardDidHide = () => setShowButton(true);
  useFocusEffect(
    useCallback(() => {
      setSelectedList([]);
      Keyboard.addListener('keyboardDidShow', _keyboardDidShow);
      Keyboard.addListener('keyboardDidHide', _keyboardDidHide);
      // cleanup function
      return () => {
        Keyboard.removeListener('keyboardDidShow', _keyboardDidShow);
        Keyboard.removeListener('keyboardDidHide', _keyboardDidHide);
      };
    }, []),
  );

  React.useEffect(() => {}, []);
  useEffect(() => {
    if (props.searchValue) {
      setFilteredContacts(
        contacts.filter((item: Contact) =>
          fullName(item).toLocaleLowerCase().includes(props.searchValue?.toLocaleLowerCase()),
        ),
      );
    } else {
      setFilteredContacts(contacts);
    }
  }, [contacts, props.searchValue]);
  useEffect(() => {
    try {
      const uniqueContactKeys: any[] = [];
      const allDisplayContacts = filteredContacts
        .filter((contact: Contact) => Boolean(fullName(contact)))
        .map((currentContact: Contact) => {
          return convertContactToSectionItem(currentContact, uniqueContactKeys);
        });
      let sectionData = pySegSort(allDisplayContacts, 'name', 'title');
      let allPhoneContacts = [] as RecruitContact[];
      let sections = [];
      for (let index = 1; index <= sectionData.length; index++) {
        if (index === sectionData.length) {
          index = 0;
        }
        const section: ISection<RecruitContact> = sectionData[index];
        let tmpSectionItem: ISection<RecruitContact> = {
          title: section.title,
          data: [] as RecruitContact[],
        };
        if (section.data && section.data.length > 0) {
          tmpSectionItem.title = section.title;
          for (let k = 0; k < section.data.length; k++) {
            const contact = section.data[k];
            if (contact.userPhones && contact.userPhones.length) {
              let userPhones = [...new Set(contact.userPhones)];
              for (let j = 0; j < userPhones.length; j++) {
                const phone = userPhones[j];
                const tmpContactPhone = {
                  ...contact,
                  currentPhone: phone,
                };
                tmpSectionItem.data.push(tmpContactPhone);
                if (
                  !props.importedList ||
                  !props.importedList.includes(tmpContactPhone.currentPhone)
                ) {
                  allPhoneContacts.push(tmpContactPhone);
                }
              }
            }
          }
        }
        if (tmpSectionItem.data.length) {
          sections.push(tmpSectionItem);
        }
        if (index === 0) {
          break;
        }
      }
      setSectionsToRender(sections);
      setAllList(allPhoneContacts);
    } catch (error) {}
  }, [filteredContacts]);

  useEffect(() => {
    if (!canUseContacts && props.onCheckNoPermission) {
      props.onCheckNoPermission();
    }
  }, [canUseContacts]);

  useEffect(() => {
    setActiveImport(Boolean(selectedList.length));
  }, [selectedList]);

  return (
    <View style={[CONTAINER, style]}>
      {loading ? <PruActivityIndicator animating accessibilityStates="" /> : null}
      {sectionsToRender && sectionsToRender.length ? (
        <>
          <AlphabetSectionList
            sectionHeight={sectionItemHeight}
            sections={sectionsToRender}
            keyExtractor={(item: RecruitContact) => item.key + item.currentPhone}
            keyboardShouldPersistTaps="always"
            bounces={false}
            getItemLayout={
              sectionListGetItemLayout({
                // The height of the row with rowData at the given sectionIndex and rowIndex
                getItemHeight: () => sectionItemHeight,

                // These four properties are optional
                getSeparatorHeight: () => 1, // The height of your separators
                getSectionHeaderHeight: () => sectionHeaderHeight, // The height of your section headers
                getSectionFooterHeight: () => 0, // The height of your section footers
                listHeaderHeight: 0, // The height of your list header
              }) as (
                data: SectionListData<RecruitContact, any>[] | null,
                index: number,
              ) => { length: number; offset: number; index: number }
            }
            initialNumToRender={initialNumToRender}
            ItemSeparatorComponent={ItemSeparator}
            renderItem={({ item }) => {
              return (
                <View
                  style={{
                    height: sectionItemHeight,
                    backgroundColor: palette.white,
                  }}>
                  <ContactImportItem
                    key={item.key + item.currentPhone}
                    highLightText={props.searchValue}
                    imported={importedList.includes(item.currentPhone.replace(regex, ''))}
                    refreshSelectTo={selectedList.includes(item)}
                    onPressed={() => {
                      if (!importedList.includes(item.currentPhone.replace(regex, ''))) {
                        if (props.supportMutiple) {
                          if (
                            selectedList.filter(
                              (listItem) =>
                                listItem.key === item.key &&
                                listItem.currentPhone === item.currentPhone,
                            ).length
                          ) {
                            const currentList = selectedList.filter(
                              (listItem) =>
                                listItem.key !== item.key ||
                                listItem.currentPhone !== item.currentPhone,
                            );
                            setSelectedList(currentList);
                          } else {
                            setSelectedList([...selectedList, item]);
                          }
                        } else {
                          if (
                            !selectedList.length ||
                            selectedList[0].currentPhone !== item.currentPhone
                          ) {
                            setSelectedList([item]);
                          } else {
                            setSelectedList([]);
                          }
                        }
                      }
                    }}
                    data={item}
                  />
                </View>
              );
            }}
            renderSectionHeader={({ section: { title } }) => (
              <View
                style={{
                  height: 30,
                  flex: 1,
                  backgroundColor: PruPalette.greyf4,
                  justifyContent: 'center',
                }}>
                {title ? (
                  <Text
                    style={{
                      ...textStyleSet.content_14_med,
                      paddingHorizontal: spacing.spacing20,
                      lineHeight: spacing.spacing22,
                      color: PruPalette.grey66,
                    }}>
                    {title.toLocaleUpperCase()}
                  </Text>
                ) : null}
              </View>
            )}
          />
          <View
            style={{
              height: 1,
              width: Dimensions.get('window').width,
              shadowOpacity: 0.1,
            }}></View>
          <>
            {showButton ? (
              <View
                {...pruTestID('ImportButton')}
                style={{
                  width: Dimensions.get('screen').width,
                  paddingHorizontal: spacing.spacing20,
                  backgroundColor: PruColor.transparent,
                  position: 'absolute',
                  bottom: 20,
                }}>
                <PruNormalButton
                  disabled={!Boolean(selectedList.length)}
                  text={t(CommonTranslateKey.import)}
                  onPress={() => {
                    props.onSubmit(selectedList);
                  }}
                  textStyle={{
                    color: Boolean(selectedList.length) ? PruPalette.white : PruPalette.greycf,
                    ...textStyleSet.title_18_med,
                  }}
                  style={{
                    ...SUBMIT_BUTTON,
                    ...(Boolean(selectedList.length)
                      ? ACTIVE_SUBMIT_BUTTON
                      : INACTIVE_SUBMIT_BUTTON),
                  }}
                />
              </View>
            ) : null}
          </>
        </>
      ) : (
        <PruErrorPage icon="no_content" textKey={t(CommonTranslateKey.no_results_matched)} />
      )}
    </View>
  );
}
