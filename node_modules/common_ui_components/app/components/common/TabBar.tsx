import React, { FC } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, StyleProp, ViewStyle } from 'react-native';
import {
  createMaterialTopTabNavigator,
  MaterialTopTabBarProps,
} from '@react-navigation/material-top-tabs';
import Animated from 'react-native-reanimated';
import { Colors } from '../../style';
import { palette } from '../../theme';

const Tab = createMaterialTopTabNavigator();

type NavigatorProps = React.ComponentProps<typeof Tab.Navigator> & {
  topContainer?: JSX.Element;
  bottomContainer?: JSX.Element;
  style?: StyleProp<ViewStyle>;
  baseStyle?: StyleProp<ViewStyle>;
  barStyle?: StyleProp<ViewStyle>;
  tabBarBadge?: any;
};

type TabBarProps = React.ComponentProps<typeof Tab.Navigator> &
  MaterialTopTabBarProps & {
    topContainer?: JSX.Element;
    bottomContainer?: JSX.Element;
    style?: StyleProp<ViewStyle>;
    baseStyle?: StyleProp<ViewStyle>;
    barStyle?: StyleProp<ViewStyle>;
    tabBarBadge?: any;
  };

const TabNavigator: FC<NavigatorProps> = ({ ...props }) => {
  return (
    <Tab.Navigator
      tabBarOptions={{
        activeTintColor: Colors.primaryRed,
        inactiveTintColor: Colors.gray,
        style: {
          backgroundColor: Colors.white,
        },
        labelStyle: {
          textAlign: 'center',
        },
        indicatorStyle: {
          borderBottomColor: Colors.primaryRed,
          borderBottomWidth: 2,
        },
      }}
      {...props}>
      {props.children}
    </Tab.Navigator>
  );
};

let preOffSet = 0;
let barWidth = 0;

const TabBar: FC<TabBarProps> = ({
  tabBarBadge,
  baseStyle,
  barStyle,
  topContainer,
  bottomContainer,
  state,
  descriptors,
  navigation,
  position,
  ...rest
}) => {
  const offSet = (barWidth / state.routes.length) * state.index;
  const indicatorWith = 100 / state.routes.length;
  const inputRange = state.routes.map((_, i) => i);
  const opacity = Animated.interpolate(position, {
    inputRange,
    outputRange: inputRange.map((i) => {
      return i === state.index ? offSet : preOffSet;
    }),
  });
  preOffSet = offSet;
  return (
    <View
      style={[styles.container, baseStyle]}
      onLayout={(event) => {
        const { width } = event.nativeEvent.layout;
        barWidth = width;
      }}>
      {topContainer}
      <View style={barStyle}>
        <View style={[{ flexDirection: 'row', alignItems: 'center' }]}>
          {state.routes.map((route, index) => {
            const { options } = descriptors[route.key];
            const label =
              options.tabBarLabel !== undefined
                ? options.tabBarLabel
                : options.title !== undefined
                ? options.title
                : route.name;
            const isFocused = state.index === index;

            const onPress = () => {
              const event = navigation.emit({
                type: 'tabPress',
                target: route.key,
                canPreventDefault: true,
              });

              if (!isFocused && !event.defaultPrevented) {
                navigation.navigate(route.name);
              }
            };

            const onLongPress = () => {
              navigation.emit({
                type: 'tabLongPress',
                target: route.key,
              });
            };

            const color = isFocused ? palette.red : palette.grey85;
            return (
              <TouchableOpacity
                accessibilityRole="button"
                accessibilityLabel={options.tabBarAccessibilityLabel}
                testID={options.tabBarTestID}
                onPress={onPress}
                onLongPress={onLongPress}
                style={[{ flex: 1 }, styles.tabItem]}>
                <View style={[{ flexDirection: 'row' }]}>
                  <Text style={[{ color }, styles.tabLabel, { ...rest }.labelStyle]}>{label}</Text>
                  {tabBarBadge && tabBarBadge[route.name] !== undefined && (
                    <View
                      style={[
                        {
                          borderRadius: 50,
                          paddingStart: 10,
                          paddingEnd: 10,
                          backgroundColor: color,
                          marginTop: 12,
                          marginBottom: 12,
                          marginStart: 5,
                          justifyContent: 'center',
                        },
                      ]}>
                      <Text style={[{ color: '#ffffff' }]}>{tabBarBadge[route.name]}</Text>
                    </View>
                  )}
                </View>
              </TouchableOpacity>
            );
          })}
        </View>
        <Animated.View
          style={[
            styles.indicator,
            {
              transform: [{ translateX: opacity }],
              width: `${indicatorWith}%`,
            },
          ]}
        />
      </View>
      {bottomContainer}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    width: '100%',
    backgroundColor: Colors.white,
  },
  indicator: {
    backgroundColor: Colors.primaryRed,
    height: 3,
  },
  tabItem: {
    alignItems: 'center',
  },
  tabLabel: {
    fontSize: 12,
    fontWeight: '500',
    fontStyle: 'normal',
    lineHeight: 20,
  },
});

export { TabNavigator, Tab, TabBar };
