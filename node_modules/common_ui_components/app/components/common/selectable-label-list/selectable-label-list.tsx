import { CategoryLabelItem } from 'common_ui_components/app/components/recruitment/category-label-item/category-label-item';
import { CategoryLabel } from 'common_ui_components/app/components/recruitment/scroll-category-list/scroll-category-list';
import * as React from 'react';
import { useTranslation } from 'react-i18next';
import { FlatList, TextStyle, View, ViewStyle } from 'react-native';
import { color, spacing, typography } from '../../../theme';
import { Text } from '../../text/text';

const CONTAINER: ViewStyle = {
  flexDirection: 'row',
  flexWrap: 'wrap',
};

export interface SelectableLabelListProps {
  inputTagList: CategoryLabel[];
  inputSelectedTagList?: string[];
  onLabelPressed?: Function;
  supportMulti?: boolean;
  style?: ViewStyle;
}

/**
 * Describe your component here
 */
export function SelectableLabelList(props: SelectableLabelListProps) {
  const { style, inputTagList, inputSelectedTagList, onLabelPressed, supportMulti } = props;
  const { t } = useTranslation();

  const [selectedTagValueList, setSelectedTagValueList] = React.useState(
    inputSelectedTagList || [],
  );
  React.useEffect(() => {
    setSelectedTagValueList(inputSelectedTagList || []);
  }, [inputSelectedTagList]);
  const _keyExtractor = (item, index) => item.label + index.toString();
  const renderItem = ({ item, index }) => {
    return (
      <CategoryLabelItem
        model="Medium"
        key={index}
        onPress={(tag: CategoryLabel) => {
          let tags: string[] = [];
          if (supportMulti) {
            const index = selectedTagValueList.indexOf(tag.value);
            if (index >= 0) {
              if (selectedTagValueList.length > 1) {
                tags = [...selectedTagValueList];
                tags.splice(index, 1);
              }
            } else {
              tags = [...selectedTagValueList, tag.value];
            }
          } else {
            tags = [tag.value];
          }
          setSelectedTagValueList(tags);
          if (props.onLabelPressed) {
            props.onLabelPressed(tags);
          }
        }}
        selected={selectedTagValueList?.includes(item.value)}
        key={index}
        tagLabel={item}
      />
    );
  };
  return (
    <View style={[CONTAINER, style]}>
      {inputTagList.map((item, index) => {
        return renderItem({ item, index });
      })}
    </View>
  );
}
