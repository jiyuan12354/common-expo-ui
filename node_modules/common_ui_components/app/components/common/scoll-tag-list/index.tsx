import React, { FunctionComponent as Component, useState, useRef } from 'react';
import { ScrollView, TouchableOpacity, Text, StyleProp, ViewStyle, TextStyle } from 'react-native';
import { useTranslation } from 'react-i18next';
import { pruTestID } from 'common_services_frontend';
import { styles } from './styles';

export interface ScrollCategoryListProps {
    tags: Record<string, unknown>;
    inputSelectedTagList?: string[];
    onSelected?: Function;
    style?: StyleProp<ViewStyle>;
    defaultSelected?: string
    mutiLine?: boolean
    itemStyle?: StyleProp<ViewStyle>,
    itemSelectedStyle?: StyleProp<ViewStyle>,
    itemTextStyle?: StyleProp<TextStyle>,
    itemTextSelectedStyle?: StyleProp<TextStyle>,
}

export const ScollTagList: Component<ScrollCategoryListProps> = (props) => {
    const scrollViewRef = useRef();
    const { 
        onSelected, 
        needScrollToEnd, 
        tags = [], 
        style, 
        defaultSelected, 
        itemStyle, 
        itemSelectedStyle, 
        itemTextStyle, 
        itemTextSelectedStyle, 
        mutiLine=false 
    } = props;
    const [selectedKey, setSelectedKey] = useState(defaultSelected);

    const scrollToEnd = () => {
        if (needScrollToEnd) {
            scrollViewRef.current.scrollToEnd({ animated: true });
        }
    }

    return (
        <ScrollView
            ref={scrollViewRef}
            horizontal 
            showsHorizontalScrollIndicator={false} 
            onContentSizeChange={scrollToEnd}
            scrollEnabled={!mutiLine}
            contentContainerStyle={[mutiLine && styles.mutiLineWrapper, style ]}
        >
            {
                tags.map((option, index) => {
                    const isSelected = selectedKey === option.value;
                    const isLastItem = ( tags.length - 1 ) === index;
                    return (
                        <TouchableOpacity
                            accessible={false}
                            style={[styles.item, isSelected && styles.itemSelected, isLastItem && { marginRight: 0 }, mutiLine && { marginTop: 8 }, itemStyle, isSelected && itemSelectedStyle]}
                            activeOpacity={0.9}
                            onPress={() => {
                                onSelected(option);
                                setSelectedKey(option.value);
                            }}
                        >
                            <Text {...pruTestID(option.value)} style={[styles.itemText, isSelected && styles.itemTextSelected, itemTextStyle, isSelected && itemTextSelectedStyle]}>{option.label}</Text>

                        </TouchableOpacity>
                    )
                })
            }
        </ScrollView>
    );
};
