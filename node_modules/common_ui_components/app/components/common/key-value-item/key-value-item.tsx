import React, { FunctionComponent as Component } from 'react';
import { Dimensions, Text, TextStyle, TouchableOpacity, View, ViewStyle } from 'react-native';
import { palette, spacing, textStyleSet } from '../../../theme';
import { pruTestID } from 'common_services_frontend';
import { useTranslation } from 'react-i18next';

export interface KeyValueItemProps {
  title: string;
  value: string;
  emptyValueLabel?: string;
  titleCursor?: any;
  valueCursor?: any;
  onPressLabel?: Function;
  onPressValue?: Function;
  style?: ViewStyle;
  titleStyle?: TextStyle;
  itemStyle?: TextStyle;
}
const WRAPPER: ViewStyle = {
  width: Dimensions.get('window').width,
  flexDirection: 'row',
  paddingHorizontal: spacing.spacing16,
};
/**
 * KeyValueItem 用來呈現鍵值對
 */
export function KeyValueItem(props: KeyValueItemProps) {
  const { t } = useTranslation();
  return (
    <View accessible={false} style={[WRAPPER, props.style]}>
      <TouchableOpacity
        activeOpacity={0.9}
        onPress={() => {
          if (props.onPressLabel) {
            props.onPressLabel();
          }
        }}>
        <Text
          style={[
            {
              ...textStyleSet.content_14_reg,
              color: palette.grey85,
              lineHeight: 24,
              paddingRight: 20,
            },
            props.titleStyle,
          ]}>
          {t(props.title)}
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        accessible={false}
        activeOpacity={0.9}
        onPress={() => {
          if (props.onPressValue) {
            props.onPressValue();
          }
        }}
        style={{
          flex: 1,
          flexDirection: 'row',
        }}>
        <Text
          {...pruTestID(props.title + 'Value')}
          style={[
            {
              ...textStyleSet.content_14_reg,
              textAlign: 'right',
              color: palette.grey33,
              lineHeight: 24,
              flex: 1,
            },
            props.itemStyle,
          ]}>
          {(props.value !== undefined && props.value !== null && String(props.value)) ||
            props.emptyValueLabel}
        </Text>
      </TouchableOpacity>
    </View>
  );
}

/**
 * KeyValueItem 用來呈現比較自定義的鍵值對，
 */
export function CustomizedKeyValueItem(props: KeyValueItemProps) {
  return (
    <View accessible={false} style={[WRAPPER, props.style]}>
      <TouchableOpacity
        activeOpacity={0.9}
        style={{
          flexDirection: 'row',
        }}
        onPress={() => {
          if (props.onPressLabel) {
            props.onPressLabel();
          }
        }}>
        <Text
          style={[
            {
              ...textStyleSet.content_14_reg,
              color: palette.grey85,
              lineHeight: 24,
              paddingRight: 8,
            },
            props.titleStyle,
          ]}>
          {props.title}
        </Text>
        {props.titleCursor}
      </TouchableOpacity>
      <TouchableOpacity
        accessible={false}
        activeOpacity={0.9}
        onPress={() => {
          if (props.onPressValue) {
            props.onPressValue();
          }
        }}
        style={{
          flex: 1,
          flexDirection: 'row',
        }}>
        <Text
          {...pruTestID(props.title + 'Value')}
          style={[
            {
              ...textStyleSet.content_14_reg,
              textAlign: 'right',
              color: palette.grey33,
              lineHeight: 24,
              flex: 1,
            },
            props.itemStyle,
          ]}>
          {props.value}
          {props.valueCursor}
        </Text>
      </TouchableOpacity>
    </View>
  );
}
