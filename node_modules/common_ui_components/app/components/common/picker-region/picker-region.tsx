import * as React from 'react';
import { Text, View, ViewStyle } from 'react-native';
import { Picker } from 'native-base';
import { pickerRegionStyles as styles } from './picker-region.styles';
import { getI18n, useTranslation } from 'react-i18next';
import { IconFont } from '../../icon-font/icon-font';
import { palette } from '../../../theme';
import { CommonTranslateKey } from 'common_ui_components';
import { PruHeader } from 'common_ui_components/app/components';
import { SafeAreaView, useSafeAreaInsets } from 'react-native-safe-area-context';

export interface PickerRegionProps {
  source: { [key: string]: string };
  initValue: string;
  onValueChange: Function;
  style?: ViewStyle;
}

const header: React.FunctionComponent<any> = (backAction) => {
  return (
    <SafeAreaView>
      <PruHeader
        headerText={getI18n().t(CommonTranslateKey.select_country_region_code)}
        leftIcon="arrow_back"
        onLeftPress={backAction}
      />
    </SafeAreaView>
  );
};
/**
 * React.FunctionComponent for your hook(s) needs
 *
 * Component description here for TypeScript tips.
 */
export const PickerRegion: React.FunctionComponent<PickerRegionProps> = (props) => {
  const { t, i18n } = useTranslation();

  const [selectedValue, setSelectValue] = React.useState(props.initValue);
  return (
    <View style={styles.WRAPPER}>
      <Picker
        mode="dialog"
        iosHeader={t(CommonTranslateKey.select_one)}
        itemTextStyle={{
          width: '120%',
        }}
        headerBackButtonText={t('Common:cancel')}
        renderHeader={header}
        iosIcon={
          <View>
            <IconFont name="arrow_down" color={palette.grey85} size={16} />
          </View>
        }
        selectedValue={selectedValue}
        onValueChange={(value) => {
          props.onValueChange(value);
          setSelectValue(value);
        }}
        style={props.style}>
        {Object.keys(props.source).map((key) => {
          return <Picker.Item key={key} label={props.source[key]} value={key} />;
        })}
      </Picker>
    </View>
  );
};
