import { DialogContainer } from '../dialog-container/dialog-container';
import React, { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { Text, View, ViewStyle } from 'react-native';

const paddingHorizontal = 18;

export interface ModalProps {
  open: boolean;
  onSubmit: () => void;
  onClose: () => void;
  onModalHide?: Function;
  clearStates: () => void;
  children?: any;
  subModalProps?: SubModalProps;
}
export interface SubModalProps {
  subModalOpen: boolean;
  onSubClose: () => void;
  onSubModalHide?: Function;
  subClearStates: () => void;
  subModalChildren?: any;
}
export interface ModalStyle {
  containerStyle?: ViewStyle;
  dialogStyle?: ViewStyle;
}

export const Modal: React.FC<ModalProps> = ({
  open,
  children,
  onClose,
  clearStates,
  onModalHide,
  subModalProps,
}) => {
  const [visible, setVisible] = useState(open);
  const [subModalVisible, setSubModalVisible] = useState(subModalProps?.subModalOpen);

  useEffect(() => {
    setVisible(open || subModalProps?.subModalOpen);
    setSubModalVisible(subModalProps?.subModalOpen);
  }, [open, subModalProps?.subModalOpen]);

  const authState = useSelector((state: any) => {
    return state.auth; // Flags to determine Landing Auth or Home Stack
  });
  const { agentCode, username } = authState;
  useEffect(() => {
    if (!(agentCode || username)) {
      onClose();
    }
  }, [agentCode, username, onClose]);

  return (
    <>
      <DialogContainer
        onModalHide={() => {
          onModalHide?.();
        }}
        visible={visible}
        dismissCallBack={clearStates}
        containerStyle={{
          ...(children?.props?.containerStyle || {}),
        }}
        dialogStyle={children?.props?.dialogStyle}>
        {(() => {
          if (children) {
            return React.cloneElement(children, { onClose });
          }
        })()}
        <DialogContainer
          onModalHide={() => {
            subModalProps?.onSubModalHide?.();
          }}
          visible={subModalVisible}
          dismissCallBack={subModalProps?.subClearStates}
          containerStyle={{
            ...(subModalProps?.subModalChildren?.props?.containerStyle || {}),
          }}
          dialogStyle={subModalProps?.subModalChildren?.props?.dialogStyle}>
          {(() => {
            if (subModalProps?.subModalChildren) {
              return React.cloneElement(subModalProps?.subModalChildren, {
                onClose: subModalProps?.subClearStates,
              });
            }
          })()}
        </DialogContainer>
      </DialogContainer>
    </>
  );
};
