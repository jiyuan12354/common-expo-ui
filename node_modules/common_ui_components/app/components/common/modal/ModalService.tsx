import React from 'react';
import { AppRoutes, GlobalHelper } from 'common_services_frontend';
import { MoreModal } from './more-modal/MoreModal';
import { getI18n } from 'react-i18next';
import { ShareModal } from './share-modal/ShareModal';
import { palette } from '../../../theme';
import { ConfirmModal, ConfirmModalProps } from './confirm-modal/ConfirmModal';
import { AlertModal } from './alert-model/AlertModal';
import { AlertWithoutTitleModal } from './alert-model/AlertWithoutTitleModal';
import {
  ConfirmWithoutTitleModal,
  ConfirmWithoutTitleModalProps,
} from './confirm-modal/ConfirmWithoutTitleModal';
import {
  ConfirmModalWithConfirmCheckbox,
  ConfirmModalWithConfirmCheckboxProps,
} from 'common_ui_components/app/components/common/modal/confirm-modal/ConfirmModalWithConfirmCheckbox';

export interface ShareOption {
  onPickWhatsApp: Function;
  onPickMore: Function;
}

class ModalService {
  modalRef: any;
  promiseRef: any;
  // eslint-disable-next-line @typescript-eslint/lines-between-class-members
  constructor() {
    this.modalRef = GlobalHelper.getGlobalModalRef();
    this.promiseRef = new Promise((resolve, reject) => reject());
  }
  init() {
    this.modalRef = GlobalHelper.getGlobalModalRef();
    this.promiseRef = new Promise((resolve, reject) => reject());
  }

  showMoreMoal() {
    this.promiseRef.then(
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <MoreModal
              dialogStyle={{
                backgroundColor: palette.white,
                paddingBottom: 10,
              }}
              // eslint-disable-next-line react/no-children-prop
              children={[
                {
                  icon: 'tabbar_recuit_normal1',
                  name: getI18n().t('Recruitment:recruitment'),
                  route: AppRoutes.RECRUITMENT,
                },
                {
                  icon: 'tabbar_taining_normal',
                  name: getI18n().t('Training:training'),
                  route: AppRoutes.TRAINING,
                },
              ]}
            />
          ),
        });
      },
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <MoreModal
              dialogStyle={{
                backgroundColor: palette.white,
                paddingBottom: 10,
              }}
              // eslint-disable-next-line react/no-children-prop
              children={[
                {
                  icon: 'tabbar_recuit_normal1',
                  name: getI18n().t('Recruitment:recruitment'),
                  route: AppRoutes.RECRUITMENT,
                },
                {
                  icon: 'tabbar_taining_normal',
                  name: getI18n().t('Training:training'),
                  route: AppRoutes.TRAINING,
                },
              ]}
            />
          ),
        });
      },
    );
  }
  showAlert(title: string, content: string, onClose?: () => void) {
    this.promiseRef.then(
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <AlertModal
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              title={title}
              content={content}
              onClose={() => {
                if (onClose) onClose();
              }}
            />
          ),
        });
      },
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <AlertModal
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              title={title}
              content={content}
              onClose={() => {
                if (onClose) onClose();
              }}
            />
          ),
        });
      },
    );
  }

  showTips(content: string, onClose?: () => void) {
    this.promiseRef.then(
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <AlertWithoutTitleModal
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              content={content}
              onClose={() => {
                if (onClose) onClose();
              }}
            />
          ),
        });
      },
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <AlertWithoutTitleModal
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              content={content}
              onClose={() => {
                if (onClose) onClose();
              }}
            />
          ),
        });
      },
    );
  }
  shareOpen(option: ShareOption) {
    this.promiseRef.then(
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: <ShareModal {...option} />,
        });
      },
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: <ShareModal {...option} />,
        });
      },
    );
  }
  confirm(option: ConfirmModalProps) {
    this.promiseRef.then(
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <ConfirmModal
              {...option}
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              dialogStyle={{}}
            />
          ),
        });
      },
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <ConfirmModal
              {...option}
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              dialogStyle={{}}
            />
          ),
        });
      },
    );
  }
  confirmWithConfirmCheckbox(option: ConfirmModalWithConfirmCheckboxProps) {
    this.promiseRef.then(
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <ConfirmModalWithConfirmCheckbox
              {...option}
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              dialogStyle={{}}
            />
          ),
        });
      },
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <ConfirmModalWithConfirmCheckbox
              {...option}
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              dialogStyle={{}}
            />
          ),
        });
      },
    );
  }

  confirmWithoutTitle(option: ConfirmWithoutTitleModalProps) {
    this.promiseRef.then(
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <ConfirmWithoutTitleModal
              {...option}
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              dialogStyle={{}}
            />
          ),
        });
      },
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: (
            <ConfirmWithoutTitleModal
              {...option}
              containerStyle={{
                flexDirection: 'column',
                justifyContent: 'center',
              }}
              dialogStyle={{}}
            />
          ),
        });
      },
    );
  }
  open(children: React.ReactElement) {
    this.promiseRef.then(
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: children,
        });
      },
      () => {
        this.promiseRef = this.modalRef?.open?.({
          children: children,
        });
      },
    );
  }
  openSubModal(children: React.ReactElement) {
    this.modalRef?.openSubModal?.({
      children,
    });
  }
}

export const modalService = new ModalService();
