import * as React from 'react';
import { Text, View } from 'react-native';
import { Modal, ModalProps, SubModalProps } from '../modal/Modal';

const ModalServiceContext = React.createContext<{
  open: (options: ModalProps) => Promise<void>;
  openSubModal: (options: { children: React.ReactElement }) => void;
}>({ open: Promise.reject, openSubModal: () => {} });

export const useModal = () => React.useContext(ModalServiceContext);

let modalStateRef: any;
export const ModalServiceProvider = ({ children }) => {
  const [modalState, setModalState] = React.useState<ModalProps | null>(modalStateRef);

  const awaitingPromiseRef = React.useRef<{
    resolve: () => void;
    reject: () => void;
  }>();

  const openModal = (options: ModalProps) => {
    setModalState(options);
    modalStateRef = options;
    return new Promise<void>((resolve, reject) => {
      awaitingPromiseRef.current = { resolve, reject };
    });
  };

  const openSubModal = ({ children }) => {
    setModalState({
      ...modalStateRef,
      children: modalStateRef?.children,
      subModalProps: {
        subModalOpen: true,
        subClearStates: () => {
          setModalState({
            ...modalStateRef,
            children: modalStateRef?.children,
            subModalProps: { ...modalStateRef?.subModalProps, subModalOpen: false },
          });
        },
        // onSubClose: () => {},
        subModalChildren: children,
      },
    });
  };

  const handleClose = () => {
    if (modalState && awaitingPromiseRef.current) {
      awaitingPromiseRef.current.reject();
    }
    if (!modalState?.subModalProps?.subModalOpen) {
      setModalState(null);
    }
  };

  const handleSubmit = () => {
    if (awaitingPromiseRef.current) {
      awaitingPromiseRef.current.resolve();
    }
    if (!modalState?.subModalProps?.subModalOpen) {
      setModalState(null);
    }
  };

  const clearStates = () => {
    if (modalState && awaitingPromiseRef.current) {
      awaitingPromiseRef.current.reject();
    }

    if (!modalState?.subModalProps?.subModalOpen) {
      setModalState(null);
    }
  };
  return (
    <>
      <ModalServiceContext.Provider value={{ open: openModal, openSubModal: openSubModal }}>
        {children}
      </ModalServiceContext.Provider>

      <Modal
        open={Boolean(modalState)}
        onSubmit={handleSubmit}
        onClose={handleClose}
        clearStates={clearStates}
        {...modalState}
      />
    </>
  );
};
