import { Colors } from '../../style';
import React, { FC, useRef, useState } from 'react';
import { View, Dimensions, StyleSheet, ScrollView, Text, TextInput } from 'react-native';
import Pdf from 'react-native-pdf';
import { useTranslation } from 'react-i18next';
import { CommonTranslateKey } from '../../translation/__translation-keys';
import Button from '../Button';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  pdf: {
    flex: 1,
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
  passwordContainer: {
    width: '85%',
    alignItems: 'center',
    paddingBottom: 25,
  },
  passwordTitle: {
    fontSize: 17,
  },
  passwordEntryContainer: {
    width: '70%',
    marginTop: 10,
    marginBottom: 10,
    borderRadius: 15,
    paddingHorizontal: 10,
    backgroundColor: Colors.lightGrey,
  },
  passwordEntry: {
    fontSize: 20,
    paddingVertical: 5,
    textAlign: 'center',
    textAlignVertical: 'center',
    backgroundColor: Colors.lightGrey,
  },
  confirmBtn: {
    width: '40%',
    borderRadius: 20,
  },
});

type PDFViewerProps = {
  uri: String;
  password?: string;
  setFilePath: React.Dispatch<React.SetStateAction<string>>;
  setError: React.Dispatch<React.SetStateAction<string>>;
};

export const ENCRYPTED_MSG = 'Error: Password required or incorrect password.';

export const PDFViewer: FC<PDFViewerProps> = ({ uri, password, setFilePath, setError }) => {
  const pdfSrc = { uri: uri, cache: true, expiration: 900 };
  if (!password) {
    password = '';
  }
  const { t } = useTranslation();
  const [passwordInternal, setPasswordInternal] = useState(password);
  const [passwordDisplay, setPasswordDisplay] = useState('');
  const [errorInternal, setErrorInternal] = useState('');
  const [enteredPwd, setEnteredPwd] = useState(false);
  const passwordEntryRef = useRef<TextInput>(null);

  const onPwdEntered = () => {
    if (passwordDisplay) {
      setEnteredPwd(true);
      setPasswordInternal(passwordDisplay);
      setErrorInternal('');
    }
  };

  return (
    <ScrollView style={{ width: '100%' }} contentContainerStyle={styles.container}>
      {errorInternal === '' && (
        <Pdf
          source={pdfSrc}
          password={passwordInternal}
          onLoadComplete={(numberOfPages, filePath) => {
            console.log(`number of pages: ${numberOfPages}`);
            console.log(`filePath: ${filePath}`);
            setFilePath(filePath);
          }}
          onError={(error) => {
            console.log(error.toString());
            if (error.toString() === ENCRYPTED_MSG) {
              setErrorInternal(ENCRYPTED_MSG);
              setPasswordDisplay('');
              if (!enteredPwd) {
                setTimeout(() => {
                  passwordEntryRef?.current?.focus();
                }, 100);
              }
            }
            setError(error.toString());
          }}
          style={styles.pdf}
          activityIndicatorProps={{ progressTintColor: 'red' }}
          fitPolicy={0}
        />
      )}
      {errorInternal === ENCRYPTED_MSG && (
        <View style={styles.passwordContainer}>
          <Text style={styles.passwordTitle}>{t(CommonTranslateKey.docIsProtectedByPwd)}</Text>
          <View style={styles.passwordEntryContainer}>
            <TextInput
              ref={passwordEntryRef}
              style={styles.passwordEntry}
              placeholder={t(CommonTranslateKey.passwordPlaceholder)}
              placeholderTextColor="#C7C7CD"
              onChangeText={setPasswordDisplay}
              value={passwordDisplay}
              onEndEditing={onPwdEntered}
              autoCompleteType="password"
              returnKeyType="done"
              secureTextEntry={true}
            />
          </View>
          <Button mode="contained" style={styles.confirmBtn} onPress={onPwdEntered}>
            {t(CommonTranslateKey.confirm)}
          </Button>
        </View>
      )}
    </ScrollView>
  );
};
