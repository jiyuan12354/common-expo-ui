import { uuidv4 } from 'common_services_frontend';
import * as React from 'react';
import { Text, TextStyle, View, ViewStyle } from 'react-native';
import { color, palette, typography } from '../../../theme';
import { findAll } from './utils';

const CONTAINER: ViewStyle = {
  justifyContent: 'center',
};

const TEXT: TextStyle = {
  fontSize: 14,
  color: color.primary,
};

export interface HighlightTextProps {
  /**
   * An optional style override useful for padding & margin.
   */
  style?: ViewStyle;
  textStyle?: TextStyle;
  highLightText: string;
  highLightColor?: string;
  children: any;
  decorateEndpoint?: Element;
  ellipsizeMode?: 'head' | 'middle' | 'tail' | 'clip';
  numberOfLines?: number;
}

/**
 * Describe your component here
 */
let HighlightText = (props: HighlightTextProps) => {
  const {
    style,
    highLightText,
    highLightColor,
    textStyle,
    decorateEndpoint,
    ellipsizeMode,
    numberOfLines,
  } = props;
  const fullText: string = props.children;

  // 关键词高亮逻辑
  // 1. 把匹配关键字中的正则符转义
  // const keyword = `(${highLightText.replace(
  //   /([\+\.\*\|\?\-\(\[\^\$])/g,
  //   '\\$1',
  // )})`;
  if (!fullText) {
    return null;
  }
  if (!highLightText || !fullText.toLocaleLowerCase().includes(highLightText.toLocaleLowerCase())) {
    return (
      <Text style={style}>
        <Text style={textStyle}>{fullText}</Text>
        {decorateEndpoint}
      </Text>
    );
  }
  const chunks = findAll({
    searchWords: [highLightText],
    textToHighlight: fullText,
    autoEscape: true,
  });
  // const keyword = `(${highLightText.replace(/([\+\.\*\|\?\-\(\[\^\$])/g, '\\$1')})`;
  // const patt = new RegExp(keyword, 'igm');
  // // 2. 切割待搜索内容
  // const splitText = fullText.split(patt);
  return (
    <View
      key={uuidv4()}
      style={[
        {
          flexDirection: 'row',
          flexWrap: 'wrap',
          // flex: 1,
        },
        style,
      ]}>
      <Text ellipsizeMode={ellipsizeMode} numberOfLines={numberOfLines}>
        {chunks.map((chunk) => {
          const { end, highlight, start } = chunk;
          const text = fullText.substring(start, end);
          if (highlight) {
            return (
              <Text
                key={uuidv4()}
                style={[
                  {
                    fontWeight: 'bold',
                  },
                  textStyle,
                  {
                    color: highLightColor || palette.red,
                  },
                ]}>
                {text}
              </Text>
            );
          }
          return (
            <Text key={uuidv4()} style={[{ fontWeight: 'bold' }, textStyle]}>
              {text}
            </Text>
          );
        })}
        {decorateEndpoint}
      </Text>
    </View>
  );
};
HighlightText = React.memo(HighlightText);
export { HighlightText };
