import { IconFont } from '../../icon-font/icon-font';
import { TestID } from '../../test-id';
import { CommonTranslateKey } from '../../../translation/__translation-keys';
import * as React from 'react';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Keyboard,
  ScrollView,
  TextInput,
  TextStyle,
  TouchableOpacity,
  View,
  ViewStyle,
} from 'react-native';
import { color, palette, spacing, typography } from '../../../theme';
import { pruTestID } from 'common_services_frontend';

const CONTAINER: ViewStyle = {
  backgroundColor: palette.red,
  flex: 1,
};

const TEXT: TextStyle = {
  fontSize: 14,
  color: color.primary,
};

export interface SearchInputProps {
  placeholderTip?: string;
  style?: ViewStyle;
  onChange?: Function;
  autoFocus?: boolean;
  onSubmitEditing?: Function;
  multiline?: boolean;
}

const searchHeight = 32;

export const SearchItemStyle: ViewStyle = {
  borderRadius: 16,
  // height: searchHeight,
  backgroundColor: palette.greyeb,
};
export const SearchInputStyle: TextStyle = {
  flex: 1,
  fontSize: 14,
  height: 32,
  paddingVertical: 0,
  backgroundColor: color.transparent,
};
/**
 * Describe your component here
 */
export function SearchInput(props: SearchInputProps) {
  const { style } = props;
  const { t } = useTranslation();
  const [searchKey, setSearchKey] = useState('');
  const placeholderTip = props.placeholderTip || t(CommonTranslateKey.search_for);

  const onSearchKeyChange = (value: string) => {
    setSearchKey(value);
    if (props.onChange) {
      props.onChange(value);
    }
  };
  return (
    <View
      style={[
        SearchItemStyle,
        {
          flexDirection: 'row',
          justifyContent: 'center',
          alignItems: 'center',
        },
        style,
      ]}>
      <IconFont
        style={{
          padding: spacing.spacing8,
        }}
        name="search"
        size={16}
        color={palette.greyba}
      />
      <TextInput
        {...pruTestID('SearchInput')}
        autoFocus={props.autoFocus || false}
        value={searchKey}
        onChange={(target) => onSearchKeyChange(target.nativeEvent.text)}
        placeholder={placeholderTip}
        placeholderTextColor={palette.greyba}
        underlineColorAndroid={color.transparent}
        onBlur={Keyboard.dismiss}
        style={[SearchInputStyle]}
        onSubmitEditing={props.onSubmitEditing || null}
        multiline={props.multiline || false}
      />

      {/* <TextInput
        multiline
        showSoftInputOnFocus={false}
        value={searchKey}
        onChange={(target) => onSearchKeyChange(target.nativeEvent.text)}
        placeholder={placeholderTip}
        placeholderTextColor={color.greyba}
        underlineColorAndroid={color.transparent}
        style={{
          fontSize: 14,
          width: 124,
          paddingVertical: 0,
          backgroundColor: color.transparent,
          paddingLeft: spacing.spacing4,
        }}
      /> */}

      {searchKey ? (
        <TouchableOpacity
          activeOpacity={0.9}
          testID={TestID.ClearIcon}
          style={{
            position: 'absolute',
            right: spacing.spacing2,
          }}
          onPress={() => {
            setSearchKey('');
            if (props.onChange) {
              props.onChange('');
            }
          }}>
          <IconFont
            style={{
              padding: spacing.spacing8,
            }}
            name="text_delete"
            size={16}
            color={palette.greyba}
          />
        </TouchableOpacity>
      ) : null}
    </View>
  );
}
