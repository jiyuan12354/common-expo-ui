import * as React from 'react';
import { Text, View } from 'react-native';
import { useSelector } from 'react-redux';
import { useEffect } from 'react';
import { popDialogStyles as styles } from './pop-dialog.styles';
import { TestID } from '../../test-id';
import { DialogContainer } from '../../common/dialog-container/dialog-container';
import { Button as PruNormalButton } from '../../base/button/button';
import { palette } from '../../../theme/palette';
import { textStyleSet } from '../../../theme/text';
import { pruTestID } from 'common_services_frontend';
import HTMLView from 'react-native-htmlview';

export interface PopDialogProps {
  title?: string;
  message?: string;
  messageIsHtml?: boolean;
  messageHtmlStyle?: any;
  visible: boolean;
  confirmButtonText?: string;
  confirmCallBack: Function;
  cancelButtonText?: string;
  dismissCallBack: Function;
}

/**
 * React.FunctionComponent for your hook(s) needs
 *
 * Component description here for TypeScript tips.
 */
export const PopDialog: React.FunctionComponent<PopDialogProps> = (props) => {
  const authState = useSelector((state: any) => {
    return state.auth; // Flags to determine Landing Auth or Home Stack
  });
  const { agentCode } = authState;
  useEffect(() => {
    props.dismissCallBack();
  }, [agentCode]);
  return (
    <DialogContainer
      visible={props.visible}
      containerStyle={{
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
      }}
      dialogStyle={{
        width: '90%',
        // marginHorizontal: 12,
        borderRadius: 16,
        backgroundColor: palette.white,
      }}
      dismissCallBack={props.dismissCallBack}>
      <View style={styles.WRAPPER}>
        <Text
          testID={TestID.DialogTitle}
          accessibilityLabel={TestID.DialogTitle}
          style={{
            ...styles.title,
            ...(typeof props.message === 'undefined'
              ? textStyleSet.title_20_med
              : textStyleSet.title_24_bold),
          }}>
          {props.title}
        </Text>

        {props.message && (
          <View
            testID={TestID.DialogMessage}
            accessibilityLabel={TestID.DialogMessage}
            style={{ ...styles.messageContainer }}>
            {props.messageIsHtml ? (
              <HTMLView stylesheet={props.messageHtmlStyle} value={props.message} />
            ) : (
              <Text
                style={{
                  ...textStyleSet.content_14_med_18,
                  ...styles.message,
                }}>
                {props.message}
              </Text>
            )}
          </View>
        )}

        <PruNormalButton
          {...pruTestID('ok')}
          text={props.confirmButtonText || 'Confirm'}
          onPress={() => {
            props.confirmCallBack();
          }}
          textStyle={{ ...styles.buttonText }}
          style={styles.confirmButton}
        />
        <PruNormalButton
          {...pruTestID('cancel')}
          text={props.cancelButtonText || 'Cancel'}
          onPress={() => {
            props.dismissCallBack();
          }}
          textStyle={{ ...styles.buttonText, color: palette.grey33 }}
          style={styles.cancelButton}
        />
      </View>
    </DialogContainer>
  );
};
