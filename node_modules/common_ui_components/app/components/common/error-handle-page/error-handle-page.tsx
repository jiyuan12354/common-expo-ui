import React, { FunctionComponent as Component, ReactNode, useEffect } from 'react';
import { View, Text, Pressable } from 'react-native';
import { getI18n } from 'react-i18next';
import { IconTypes } from '../../base/icon/icons';
import { textStyleSet } from '../../../theme/text';
import { CommonTranslateKey } from '../../../translation/__translation-keys';
import { palette } from '../../../theme';
import { constants, navigationRef, setErrorCodeForShow } from 'common_services_frontend';
import {
  ErrorPage,
  ErrorPageProps,
} from 'common_ui_components/app/components/error-page/error-page';
import { GeneralApiProblemKind } from 'common_services_frontend/src/network/api-problem';
import { useFocusEffect, useNavigation } from '@react-navigation/core';
import { useDispatch, useSelector } from 'react-redux';
import { IconFont } from '../../icon-font/icon-font';
export interface ErrorHandlePageProps extends ErrorPageProps {
  screenSnapshot?: React.ReactNode;
}
export const ErrorMap: {
  [key: string]: {
    icon: IconTypes;
    defaultMessage?: string;
  };
} = {
  [GeneralApiProblemKind.Unknown]: {
    icon: 'unvalid',
    defaultMessage: CommonTranslateKey.connection_error,
  },
  [GeneralApiProblemKind.NotFound]: {
    icon: 'no_content',
    defaultMessage: CommonTranslateKey.not_found_error,
  },
  [GeneralApiProblemKind.BadData]: {
    icon: 'unvalid',
    defaultMessage: CommonTranslateKey.unknown_error,
  },
  [GeneralApiProblemKind.CannotConnect]: {
    icon: 'no_network_connected',
    defaultMessage: CommonTranslateKey.connection_error,
  },
  [GeneralApiProblemKind.Conflict]: {
    icon: 'unvalid',
    defaultMessage: CommonTranslateKey.unknown_error,
  },
  [GeneralApiProblemKind.Forbidden]: {
    icon: 'unvalid',
    defaultMessage: CommonTranslateKey.forbidden_error,
  },
  [GeneralApiProblemKind.PreConditionFailed]: {
    icon: 'unvalid',
    defaultMessage: CommonTranslateKey.connection_error,
  },
  [GeneralApiProblemKind.Rejected]: {
    icon: 'unvalid',
    defaultMessage: CommonTranslateKey.not_found_error,
  },
  [GeneralApiProblemKind.Server]: {
    icon: 'no_network_connected',
    defaultMessage: CommonTranslateKey.connection_error,
  },
  [GeneralApiProblemKind.Timeout]: {
    icon: 'expired',
    defaultMessage: CommonTranslateKey.connection_error,
  },
  [GeneralApiProblemKind.Unauthorized]: {
    icon: 'unvalid',
    defaultMessage: CommonTranslateKey.unauthorized_error,
  },
  [GeneralApiProblemKind.PreConditionFailed]: {
    icon: 'unvalid',
    defaultMessage: CommonTranslateKey.connection_error,
  },
};
let refreshCount = 0;
export const ErrorHandlePage: Component<ErrorHandlePageProps & any> = (props) => {
  const dispatch = useDispatch();
  const screenSnapshot = props?.screenSnapshot || {};
  const errorCodeSelector = useSelector((state: any) => {
    return state?.common?.errorCodeNeedShow;
  });

  const [icon, setIcon] = React.useState(ErrorMap['unknown'].icon);
  const [errorCode, setErrorCode] = React.useState('');
  const [iconIsSet, setIconFlag] = React.useState(false);
  const [showChildren, setShowChildren] = React.useState(false);
  const [errorMsgKey, setMsgKey] = React.useState(CommonTranslateKey.server_error);

  React.useEffect(() => {
    if (errorCode) {
      setIconFlag(true);
      setIcon(ErrorMap[errorCode || 'unknown'].icon);
      setMsgKey(ErrorMap[errorCode || 'unknown'].defaultMessage || '');
    }
  }, [errorCode]);
  React.useEffect(() => {
    setErrorCode(errorCodeSelector);
  }, [errorCodeSelector]);

  useFocusEffect(
    React.useCallback(() => {
      setTimeout(() => {
        setShowChildren(true);
      }, 300);
      return () => {
        dispatch(setErrorCodeForShow(''));
        setIconFlag(false);
        setShowChildren(false);
      };
    }, []),
  );
  const navigation = useNavigation();
  return errorCode ? (
    iconIsSet ? (
      <View style={{ flex: 1 }}>
        <View
          style={{
            flex: 1,
          }}>
          {screenSnapshot && screenSnapshot[0]}
          <View style={{ flex: 0.2, backgroundColor: palette.white }} />
          {
            <ErrorPage
              icon={icon}
              style={{
                flex: 0,
              }}
              textKey={errorMsgKey}
              handleButton={
                <View style={{ flexDirection: 'row' }}>
                  <Pressable
                    style={{
                      marginVertical: 24,
                      flexDirection: 'row',
                      backgroundColor: palette.red,
                      borderRadius: 12,
                      paddingHorizontal: 12,
                      paddingVertical: 10,
                    }}
                    onPress={() => {
                      const currentRoute = navigationRef?.current?.getCurrentRoute() || {};
                      dispatch(setErrorCodeForShow(''));
                      navigation.setParams({
                        ...(currentRoute?.params || {}),
                        refreshCount: ++refreshCount,
                      });
                    }}>
                    <IconFont name="refresh" size={22} color={palette.white} />
                    <Text
                      style={{ ...textStyleSet.text_16_med, color: palette.white, paddingLeft: 6 }}>
                      {getI18n().t(CommonTranslateKey.refresh)}
                    </Text>
                  </Pressable>
                </View>
              }
            />
          }
          <View style={{ flex: 1, backgroundColor: palette.white }} />
        </View>
      </View>
    ) : null
  ) : showChildren ? (
    props.children
  ) : null;
};

export const ErrorHandlePageWrapper = (children: ReactNode) => {
  return <ErrorHandlePage children={children} />;
};
