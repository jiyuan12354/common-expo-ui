import React, { Dispatch, FC, SetStateAction, useEffect, useState } from 'react';
import {
  TouchableOpacity,
  View,
  Text,
  Image,
  ViewProps,
  StyleSheet,
  Alert,
  Pressable,
  FlatList,
  Dimensions,
} from 'react-native';
import { useTranslation } from 'react-i18next';
import { color, palette, textStyleSet } from 'common_ui_components/app/theme';
import { IconFont } from 'common_ui_components/app/components/icon-font/icon-font';
import { modalService } from 'common_ui_components/app/components/common/modal/ModalService';
import { pruTestID } from 'common_services_frontend';
import { PruNormalButton } from 'common_ui_components';
import { ACTIVE_SUBMIT_BUTTON, SUBMIT_BUTTON } from 'common_ui_components/app/theme/commonStyles';
import { title } from 'process';
import { CommonTranslateKey } from 'common_ui_components/app/translation/__translation-keys';
import { isEqual } from 'lodash';

interface DropDownData {
  value: number | string | boolean;
  label: string;
}
type DropDownPickerProps = ViewProps & {
  // onPress: () => void,
  dataSet?: Array<DropDownData>;
  preselectedIndex?: number;
  placeholder?: string;
  title?: string;
};

const styles = StyleSheet.create({});
export const useDropDownPicker = ({
  style,
  dataSet = [],
  preselectedIndex,
  placeholder,
  title,
}: DropDownPickerProps): [JSX.Element, string | number | null, any] => {
  const { t } = useTranslation();
  let preIndex = preselectedIndex;

  if (!placeholder) {
    placeholder = t(CommonTranslateKey.please_select)
  }

  const [open, setOpen] = useState(false);
  const [selectedValue, setSelectedValue] = useState<string>('');
  const [index, setIndex] = useState(preIndex as any);
  const [options, setOptions] = useState<Array<DropDownData>>(dataSet);
  const [pickerTitle, setPickerTitle] = useState<string>(title)
  const [presetLabel, setPresetLabel] = useState<string>(placeholder)


  useEffect(() => {
    setPickerTitle(title)
  }, [title]);

  useEffect(() => {
    if (dataSet?.length && !isEqual(options, dataSet)) {
      setOptions(dataSet);
    }
  }, [dataSet]);

  useEffect(() => {
    setIndex(preselectedIndex);
  }, [preselectedIndex]);

  useEffect(() => {
    const presetValue =
      preIndex !== undefined && preIndex < options.length && preIndex > -1
        ? options[preIndex].value
        : null;

    const presetLabel =
      preIndex !== undefined && preIndex < options.length && preIndex > -1
        ? options[preIndex].label
        : placeholder;

    setSelectedValue(presetValue);
    setPresetLabel(presetLabel);
  }, [preIndex]);


  useEffect(() => {
    setSelectedValue(selectedValue);
    options.map((item, index) => {
      if (item.value === selectedValue) {
        setIndex(index);
      }
    });
  }, [selectedValue, options]);

  const ui = (
    <Pressable
      accessible={false}
      onPress={() => {
        modalService.open(
          <PickerListView
            data={options}
            title={pickerTitle}
            // onConfirm={(selectedLabel) => {
            //   setValue(dataSet.filter((item) => item.label === selectedLabel)[0].value);
            // }}
            selectedIndex={index}
            onConfirm={(selectedLabel) => {
              const selectedValue = options.find((item, index) => {
                if (item.label === selectedLabel) {
                  setIndex(index);
                  return true;
                }
              })?.value;

              setSelectedValue(selectedValue);
            }}
          />,
        );
      }}
      style={{
        flexDirection: 'row',
        width: '100%',
        paddingVertical: 12,
        paddingLeft: 2,
        alignItems: 'center',
        borderBottomWidth: 1,
        borderBottomColor: color.greyeb,
      }}>
      <View
        style={{
          flex: 1,
        }}>
        <Text
          {...pruTestID('dropDownPicker')}
          style={{
            ...textStyleSet.content_16_med,
            color: color.grey33,
            lineHeight: 24,
          }}>
          {t(
            selectedValue || selectedValue === false
              ? options.find((item) => {
                return item.value === selectedValue;
              })?.label
              : presetLabel,
          )}
        </Text>
      </View>
      <View
        style={{
          alignSelf: 'flex-end',
        }}>
        <IconFont name="arrow_down" size={14} color={color.grey66} />
      </View>
    </Pressable>
  );

  const funs: Record<string, Function> = { 
    setOptions,
    setSelectedValue
  };

  return [ui, selectedValue, funs];
};

const PickerListView = (props: {
  data: any[];
  title?: string;
  selectedIndex?: number;
  onConfirm?: Function;
}) => {
  const { t } = useTranslation();
  const [seletedLabel, setSelectedLabel] = useState(
    props.data[props.selectedIndex || 0]?.label || '',
  );
  const Translations = {
    select: t(CommonTranslateKey.select),
  };
  const renderItem = ({ item, index }) => {
    return (
      <Pressable
        accessible={false}
        onPress={() => {
          setSelectedLabel(item.label);
        }}
        key={index}
        style={[
          {
            padding: 12,
            marginBottom: 16,
            borderRadius: 8,
            backgroundColor: palette.white,
            flexDirection: 'row',
            justifyContent: 'center',
            alignItems: 'center',
          },
          seletedLabel === item.label
            ? {
              backgroundColor: palette.greyeb,
            }
            : {},
        ]}>
        {seletedLabel !== item.label ? (
          <View
            style={{
              width: 18,
              height: 18,
              borderRadius: 9,
              borderWidth: 1,
              marginRight: 12,
              borderColor: palette.greyba,
            }}></View>
        ) : (
          <View
            style={{
              width: 18,
              height: 18,
              borderRadius: 9,
              borderWidth: 1,
              marginRight: 12,
              borderColor: palette.red,
              justifyContent: 'center',
              alignItems: 'center',
            }}>
            <View
              style={{
                width: 10,
                height: 10,
                borderRadius: 5,
                backgroundColor: palette.red,
              }}></View>
          </View>
        )}
        <View
          style={{
            flex: 1,
          }}>
          <Text
            {...pruTestID('dropdownItem')}
            style={{
              ...textStyleSet.content_14_med,
              color: palette.grey33,
              lineHeight: 24,
            }}>
            {item.label}
          </Text>
        </View>
      </Pressable>
    );
  };
  return (
    <View
      style={{
        backgroundColor: palette.white,
        borderTopLeftRadius: 12,
        borderTopRightRadius: 12,
      }}>
      <View
        style={
          {
            // paddingHorizontal: 10,
          }
        }>
        <View
          style={{
            flexDirection: 'row',
            paddingHorizontal: 14,
            paddingVertical: 18,
          }}>
          <View
            style={{
              flexDirection: 'row',
              flex: 1,
            }}>
            <Text
              style={{
                ...textStyleSet.title_18_med,
                color: palette.grey33,
              }}>
              {props.title}
            </Text>
          </View>
          <TouchableOpacity
            accessible={false}
            activeOpacity={0.9}
            onPress={() => {
              if (props.onClose) {
                props.onClose();
              }
            }}
            style={{
              alignSelf: 'flex-end',
            }}>
            <IconFont {...pruTestID('closeIcon')} name="close" color={palette.grey85} size={24} />
          </TouchableOpacity>
        </View>
        <FlatList
          data={props.data}
          renderItem={renderItem}
          style={{
            maxHeight: Dimensions.get('window').height - 300,
            paddingHorizontal: 20,
            flexGrow: 0,
          }}
        />

        <View
          style={{
            width: Dimensions.get('screen').width,
            paddingHorizontal: 20,
            marginBottom: 24,
          }}>
          <PruNormalButton
            {...pruTestID('InviteButton')}
            text={Translations.select}
            onPress={() => {
              if (props.onConfirm) {
                props.onConfirm(seletedLabel);
              }
              if (props.onClose) {
                props.onClose();
              }
            }}
            textStyle={{
              color: palette.white,
              ...textStyleSet.title_18_med,
            }}
            style={{
              ...SUBMIT_BUTTON,
              ...ACTIVE_SUBMIT_BUTTON,
            }}
          />
        </View>
      </View>
    </View>
  );
};
