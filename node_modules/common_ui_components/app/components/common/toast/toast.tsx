import React, { FunctionComponent as Component, useCallback } from 'react';
import { Text, View, ViewStyle } from 'react-native';
import RootToast from 'react-native-root-toast';
import Modal from 'react-native-modal';
import { palette as PruPalette } from '../../../theme';
import { useFocusEffect } from '@react-navigation/core';
import { TestID } from '../../test-id';
import { GlobalHelper } from 'common_services_frontend';
import {
  errorToast,
  loadingToast,
  StatusesToastProps,
  successToast,
  warningToast,
} from './statusesToast';

export interface ToastProps {
  marginHorizontal?: number;
  duration?: number;
  message: string;
}

let ToastSnapShot: any;
export const Toast = (props: ToastProps) => {
  // 新弹出toast之前，先关掉已弹出的toast
  ToastSnapShot && RootToast.hide(ToastSnapShot);
  ToastSnapShot = RootToast.show(props.message, {
    duration: props.duration || 3000,
    visible: true,
    position: RootToast.positions.CENTER,
    shadow: true,
    animation: true,
    hideOnPress: true,
    delay: 0,
  });
};
export const StatusesToast = {
  success: (props: StatusesToastProps | void) => {
    const { show } = GlobalHelper.getGlobalToastRef();
    show && show(successToast(props || {}));
  },
  warning: (props: StatusesToastProps | void) => {
    const { show } = GlobalHelper.getGlobalToastRef();
    show && show(warningToast(props || {}));
  },
  error: (props: StatusesToastProps | void) => {
    const { show } = GlobalHelper.getGlobalToastRef();
    show && show(errorToast(props || {}));
  },
  loading: (props: StatusesToastProps | void) => {
    let loadingResove;
    const promise = new Promise((resolve, reject) => {
      loadingResove = resolve;
    });
    const { show } = GlobalHelper.getGlobalToastRef();
    show && show(loadingToast(props || {}, { resolve: loadingResove }));
    return promise;
  },
};

export interface DialogToastProps {
  visible: boolean;
  dismissCallBack: Function;
  message: string;
  style?: ViewStyle;
  duration: number; // close after duration (mil-seconds)
}

export const DialogToast: Component<DialogToastProps> = (props: DialogToastProps) => {
  const { message, style, duration = 0 } = props;

  const [visible, setVisible] = React.useState(props.visible);
  useFocusEffect(
    useCallback(() => {
      setVisible(props.visible);
      if (duration && props.visible) {
        setTimeout(() => {
          setVisible(false);
          props.dismissCallBack();
        }, duration);
      }
    }, [props.visible]),
  );
  return (
    <Modal
      onBackdropPress={() => {
        props.dismissCallBack();
        setVisible(false);
        return true;
      }}
      backdropOpacity={0}
      isVisible={visible}
      style={[
        {
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: 'transparent',
        },
        style,
      ]}
      animationIn={'fadeIn'}>
      <View
        style={{
          justifyContent: 'center',
          alignItems: 'center',
          height: 40,
          opacity: 0.8,
          backgroundColor: PruPalette.black,
          paddingHorizontal: 30,
          borderRadius: 20,
        }}>
        <Text
          testID={TestID.DialogToast}
          accessibilityLabel={TestID.DialogToast}
          style={{
            textAlign: 'center',
            color: PruPalette.white,
          }}>
          {message}
        </Text>
      </View>
    </Modal>
  );
};
