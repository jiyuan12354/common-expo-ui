import React, { FC } from 'react';
import { View, Text, ViewProps, Dimensions } from 'react-native';
import { useTranslation } from 'react-i18next';
import { color, textStyleSet } from '../../../theme';
import { ToastType } from '../../../pruforce/components/toast/ToastContext';
import { IconFont } from '../../icon-font/icon-font';
import { IconTypes } from '../../icon-font/fonts/__icontype';
import { PruActivityIndicator } from '../../common/ActivityIndicator';
import { CommonTranslateKey } from '../../../translation/__translation-keys';
import { ThemeColors } from 'react-navigation';

export interface StatusesToastProps {
  icon?: IconTypes;
  duration?: number;
  message?: string;
}

export type StatusesPayload = {
  message?: string;
  icon?: IconTypes;
};

type StatusesProps = ViewProps & {
  payload: StatusesPayload;
};

export const StatusesToast: FC<StatusesProps> = ({ payload, children, ...props }) => {
  const { style } = props;
  const { message, icon } = payload;
  return (
    <View
      style={[
        {
          // flexDirection: 'row',
          marginHorizontal: 20,
          padding: 16,
          backgroundColor: color.grey33,
          borderRadius: 12,
          alignItems: 'center',
          alignSelf: 'center',
          justifyContent: 'center',
          maxWidth: Dimensions.get('window').width - 40,
          minWidth: 80,
        },
        style,
      ]}>
      <IconFont name={icon} size={36} color={color.white} />
      <Text
        style={{
          ...textStyleSet.text_12_med,
          color: color.white,
          marginTop: 8,
        }}>
        {message}
      </Text>
    </View>
  );
};

export const LoadingToast: FC<StatusesProps> = ({ payload, children, ...props }) => {
  const { style } = props;
  const { message } = payload;
  return (
    <View
      style={[
        {
          // flexDirection: 'row',
          marginHorizontal: 20,
          padding: 16,
          backgroundColor: color.grey33,
          borderRadius: 12,
          alignItems: 'center',
          alignSelf: 'center',
          justifyContent: 'center',
          maxWidth: Dimensions.get('window').width - 40,
          minWidth: 80,
        },
        style,
      ]}>
      <PruActivityIndicator size={30} />
      <Text
        style={{
          ...textStyleSet.text_12_med,
          color: color.white,
          marginTop: 8,
        }}>
        {message || 'Loading'}
      </Text>
    </View>
  );
};

export const SuccessToast: FC<StatusesToastProps> = ({ message, icon }) => {
  const { t } = useTranslation();
  return (
    <StatusesToast
      payload={{
        message: message || t(CommonTranslateKey.successful),
        icon: icon || 'toast_success',
      }}
    />
  );
};

export const successToast = (payload: StatusesToastProps): ToastType => {
  return {
    customUI: () => <SuccessToast {...payload} />,
    toastConfig: {
      stayDuration: payload.duration || 3000,
      positionFromBottom: Dimensions.get('window').height / 2,
      animationDuration: 0.01,
    },
  };
};

export const ErrorToast: FC<StatusesToastProps> = ({ message, icon }) => {
  const { t } = useTranslation();
  return (
    <StatusesToast
      payload={{
        message: message || t(CommonTranslateKey.unsuccessful),
        icon: icon || 'toast_error',
      }}
    />
  );
};

export const errorToast = (payload: StatusesToastProps): ToastType => {
  return {
    customUI: () => <ErrorToast {...payload} />,
    toastConfig: {
      stayDuration: payload.duration || 3000,
      positionFromBottom: Dimensions.get('window').height / 2,
      animationDuration: 0.01,
    },
  };
};

export const WarningToast: FC<StatusesToastProps> = ({ message, icon }) => {
  const { t } = useTranslation();
  return (
    <StatusesToast
      payload={{
        message: message || t(CommonTranslateKey.unsuccessful),
        icon: icon || 'toast_warning',
      }}
    />
  );
};

export const warningToast = (payload: StatusesToastProps): ToastType => {
  return {
    customUI: () => <WarningToast {...payload} />,
    toastConfig: {
      stayDuration: payload.duration || 3000,
      positionFromBottom: Dimensions.get('window').height / 2,
      animationDuration: 0.01,
    },
  };
};

export const loadingToast = (payload: StatusesToastProps, params?: any): ToastType => {
  return {
    customUI: () => <LoadingToast payload={payload} />,
    toastConfig: {
      stayDuration: payload.duration || 3000,
      positionFromBottom: Dimensions.get('window').height / 2,
      animationDuration: 0.01,
      ...params,
    },
  };
};
