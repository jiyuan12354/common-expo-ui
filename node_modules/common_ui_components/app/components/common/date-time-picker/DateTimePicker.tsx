import { View } from 'native-base';
import React, { useState, useRef } from 'react';
import { Text, Image, TouchableOpacity, ScrollView, Dimensions, ViewStyle } from 'react-native';
import { Colors, Fonts, PrimaryButton } from 'common_ui_components/app/pruforce';
import { Calendar } from 'react-native-calendars';
import moment from 'moment';
import DatePicker from 'react-native-date-picker';
import { AppRoutes, constants } from 'common_services_frontend';
import { useTranslation } from 'react-i18next';
import { CommonTranslateKey, PruColor } from 'common_ui_components';
import { IconFont } from 'common_ui_components/app/components/icon-font/icon-font';
import { color } from 'common_ui_components/app/theme';

interface DateTimePickerViewProps {
  onDateTimeConfirm?: Function;
  initPickeredDate?: Date;
  onClose?: Function;
  style?: ViewStyle;
  title?: string;
  model?: 'date' | 'time' | 'datetime';
  hideTime?: boolean
}

const DateTimePickerView: React.FC<DateTimePickerViewProps> = (props) => {
  const { t } = useTranslation();
  const Translations = {
    title: props.title || t(CommonTranslateKey.select),
    buttonUpdate: t(CommonTranslateKey.confirm),
    buttonConfirm: t(CommonTranslateKey.confirm),
  };
  const dateFormat = 'YYYY-MM-DD';

  var defaultMarkedDate: { [k: string]: any } = {};
  const currentPickeredDate: string = moment(props.initPickeredDate).format(dateFormat);
  defaultMarkedDate[currentPickeredDate] = {};

  const calendar = useRef<Calendar>(null);
  const markedDates = useRef<{ [k: string]: any }>(defaultMarkedDate);
  const [isPickTime, setIsPickTime] = useState(false);
  const [model, setModel] = useState('time');
  const [date, setDate] = useState(props.initPickeredDate || new Date());
  const [tempDate, setTempDate] = useState(props.initPickeredDate || new Date());
  return (
    <View style={props.style}>
      <View
        style={{
          width: Dimensions.get('window').width,
          paddingBottom: 20,
          borderTopLeftRadius: 12,
          borderTopRightRadius: 12,
          backgroundColor: PruColor.white,
        }}>
        <View
          style={{
            flexDirection: 'row',
            width: '100%',
            paddingHorizontal: 14,
            paddingVertical: 18,
          }}>
          <Text
            style={{
              ...(Fonts.label.font20Bold as object),
              color: Colors.dark33,
              marginLeft: 4,
            }}>
            {Translations.title}
          </Text>
        </View>
        <ScrollView>
          <View
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              paddingHorizontal: 16,
              marginBottom: 20,
            }}>
            <TouchableOpacity
              onPress={() => {
                setModel('date');
                setIsPickTime(true);
              }}
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                flex: 1,
              }}>
              {/* <Image
                style={{
                  width: 18,
                  height: 18,
                }}
                source={salesImages.calendar}
              /> */}
              <IconFont size={18} color={color.grey85} name="calendar" />
              <Text
                style={{
                  marginLeft: 8,
                  ...(Fonts.label.font14Bold as object),
                  color: Colors.cobalt,
                  flex: 1,
                }}>
                {moment(date).format(constants.Default_Date_Format)}
              </Text>
            </TouchableOpacity>
            {
              !props.hideTime && <TouchableOpacity
                onPress={() => {
                  setModel('time');
                  setIsPickTime(true);
                }}
                style={{
                  flexDirection: 'row',
                  alignItems: 'center',
                }}>
                {/* <Image
                style={{
                  width: 18,
                  height: 18,
                }}
                source={salesImages.clock}
              /> */}

                <IconFont size={18} color={color.grey85} name="time" />
                <Text
                  style={{
                    marginLeft: 8,
                    ...(Fonts.label.font14Bold as object),
                    color: Colors.cobalt,
                  }}>
                  {moment(date).format('HH:mm')}
                </Text>
              </TouchableOpacity>
            }
          </View>
          <Calendar
            ref={calendar}
            current={tempDate}
            style={{
              backgroundColor: Colors.greyF4,
            }}
            // Initially visible month. Default = Date()
            markedDates={markedDates.current}
            // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined
            // minDate={'2012-05-10'}
            // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined
            // minDate={Date()}
            // Handler which gets executed on day press. Default = undefined
            onDayPress={(day) => {
              setModel(props.model || 'time');
              const newDate = new Date(tempDate);
              newDate.setFullYear(day.year);
              newDate.setMonth(day.month - 1);
              newDate.setDate(day.day);
              if (!props.model || props.model === 'second') {
                setTempDate(newDate);
                setIsPickTime(true);
              } else {
                const pickedDay = moment(newDate).format(dateFormat);
                Object.keys(markedDates.current).forEach((key) => {
                  markedDates.current[key] = undefined;
                });
                markedDates.current[pickedDay] = {};
                setTempDate(newDate);
                setDate(newDate);
              }
            }}
            // Handler which gets executed on day long press. Default = undefined
            onDayLongPress={(day) => {
              console.log('selected day', day);
            }}
            // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting
            monthFormat={'MMM yyyy'}
            // Handler which gets executed when visible month changes in calendar. Default = undefined
            onMonthChange={(month) => {
              console.log('month changed', month);
            }}
            // Hide month navigation arrows. Default = false
            hideArrows={false}
            // Replace default arrows with custom ones (direction can be 'left' or 'right')
            // renderArrow={(direction) => (<Arrow/>)}
            // Do not show days of other months in month page. Default = false
            hideExtraDays={true}
            // If hideArrows=false and hideExtraDays=false do not switch month when tapping on greyed out
            // day from another month that is visible in calendar page. Default = false
            disableMonthChange={false}
            // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday.
            firstDay={1}
            // Hide day names. Default = false
            hideDayNames={false}
            // Show week numbers to the left. Default = false
            showWeekNumbers={false}
            // Handler which gets executed when press arrow icon left. It receive a callback can go back month
            onPressArrowLeft={(subtractMonth) => subtractMonth()}
            // Handler which gets executed when press arrow icon right. It receive a callback can go next month
            onPressArrowRight={(addMonth) => addMonth()}
            // Disable left arrow. Default = false
            disableArrowLeft={false}
            // Disable right arrow. Default = false
            disableArrowRight={false}
            // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates
            // disableAllTouchEventsForDisabledDays={true}
            // Replace default month and year title with custom one. the function receive a date as parameter.
            // renderHeader={(date) => {/*Return JSX*/}}
            // Enable the option to swipe between months. Default = false
            enableSwipeMonths={true}
            theme={{
              calendarBackground: Colors.greyF4,
              arrowColor: Colors.greyC1,
            }}
            dayComponent={({ date, state, marking }) => {
              return (
                <TouchableOpacity
                  onPress={() => {
                    if (calendar && calendar.current && calendar.current.props.onDayPress) {
                      calendar.current.props.onDayPress(date);
                    }
                  }}
                  style={{}}>
                  <View
                    style={{
                      height: 44,
                      width: 44,
                      borderWidth: state === 'today' ? 1 : 0,
                      borderColor: '#38527E',
                      alignItems: 'center',
                      justifyContent: 'center',
                      borderRadius: 8,
                      backgroundColor: marking ? Colors.cobalt : undefined,
                    }}>
                    <Text
                      style={{
                        color: marking ? Colors.white : Colors.dark33,
                      }}>
                      {date.day}
                    </Text>
                  </View>
                </TouchableOpacity>
              );
            }}
          />
        </ScrollView>
        <TouchableOpacity
          style={{
            position: 'absolute',
            top: 22,
            right: 17.5,
          }}
          onPress={() => {
            if (props.onClose) {
              props.onClose();
            }
          }}>
          <IconFont size={18} color={color.grey85} name="close" />
        </TouchableOpacity>

        <PrimaryButton
          payload={{
            text: Translations.buttonUpdate,
            onPress: () => {
              if (props.onDateTimeConfirm) {
                props.onDateTimeConfirm(date);
              }
              if (props.onClose) {
                props.onClose();
              }
            },
          }}
          style={{
            alignSelf: 'stretch',
            marginTop: 20,
            marginHorizontal: 16,
            marginBottom: 50,
          }}
        />
      </View>
      {isPickTime ? (
        <View
          style={{
            backgroundColor: '#BABABAC0',
            position: 'absolute',
            width: '100%',
            height: '100%',
          }}>
          <View
            style={{
              backgroundColor: '#FFFFFF',
              position: 'absolute',
              bottom: 0,
              left: 0,
              right: 0,
            }}>
            <PrimaryButton
              style={{
                alignSelf: 'stretch',
                marginHorizontal: 16,
                marginVertical: 16,
              }}
              payload={{
                text: Translations.buttonConfirm,
                onPress: () => {
                  const pickedDay = moment(tempDate).format(dateFormat);
                  Object.keys(markedDates.current).forEach((key) => {
                    markedDates.current[key] = undefined;
                  });
                  markedDates.current[pickedDay] = {};
                  setDate(tempDate);
                  setIsPickTime(false);
                },
              }}
            />
            <DatePicker
              style={{
                alignSelf: 'center',
              }}
              mode={model}
              date={new Date(tempDate)}
              onDateChange={(date) => {
                setTempDate(date);
              }}
              androidVariant="nativeAndroid"
            />
          </View>
        </View>
      ) : (
        <View />
      )}
    </View>
  );
};

export { DateTimePickerView };
