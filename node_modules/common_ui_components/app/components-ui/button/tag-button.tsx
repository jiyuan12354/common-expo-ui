import * as React from 'react';
import { Text, TextStyle, ViewStyle, GestureResponderEvent } from 'react-native';
import { color, textStyleSet } from 'common_ui_components/app/theme';
import { ButtonContainer } from 'common_ui_components/app/components-ui/button/button';
import { Preset, PresetEnum } from './button.presets';

export interface TagButtonProps {
  preset?: Preset;
  text: string;
  selected?: boolean;
  disabled?: boolean;
  onPress?: (event: GestureResponderEvent) => void;
}
const TagViewBaseStyle: ViewStyle = {
  justifyContent: 'center',
  alignItems: 'center',
  paddingHorizontal: 20,
  paddingVertical: 4,
  borderRadius: 14,
  borderWidth: 1,
};
const TagTextStyle: TextStyle = {
  ...textStyleSet.text_12_med,
  color: color.grey99,
};
const getTagTextStyle = (selected?: boolean, disabled?: boolean, preset?: Preset) => {
  switch (preset) {
    case PresetEnum.primary: {
      if (disabled) {
        return {
          ...TagTextStyle,
          color: color.greycc,
        };
      }
      if (selected) {
        return {
          ...TagTextStyle,
          color: color.majorRed,
        };
      }
      return TagTextStyle;
    }
    case PresetEnum.secondary: {
      if (disabled) {
        return {
          ...TagTextStyle,
          color: color.greycc,
        };
      }
      if (selected) {
        return {
          ...TagTextStyle,
          color: color.cobalt,
        };
      }
      return TagTextStyle;
    }
    default: {
      if (disabled) {
        return {
          ...TagTextStyle,
          color: color.greycc,
        };
      }
      if (selected) {
        return {
          ...TagTextStyle,
          color: color.majorRed,
        };
      }
      return TagTextStyle;
    }
  }
};
const getTagViewStyle = (selected?: boolean, disabled?: boolean, preset?: Preset) => {
  switch (preset) {
    case PresetEnum.primary: {
      let borderColor = color.greyf0;
      if (selected) {
        borderColor = color.majorRed;
      }
      return {
        ...TagViewBaseStyle,
        borderColor,
      };
    }
    case PresetEnum.secondary: {
      let borderColor = color.greyf0;
      let bgColor = color.transparent;
      if (selected) {
        borderColor = color.cobalt;
        bgColor = color.cobaltLight;
      }
      return {
        ...TagViewBaseStyle,
        borderColor,
        backgroundColor: bgColor,
      };
    }
    default: {
      let borderColor = color.greyf0;
      if (selected) {
        borderColor = color.majorRed;
      }
      return {
        ...TagViewBaseStyle,
        borderColor,
      };
    }
  }
};
export function TagButton(props: TagButtonProps) {
  // grab the props
  const { text, selected, disabled, preset = 'primary', ...rest } = props;
  return (
    <ButtonContainer
      disabled={disabled}
      style={[getTagViewStyle(selected, disabled, preset)]}
      {...rest}>
      <Text style={[getTagTextStyle(selected, disabled, preset)]}>{text}</Text>
    </ButtonContainer>
  );
}
