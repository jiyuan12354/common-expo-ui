import * as React from 'react';
import { Text, TouchableHighlight, View } from 'react-native';
import { mergeAll, flatten } from 'ramda';
import {
  buttonViewPresets,
  buttonTextPresets,
  disabledButtonTextPresets,
  disabledButtonViewPresets,
} from 'common_ui_components/app/components-ui/button/button.presets';
import { ButtonProps } from 'common_ui_components/app/components-ui/button/button.props';
import { color } from 'common_ui_components/app/theme';

/**
 * For your text displaying needs.
 *
 * This component is a HOC over the built-in React Native one.
 */
const underlayColorMap = {
  [color.transparent]: color.greycc,
  [color.white]: color.greycc,
  [color.red]: '#BA1423',
};

const getUnderlayColor = (bgColorHex, boderColor) => {
  const _color = boderColor ?? bgColorHex;
  if (!_color) return color.greycc;
  const underlayColor = underlayColorMap[_color] ?? color.greycc;
  return underlayColor;
};

export function Button(props: ButtonProps) {
  // grab the props
  const {
    preset = 'primary',
    text,
    style: styleOverride,
    textStyle: textStyleOverride,
    children,
    disabled,
    ...rest
  } = props;
  const _buttonViewPresets = disabled ? disabledButtonViewPresets : buttonViewPresets;
  const _buttonTextPresets = disabled ? disabledButtonTextPresets : buttonTextPresets;
  const viewStyle = mergeAll(
    flatten([_buttonViewPresets[preset] || _buttonViewPresets.primary, styleOverride]),
  );

  const textStyle = mergeAll(
    flatten([_buttonTextPresets[preset] || _buttonTextPresets.primary, textStyleOverride]),
  );
  const content = children || <Text style={textStyle}>{text}</Text>;
  return (
    <ButtonContainer disabled={disabled} style={viewStyle} {...rest}>
      <Text style={textStyle}>{content}</Text>
    </ButtonContainer>
  );
}

export function ButtonContainer(props: ButtonProps) {
  // grab the props
  const {
    text,
    style: styleOverride,
    textStyle: textStyleOverride,
    children,
    disabled,
    matchParent = true,
    ...rest
  } = props;
  const viewStyle = mergeAll(
    flatten([{ alignSelf: matchParent ? 'stretch' : 'center', justifySelf: matchParent ? 'stretch' : 'center' }, styleOverride]),
  );

  const textStyle = mergeAll(flatten([textStyleOverride]));
  const content = children || <Text style={textStyle}>{text}</Text>;

  if (disabled) {
    return (
      <View style={viewStyle} {...rest}>
        {typeof content === 'object' ? <>{content}</> : <Text style={textStyle}>{content}</Text>}
      </View>
    );
  }
  return (
    <TouchableHighlight
      underlayColor={getUnderlayColor(viewStyle.backgroundColor, viewStyle.borderColor)}
      style={viewStyle}
      {...rest}>
      {typeof content === 'object' ? <>{content}</> : <Text style={textStyle}>{content}</Text>}
    </TouchableHighlight>
  );
}
