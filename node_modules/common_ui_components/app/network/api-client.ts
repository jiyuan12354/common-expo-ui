import { APIM_BASE_URL, APIM_CORE } from '@env';
import {
  BaseApiFetchInstance,
  GeneralApiProblem,
  getGeneralApiProblem,
  SSLPinFetchClient,
} from 'common_services_frontend';
import { Response } from 'react-native-basic-network';
import { GetOTPResponse } from './response/get-otp.response';
import { ValidateOTPResponse } from './response/validate-otp.response';

export enum GetOTPLangOption {
  zh = 'zh',
  en = 'en',
}
class Api {
  api: SSLPinFetchClient;

  constructor() {
    this.api = BaseApiFetchInstance;
    this.api.setPinList([APIM_BASE_URL]);
  }

  async getOtp(
    agentCode: string,
    phoneNum: string,
    lang: GetOTPLangOption,
    enableVerificationTrials?: boolean
  ): Promise<GetOTPResponse> {
    phoneNum = encodeURIComponent(phoneNum.replace(/\s/g, ''));
    const path = `${APIM_BASE_URL}${APIM_CORE}/auth/getOtp?agentCode=${agentCode}&phoneNum=${phoneNum}&lang=${lang}&enableVerificationTrials=${enableVerificationTrials ? true : false}`;
    const response: Response = await this.api.get(path);
    if (!response.ok) {
      const problem: GeneralApiProblem | void = getGeneralApiProblem(response);
      if (problem) {
        throw problem;
      }
    }
    try {
      return this.convertObject(response.data);
    } catch (error) {
      throw {
        kind: 'bad-data',
      };
    }
  }

  async validateOtp(agentCode: string, token: String, enableVerificationTrials?: boolean): Promise<ValidateOTPResponse> {
    const path = `${APIM_BASE_URL}${APIM_CORE}/auth/validateOtp?agentCode=${agentCode}&token=${token}&enableVerificationTrials=${enableVerificationTrials ? true : false}`;
    const response: Response = await this.api.get(path);
    if (!response.ok) {
      const problem: GeneralApiProblem | void = getGeneralApiProblem(response);
      if (problem) {
        throw problem;
      }
    }
    try {
      return this.convertObject(response.data);
    } catch (error) {
      throw {
        kind: 'bad-data',
      };
    }
  }

  private convertObject = (raw: any): any => {
    return { ...raw };
  };
}

export default new Api();
