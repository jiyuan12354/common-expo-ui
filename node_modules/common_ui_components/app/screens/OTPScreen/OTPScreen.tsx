import { NativeStackNavigationProp } from 'react-native-screens/lib/typescript/native-stack';
import { RouteProp } from '@react-navigation/core';
import { ParamListBase } from '@react-navigation/native';
import React, { FC, useEffect, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { View, Text, StyleSheet, Alert } from 'react-native';
import Icon from 'react-native-vector-icons/FontAwesome';
import OTPInputView from '@twotalltotems/react-native-otp-input';
import { TouchableOpacity } from 'react-native-gesture-handler';
import { PruHeader, PruScreen, PruActivityIndicator } from '../../components';
import { palette as PruPalette } from '../../theme';
import { CommonTranslateKey } from '../../translation/__translation-keys';
import Api, { GetOTPLangOption } from '../../network/api-client';
import { CommonNavigatorParams } from '../../navigation/commomNavigatorParams';
import { AppRoutes } from 'common_services_frontend';
import { GetOTPStatus } from '../../network/response/get-otp.response';
import { ValidateOTPStatus } from '../../network/response/validate-otp.response';

const screenPaddingLeft = 20;
const veriCodeBoxHeight = 60;
const resendOTPWaitSec = 60;

type OTPScreenProps = {
  navigation: NativeStackNavigationProp<ParamListBase>;
  route: RouteProp<CommonNavigatorParams, AppRoutes.OTP_SCREEN>;
};

const styles = StyleSheet.create({
  root: {
    flex: 1,
  },
  head: {
    borderBottomWidth: 1,
    borderBottomColor: PruPalette.greyeb,
  },
  fullScreenLoading: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(0,0,0,0.4)',
  },
  mainTitle: {
    fontSize: 24,
    paddingHorizontal: screenPaddingLeft,
    marginTop: 30,
    fontWeight: '500',
  },
  subtitleContainer: {
    flexDirection: 'row',
    paddingLeft: 20,
    marginTop: 15,
    alignItems: 'center',
  },
  phoneIconContainer: {
    width: 25,
    height: 25,
    padding: 5,
    borderRadius: 15,
    borderColor: '#fff',
    backgroundColor: 'red',
    marginRight: 10,
  },
  phoneNumText: {
    fontSize: 17,
    color: 'red',
  },
  veriCodeBlockContainer: {
    margin: 20,
  },
  veriCodeMsg: {
    fontSize: 17,
    fontWeight: '500',
    marginBottom: 15,
  },
  veriCodeBox: {
    width: 45,
    height: veriCodeBoxHeight,
    color: 'gray',
    fontSize: 30,
    backgroundColor: 'white',
    borderWidth: 0,
    borderRadius: 8,
  },
  errorMsgText: {
    fontSize: 17,
    marginTop: 20,
  },
  resendOTPBtnBase: {
    alignSelf: 'flex-start',
    justifyContent: 'center',
    borderRadius: 13,
    borderWidth: 2,
    marginTop: 20,
    width: 120,
    height: 38,
  },
  resendOTPBtnDisabled: {
    borderColor: 'rgb(191,191,191)',
  },
  resendOTPBtnEnabled: {
    borderColor: 'black',
  },
  resendOTPBtnTextBase: {
    paddingVertical: 8,
    fontWeight: '500',
    textAlignVertical: 'center',
    textAlign: 'center',
  },
  resendOTPBtnTextDisabled: {
    paddingHorizontal: 10,
    color: 'rgb(191,191,191)',
  },
  resendOTPBtnTextEnabled: {
    paddingHorizontal: 0,
    color: 'black',
  },
});

export const OTPScreen: FC<OTPScreenProps> = ({ navigation, route }) => {
  const { t, i18n } = useTranslation('Common');
  const { username, agentCode, successCallback, enableVerificationTrials } = route.params;
  const [phoneNum, setPhoneNum] = useState(route.params.phoneNum);
  const [otpSentTitle, setOtpSentTitle] = useState('');
  const [maskedPhoneNum, setMaskedPhoneNum] = useState('');
  const [timerCntSec, setTimerCntSec] = useState(0);
  const [isManualGetOtp, setIsManualGetOtp] = useState(false);
  const [statusMsg, setStatusMsg] = useState('');
  const [isErrorStatus, setIsErrorStatus] = useState(false);
  const [gettingOtp, setGettingOtp] = useState(true);
  const [validating, setValidating] = useState(false);

  let interval = useRef(0);

  const fireCntDown = () => {
    setTimerCntSec(resendOTPWaitSec);
    interval.current = setInterval(() => {
      setTimerCntSec((lastTimerCount) => {
        lastTimerCount <= 1 && clearInterval(interval.current);
        return lastTimerCount - 1;
      });
    }, 1000);
  };

  const onResendOTPBtnClicked = () => {
    setIsManualGetOtp(true);
    setStatusMsg('');
    getOtp();
  };

  const getOtp = async () => {
    setGettingOtp(true);
    setTimerCntSec(0);
    try {
      const res = await Api.getOtp(
        agentCode,
        phoneNum,
        i18n.language === 'en' ? GetOTPLangOption.en : GetOTPLangOption.zh,
        enableVerificationTrials,
      );
      if (res.status === GetOTPStatus.success) {
        if (isManualGetOtp) {
          setStatusMsg(t(CommonTranslateKey.newTokenHasBeenSent));
          setIsErrorStatus(false);
        }
        fireCntDown();
      } else if (res.status === GetOTPStatus.requestTooFrequent) {
        setStatusMsg(t(CommonTranslateKey.request_too_frequent));
        setIsErrorStatus(true);
        fireCntDown();
      } else if (res.status === GetOTPStatus.temporarilyUnavailable) {
        setStatusMsg(t(CommonTranslateKey.otp_temporarily_unavailable));
        setIsErrorStatus(true);
        setTimerCntSec(0);
      }else if (res.status === GetOTPStatus.wholeDayUnavailable) {
        setStatusMsg(t(CommonTranslateKey.otp_whole_day_unavailable));
        setIsErrorStatus(true);
        setTimerCntSec(0);
      }  else {
        setStatusMsg(t(CommonTranslateKey.unknown_error_retry));
        setIsErrorStatus(true);
        setTimerCntSec(0);
      }
    } catch (e) {
      console.log(e);
      setStatusMsg(t(CommonTranslateKey.unknown_error_retry));
      setIsErrorStatus(true);
    }
    setGettingOtp(false);
  };

  const onCodeFilled = async (token: String) => {
    if (!validating) {
      setValidating(true);
      try {
        const res = await Api.validateOtp(agentCode, token, enableVerificationTrials);
        if (res.status === ValidateOTPStatus.success) {
          clearInterval(interval.current);
          setTimerCntSec(0);
          if (successCallback) {
            successCallback();
          }
        } else if (res.status === ValidateOTPStatus.tokenExpired) {
          setStatusMsg(t(CommonTranslateKey.otp_expired));
          setIsErrorStatus(true);
          clearInterval(interval.current);
          setTimerCntSec(0);
        } else if (res.status === ValidateOTPStatus.tokenInvalid) {
          setStatusMsg(t(CommonTranslateKey.otp_invalid));
          setIsErrorStatus(true);
        } else if (res.status === ValidateOTPStatus.temporarilyUnavailable) {
          setStatusMsg(t(CommonTranslateKey.otp_temporarily_unavailable));
          setIsErrorStatus(true);
          clearInterval(interval.current);
          setTimerCntSec(0);
        }else if (res.status === ValidateOTPStatus.wholeDayUnavailable) {
          setStatusMsg(t(CommonTranslateKey.otp_whole_day_unavailable));
          setIsErrorStatus(true);
          clearInterval(interval.current);
          setTimerCntSec(0);
        }  else {
          setStatusMsg(t(CommonTranslateKey.unknown_error_retry));
          setIsErrorStatus(true);
        }
      } catch (e) {
        console.log(e);
        setStatusMsg(t(CommonTranslateKey.unknown_error_retry));
        setIsErrorStatus(true);
      }

      setValidating(false);
    }
  };

  useEffect(() => {
    if (agentCode && phoneNum && phoneNum.length >= 13) {
      const formattedPhoneNum = phoneNum.slice(0, 9) + ' ' + phoneNum.slice(9);
      setPhoneNum(formattedPhoneNum);
      setMaskedPhoneNum(formattedPhoneNum.slice(0, 5) + '****' + formattedPhoneNum.slice(9));
      getOtp();
      let tmpTitle = t('otp_sms_sent');
      if (username) {
        setOtpSentTitle(tmpTitle.replace('[[username]]', username));
      } else {
        setOtpSentTitle(tmpTitle.replace('[[username]]', i18n.language === 'en' ? 'your' : 'æ‚¨'));
      }
    } else {
      Alert.alert(t(CommonTranslateKey.unknown_error_retry));
      if (navigation.canGoBack()) {
        navigation.goBack();
      }
    }
    return () => clearInterval(interval.current);
  }, []);

  return (
    <PruScreen style={styles.root}>
      <PruHeader
        style={styles.head}
        headerText={t(CommonTranslateKey.phoneVerification)}
        leftIcon="arrow_back"
        onLeftPress={() => {
          if (navigation.canGoBack()) {
            navigation.goBack();
          }
        }}
      />
      <View style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>
        <View style={{ height: 170 }}>
          <Text style={styles.mainTitle}>{otpSentTitle}</Text>
          <View style={styles.subtitleContainer}>
            <View style={styles.phoneIconContainer}>
              <Icon name={'phone'} size={15} color="#fff" style={{ marginLeft: 2, marginTop: 1 }} />
            </View>
            <Text style={styles.phoneNumText}>{maskedPhoneNum}</Text>
          </View>
        </View>
        <View style={{ flex: 1, backgroundColor: '#f4f4f4' }}>
          <View style={styles.veriCodeBlockContainer}>
            <Text style={styles.veriCodeMsg}>{t('enter_veri_code')}</Text>
            <OTPInputView
              pinCount={6}
              style={{ height: veriCodeBoxHeight }}
              autoFocusOnLoad={true}
              codeInputFieldStyle={styles.veriCodeBox}
              onCodeFilled={onCodeFilled}
              secureTextEntry={true}></OTPInputView>
            {statusMsg !== '' && (
              <Text style={{ ...styles.errorMsgText, color: isErrorStatus ? 'red' : 'black' }}>
                {statusMsg}
              </Text>
            )}
            <View
              style={[
                styles.resendOTPBtnBase,
                timerCntSec == 0 && !gettingOtp
                  ? styles.resendOTPBtnEnabled
                  : styles.resendOTPBtnDisabled,
              ]}>
              <TouchableOpacity
                disabled={timerCntSec > 0 && !gettingOtp}
                onPress={onResendOTPBtnClicked}
                style={{ flexDirection: 'row', justifyContent: 'center' }}>
                <Text
                  style={[
                    styles.resendOTPBtnTextBase,
                    timerCntSec == 0 && !gettingOtp
                      ? styles.resendOTPBtnTextEnabled
                      : styles.resendOTPBtnTextDisabled,
                  ]}>
                  {t(CommonTranslateKey.otp_resend) +
                    (i18n.language === 'en' ? ' ' : '') +
                    (timerCntSec > 0 ? `(${timerCntSec}s)` : '')}
                </Text>
                {gettingOtp && (
                  <PruActivityIndicator color="rgb(191,191,191)" size={15}></PruActivityIndicator>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </View>
      {validating && <PruActivityIndicator style={styles.fullScreenLoading} />}
    </PruScreen>
  );
};
