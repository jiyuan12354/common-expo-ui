import {
  BaseApiFetchInstance,
  getGeneralApiProblem,
  SSLPinFetchClient,
} from 'common_services_frontend';
import { Response } from 'react-native-basic-network';
import { APIM_BASE_URL, APIM_CORE } from '@env';

import * as Types from './api.types';

// import { Object } from '../../redux/Object/model';

/**
 * Manages all requests to the API.
 */
export class Api {
  api: SSLPinFetchClient;

  /**
   * Creates the api.
   *
   * @param config The configuration to use.
   */
  constructor() {
    this.api = BaseApiFetchInstance;
  }

  /**
   * Gets a list of Objects.
   */
  async getSAAMToken(passcode: string): Promise<Types.GetSAAMTokenResult> {
    const response: Response = await this.api.post(
      `${APIM_BASE_URL}${APIM_CORE}/integration/token?issuer=saam`,
      { password: passcode },
    );
    // the typical ways to die when calling an api
    if (!response.ok || typeof response.data === 'string') {
      const problem = getGeneralApiProblem(response);
      if (response.status === 503) {
        // return this.getSAAMToken(passcode);
      }
      if (problem) return problem;
    }
    const convertObject = (raw): any => {
      return {
        issuer: raw.issuer,
        userRole: raw.meta.OAM_USERROLE,
        cookieKey: raw.meta.DCC_OAMAuthnCookieKey,
        cookieValue: raw.meta.DCC_OAMAuthnCookieValue,
        statusCode: raw.meta.STATUS_CODE,
      };
    };
    // transform the data into the format we are expecting
    try {
      const resultObjects: any = convertObject(response.data);
      return {
        kind: 'ok',
        saamResponse: resultObjects,
      };
    } catch (error) {
      return { kind: 'bad-data' };
    }
  }
}

export const api = new Api();
