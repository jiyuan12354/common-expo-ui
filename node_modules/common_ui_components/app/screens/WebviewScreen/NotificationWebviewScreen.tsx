import * as React from 'react';
import { ParamListBase } from '@react-navigation/native';
import { NativeStackNavigationProp } from 'react-native-screens/native-stack';
import { WebviewScreen } from './WebviewScreen';
import { Header } from '../../components/base/header/header';
import {
  LoggerHelper,
  GlobalHelper,
  linkType,
  transferShareLink,
  LogActionType,
  LogSourceType,
} from 'common_services_frontend';
import { CommonTranslateKey } from '../../translation/__translation-keys';
import {spacing} from '../../theme'
import SharePopup, {
  SharePopupForCandidate,
} from '../../components/common/share-popup';
import { palette } from '../../theme';
import { ViewStyle } from 'react-native';
import { useTranslation } from 'react-i18next';
import { LogRemark } from 'common_services_frontend/src/helpers/LoggerHelpers';

export interface NotificationWebviewScreenProps {
  navigation: NativeStackNavigationProp<ParamListBase>;
  route: any;
}

const HEAD: ViewStyle = {
  borderBottomWidth: 1,
  borderBottomColor: palette.greyeb,
};

export const NotificationWebviewScreen: React.FunctionComponent<NotificationWebviewScreenProps> = (
  props,
) => {
  const { t, i18n } = useTranslation();
  const headerText = props.route.params ? props.route.params.header || '' : '';
  const leftIcon = true ? 'close' : 'arrow_back';
  const shareTitleMap = {
    [linkType.DEFAULT]: t(CommonTranslateKey.share_title_for_default),
    [linkType.IIQE]: t(CommonTranslateKey.share_title_for_iiqe),
    [linkType.INTERVIEW]: t(CommonTranslateKey.share_title_for_interview),
    [linkType.PRUDNA]: t(CommonTranslateKey.share_title_for_prudna),
    [linkType.PRUDNA_REPORT]: t(CommonTranslateKey.share_title_for_prudna_report),
  };
  const shareDescriptionMap = {
    [linkType.DEFAULT]: t(CommonTranslateKey.share_description_for_default),
    [linkType.IIQE]: t(CommonTranslateKey.share_description_for_iiqe),
    [linkType.INTERVIEW]: t(CommonTranslateKey.share_description_for_interview),
    [linkType.PRUDNA]: t(CommonTranslateKey.share_description_for_prudna),
    [linkType.PRUDNA_REPORT]: t(CommonTranslateKey.share_description_for_prudna_report),
  };
  const shareLinkType: linkType = props.route.params?.linkType || linkType.DEFAULT;
  if (shareLinkType === linkType.PRUDNA_REPORT) {
    LoggerHelper.emit({
      source: '',
      sourceType: LogSourceType.PRUDNA_REPORT,
      actionType: LogActionType.VIEW,
      actionEntry: 'Push',
      remarks: LogRemark.View_PRUDNA_REPORT,
    });
  }
  const rightIconOption =
    shareLinkType !== linkType.DEFAULT
      ? {
          rightIcon: 'share',
          onRightPress: () => {
            GlobalHelper.setCurrentCandidatePhone(props.route.params?.phone || '');
            SharePopupForCandidate({
              title: shareTitleMap[shareLinkType],
              message: shareDescriptionMap[shareLinkType],
              url: transferShareLink({
                url: props.route.params?.url,
                type: shareLinkType,
              }),
              log: {
                source_type: shareLinkType.toLocaleLowerCase().replace('_', ' '),
              }
            });
          },
        }
      : {};
  const headerComponent = (
    <Header
      style={HEAD}
      headerText={headerText}
      titleStyle={{
        fontSize: 20,
        fontWeight: 'bold',
        color: palette.grey33,
        textAlign: 'left',
      }}
      leftIcon={leftIcon}
      iconStyle={{ marginLeft: spacing.spacing8 }}
      {...rightIconOption}
      onLeftPress={() => {
        props.navigation.goBack();
      }}
    />
  );
  return (
    <>
      <WebviewScreen header={headerComponent} {...props} />
    </>
  );
};
