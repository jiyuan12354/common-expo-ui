import * as React from 'react';
import { useSelector } from 'react-redux';
import { ViewStyle, TouchableOpacity, View, Dimensions, TextInput } from 'react-native';
import { ParamListBase } from '@react-navigation/native';
import { NativeStackNavigationProp } from 'react-native-screens/native-stack';
import {
  AppRoutes,
  ResourceContentType,
  ResourceTypeMap2Index,
  CommonApi,
} from 'common_services_frontend';

import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { IconFont as PruIconFont } from '../../components/icon-font/icon-font';
import { onResourceItemPressed } from 'common_services_frontend/src/common-logic/portal-resource';
import { TabView, TabBar } from 'react-native-tab-view';
import { color, palette, spacing } from '../../theme';

import { MaterialSection } from '../../components/recruitment/material-page/material-section';
import { TestID } from '../../components/test-id';
import { Screen } from '../../components/base/screen/screen';
import { CommonTranslateKey } from '../../translation/__translation-keys';

export interface ResourceSearchScreenProps {
  navigation: NativeStackNavigationProp<ParamListBase>;
  route: any;
}

const ROOT: ViewStyle = {
  width: Dimensions.get('window').width,
};

const SEARCH_HEADER: ViewStyle = {
  flexDirection: 'row',
  width: Dimensions.get('window').width,
  height: 44,
};

const searchHeight = 32;

export const SearchItemStyle: ViewStyle = {
  borderRadius: 16,
  height: searchHeight,
  backgroundColor: palette.greyeb,
  paddingRight: spacing.spacing4,
  marginVertical: spacing.spacing6,
  marginRight: spacing.spacing20,
};
export const SearchInputStyle = {
  flex: 1,
  fontSize: 14,
  backgroundColor: color.transparent,
  height: searchHeight,
  paddingVertical: 0,
};

export const ResourceSearchScreen: React.FunctionComponent<ResourceSearchScreenProps> = (props) => {
  const [searchKey, setSearchKey] = useState('');
  const { t } = useTranslation();
  const authState = useSelector((state: any) => {
    return state?.auth;
  });
  const onSearchKeyChange = (value) => {
    setSearchKey(value);
  };

  const onClear = () => {
    setSearchKey('');
  };
  const [index, setIndex] = React.useState(0);
  const [routes] = React.useState([
    { key: 'all', title: t('Common:all') },
    { key: AppRoutes.SALES_KIT, title: t('SalesKit:user_promotion') },
    { key: AppRoutes.SALES_KIT_SALES_RESOURCE, title: t('SalesKit:sales_resource') },
  ]);

  const placeholderTip = t(CommonTranslateKey.search_for);

  const allType = `${ResourceContentType.PromotionMaterial},${ResourceContentType.SalesMaterial}`;
  // const allType = `${ResourceContentType.SalesMaterial},${ResourceContentType.PromotionMaterial}`;

  const renderScene = ({ route }) => {
    if (index === 0) {
      switch (route.key) {
        case AppRoutes.SALES_KIT:
          return null;
        case AppRoutes.SALES_KIT_SALES_RESOURCE:
          return null;
        default:
          return (
            <MaterialSection
              onResourceItemPressed={(resource) => {
                onResourceItemPressed(resource, authState?.publicToken, 2);
                CommonApi.postContentSalesReadlog(resource.uuid);
              }}
              isHeaderHide={true}
              contentType={allType}
              tagWithCount
              searchKey={searchKey}
              search
              onResourceSearch={() => { }}
            />
          );
      }
    } else if (index === 1) {
      switch (route.key) {
        case AppRoutes.SALES_KIT:
          return (
            <MaterialSection
              onResourceItemPressed={(resource) => {
                onResourceItemPressed(resource, authState?.publicToken, 2);
                CommonApi.postContentSalesReadlog(resource.uuid);
              }}
              contentType={ResourceContentType.PromotionMaterial}
              tagWithCount
              searchKey={searchKey}
              search
              onResourceSearch={() => { }}
            />
          );
        case AppRoutes.SALES_KIT_SALES_RESOURCE:
          return null;
        default:
          return null;
      }
    } else {
      switch (route.key) {
        case AppRoutes.SALES_KIT:
          return null;
        case AppRoutes.SALES_KIT_SALES_RESOURCE:
          return (
            <MaterialSection
              onResourceItemPressed={(resource) => {
                onResourceItemPressed(resource, authState?.publicToken, 3);
                CommonApi.postContentSalesReadlog(resource.uuid);
              }}
              contentType={ResourceContentType.SalesMaterial}
              tagWithCount
              searchKey={searchKey}
              search
              onResourceSearch={() => { }}
            />
          );
        default:
          return null;
      }
    }
  };

  return (
    <Screen style={ROOT}>
      <View testID={TestID.Header} accessibilityLabel={TestID.Header} style={[SEARCH_HEADER]}>
        <TouchableOpacity
          activeOpacity={0.9}
          testID={TestID.LeftIcon}
          style={{
            height: 44,
            justifyContent: 'center',
            paddingRight: spacing.spacing14,
            paddingLeft: spacing.spacing18,
          }}
          onPress={() => {
            props.navigation.goBack();
          }}>
          <PruIconFont name="arrow_back" size={24} color={palette.grey33} />
        </TouchableOpacity>
        <View
          style={{
            height: 44,
            backgroundColor: palette.white,
            flex: 1,
          }}>
          <View
            style={[
              SearchItemStyle,
              {
                flexDirection: 'row',
                justifyContent: 'center',
              },
            ]}>
            <PruIconFont
              style={{
                padding: spacing.spacing8,
              }}
              name="search"
              size={16}
              color={palette.greyba}
            />
            <TextInput
              testID={TestID.SearchInput}
              autoFocus
              value={searchKey}
              onChange={(target) => onSearchKeyChange(target.nativeEvent.text)}
              placeholder={placeholderTip}
              placeholderTextColor={palette.greyba}
              underlineColorAndroid={color.transparent}
              style={[SearchInputStyle, { lineHeight: 20 }]}
            />

            <TouchableOpacity
              activeOpacity={0.9}
              testID={TestID.ClearIcon}
              style={{
                position: 'absolute',
                right: spacing.spacing2,
              }}
              onPress={onClear}>
              <PruIconFont
                style={{
                  padding: spacing.spacing8,
                }}
                name="text_delete"
                size={16}
                color={palette.greyba}
              />
            </TouchableOpacity>
          </View>
        </View>
      </View>

      {/* <View style={{ backgroundColor: '#123456', height: 40, width: 200 }} /> */}

      {props.route.params.contentType === ResourceContentType.RecruitmentMaterial ? (
        <MaterialSection
          onResourceItemPressed={(resource) =>
            onResourceItemPressed(
              resource,
              authState?.publicToken,
              ResourceTypeMap2Index[props.route.params.contentType as ResourceContentType],
            )
          }
          contentType={props.route.params.contentType}
          tagWithCount
          searchKey={searchKey}
          search
          onResourceSearch={() => { }}
        />
      ) : (
        <TabView
          style={{}}
          navigationState={{ index, routes }}
          onIndexChange={setIndex}
          renderScene={renderScene}
          renderTabBar={(props) => (
            <TabBar
              activeColor={palette.cobalt}
              inactiveColor={palette.grey85}
              indicatorStyle={{ backgroundColor: palette.cobalt }}
              style={{ backgroundColor: palette.white }}
              tabStyle={{ width: 'auto' }}
              labelStyle={{ fontSize: 16, lineHeight: 24, fontWeight: '500' }}
              getLabelText={({ route }) => route.title}
              {...props}
            />
          )}
        />
      )}
    </Screen>
  );
};
