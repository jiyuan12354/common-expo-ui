import React, { useCallback } from 'react';
import { ParamListBase, useFocusEffect } from '@react-navigation/native';
import { ViewStyle } from 'react-native';
import { palette } from '../../theme';
import { Screen } from '../../components/base/screen/screen';
import { NativeStackNavigationProp } from 'react-native-screens/lib/typescript/native-stack';
import { Header } from 'common_ui_components/app/components/base/header/header';
import { useTranslation } from 'react-i18next';
import { EventPage } from 'common_ui_components/app/components/events/event-page/event-page';
import {
  AppRoutes,
  EventContentType,
  GlobalHelper,
  setFilterOption,
} from 'common_services_frontend';
import { CommonTranslateKey } from 'common_ui_components/app/translation/__translation-keys';
import { useDispatch } from 'react-redux';

const ROOT: ViewStyle = {
  flex: 1,
  backgroundColor: palette.white,
};

export interface EventListScreenProps {
  navigation: NativeStackNavigationProp<ParamListBase>;
  route: any;
}

export const EventListScreen: React.FunctionComponent<EventListScreenProps> = (props) => {
  const { route, navigation } = props;
  const { t } = useTranslation();
  const dispatch = useDispatch();

  useFocusEffect(
    useCallback(() => {
      const timer = setTimeout(() => {
        if (GlobalHelper.getPreviousRoute() !== AppRoutes.HOME_EventDetailsScreen) {
          dispatch(setFilterOption({}));
        }
      }, 0);
      return () => clearTimeout(timer);
    }, []),
  );
  return (
    <Screen style={ROOT}>
      <Header
        headerText={t(CommonTranslateKey.event)}
        style={{
          borderBottomWidth: 1,
          borderBottomColor: palette.greyf4,
        }}
        titleStyle={{
          fontSize: 20,
          fontWeight: 'bold',
          color: palette.grey33,
          textAlign: 'left',
        }}
        leftIcon="arrow_back"
        onLeftPress={() => {
          navigation.goBack();
        }}
      />
      <EventPage contentType={EventContentType.Event} />
    </Screen>
  );
};
