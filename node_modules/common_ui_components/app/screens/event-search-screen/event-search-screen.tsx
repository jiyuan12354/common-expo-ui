import React, { useState } from 'react';
import { ParamListBase } from '@react-navigation/native';
import { NativeStackNavigationProp } from 'react-native-screens/lib/typescript/native-stack';
import { Dimensions, TextInput, TouchableOpacity, View, ViewStyle } from 'react-native';
// import { useNavigation } from "@react-navigation/native"
import { color, spacing } from '../../theme';
import { Screen } from '../../components/base/screen/screen';
import { useTranslation } from 'react-i18next';
import { SearchItemStyle, SearchInputStyle } from 'common_ui_components';
import { palette as PruPalette } from '../../theme';
import { CommonTranslateKey } from '../../translation/__translation-keys';
import { TestID } from '../../components/test-id';
import { ErrorHandlePageWrapper, PruIconFont } from '../../components';
import { EventSection } from '../../components/events/event-page/event-section';
import { EventContentType } from 'common_services_frontend';

const ROOT: ViewStyle = {
  flex: 1,
};
const SEARCH_HEADER: ViewStyle = {
  flexDirection: 'row',
  width: Dimensions.get('window').width,
  height: 44,
};

export interface EventSearchScreenProps {
  navigation: NativeStackNavigationProp<ParamListBase>;
  route: any;
}

export const EventSearchScreen: React.FunctionComponent<EventSearchScreenProps> = (props) => {
  // Pull in navigation via hook
  const { t } = useTranslation();
  const [searchKey, setSearchKey] = useState('');
  const onSearchKeyChange = (value: string) => {
    setSearchKey(value);
  };

  const onClear = () => {
    setSearchKey('');
  };

  const placeholderTip = t(CommonTranslateKey.search_event_placeholder);
  return (
    <Screen style={ROOT}>
      <View testID={TestID.Header} accessibilityLabel={TestID.Header} style={[SEARCH_HEADER]}>
        <TouchableOpacity
          activeOpacity={0.9}
          testID={TestID.LeftIcon}
          style={{
            height: 44,
            justifyContent: 'center',
            paddingRight: spacing.spacing14,
            paddingLeft: spacing.spacing18,
          }}
          onPress={() => {
            props.navigation.goBack();
          }}>
          <PruIconFont name="arrow_back" size={24} color={PruPalette.grey33} />
        </TouchableOpacity>
        <View
          style={{
            height: 44,
            backgroundColor: PruPalette.white,
            flex: 1,
          }}>
          <View
            style={[
              SearchItemStyle,
              {
                flexDirection: 'row',
                justifyContent: 'center',
              },
            ]}>
            <PruIconFont
              style={{
                padding: spacing.spacing8,
              }}
              name="search"
              size={16}
              color={PruPalette.greyba}
            />
            <TextInput
              testID={TestID.SearchInput}
              autoFocus
              value={searchKey}
              onChange={(target) => onSearchKeyChange(target.nativeEvent.text)}
              placeholder={placeholderTip}
              placeholderTextColor={PruPalette.greyba}
              underlineColorAndroid={color.transparent}
              style={[SearchInputStyle, { lineHeight: 20 }]}
            />

            <TouchableOpacity
              activeOpacity={0.9}
              testID={TestID.ClearIcon}
              style={{
                position: 'absolute',
                right: spacing.spacing2,
              }}
              onPress={onClear}>
              <PruIconFont
                style={{
                  padding: spacing.spacing8,
                }}
                name="text_delete"
                size={16}
                color={PruPalette.greyba}
              />
            </TouchableOpacity>
          </View>
        </View>
      </View>
      {ErrorHandlePageWrapper(
        <EventSection
          search
          searchKey={searchKey}
          contentType={EventContentType.Event}
          {...props}
        />,
      )}
    </Screen>
  );
};
