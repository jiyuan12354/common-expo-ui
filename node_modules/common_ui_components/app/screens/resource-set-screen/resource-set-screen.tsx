import React, { useState, useEffect, useCallback } from 'react';
import { useFocusEffect } from '@react-navigation/core';

import { ParamListBase } from '@react-navigation/native';
import { Dimensions, Image, ImageBackground, Text, View, ViewStyle } from 'react-native';
// import { useNavigation } from "@react-navigation/native"
import { NativeStackNavigationProp } from 'react-native-screens/lib/typescript';
import {  TransparentHeader as PruTransparentHeader } from '../../components/common/transparent-header/transparent-header';
import { ResourceList } from '../../components/recruitment/resource-list/resource-list';
import { onResourceItemPressed } from 'common_services_frontend/src/common-logic/portal-resource';
import { useDispatch, useSelector } from 'react-redux';
import {
  LoggerHelper,
  LogSourceType,
  LogActionType,
  LogRemark,
  ContentSalesReadlog,
  selectContentReadlog,
  CommonApi,
  getContentSalesReadlogAsync
} from 'common_services_frontend';
import { Resource } from '../../components/model/common';
import { Screen } from '../../components/base/screen/screen';
import { color, palette, spacing, textStyleSet } from '../../theme';

const ROOT: ViewStyle = {
  flex: 1,
  backgroundColor: palette.greyeb,
};
const HEAD: ViewStyle = {
  backgroundColor: color.transparent,
  zIndex: 99,
  position: 'absolute',
  width: 414,
  left: spacing.spacing8,
  top: 0,
};

export interface ResourceSetScreenProps {
  navigation: NativeStackNavigationProp<ParamListBase>;
  route: any;
}

export const ResourceSetScreen: React.FunctionComponent<ResourceSetScreenProps> = (props) => {
  const dispatch = useDispatch();

  const { resource } = props.route.params;
  const ctype: number = props.route.params.ctype || 1;
  const dimensions = Dimensions.get('window');
  const imageHeight = Math.round((dimensions.width * 9) / 16);
  const imageWidth = dimensions.width;

  const [readLogs, setReadLogs] = useState([] as ContentSalesReadlog[]);

  const authState = useSelector((state: any) => {
    return state?.auth;
  });
  const contentReadlogSelector = useSelector(selectContentReadlog);

  useFocusEffect(
    useCallback(() => {
      setReadLogs(contentReadlogSelector);
    }, [contentReadlogSelector]),
  );
  useFocusEffect(
    useCallback(() => {
      dispatch(getContentSalesReadlogAsync());
    }, []),
  );


  return (
    <Screen style={ROOT}>
      <ImageBackground
        source={{ uri: resource.portalLink }}
        // resizeMode='cover'
        style={{
          width: imageWidth,
          height: imageHeight,
          shadowColor: 'rgba(222, 222, 222, 0.5)',
          zIndex: 2,
          shadowOffset: {
            width: 0,
            height: 1,
          },
          // shadowRadius: 16,
          shadowOpacity: 1,
        }}>
        <PruTransparentHeader
          style={HEAD}
          headerText={resource.title}
          titleStyle={{
            fontSize: 20,
            fontWeight: 'bold',
            color: palette.greyeb,
            textAlign: 'left',
            paddingLeft: spacing.spacing8,
          }}
          leftIcon="arrow_back"
          onLeftPress={() => {
            props.navigation.goBack();
          }}
          iconStyle={{
            tintColor: palette.greyeb,
          }}
        />
      </ImageBackground>
      <View
        style={{
          width: imageWidth,
          backgroundColor: palette.white,
          padding: spacing.spacing16,
        }}>
        <Text
          style={{
            ...textStyleSet.title_20_med,
            color: palette.grey33,
            lineHeight: 20,
            flexWrap: 'wrap',
            paddingVertical: 4,
          }}>
          {resource.title}
        </Text>
      </View>
      <View
        style={{
          paddingTop: spacing.spacing12,
          backgroundColor: palette.greyeb,
          flex: 1,
        }}>
        <ResourceList
          data={resource.resources || []}
          readLog={readLogs}
          onItemPressed={(resourceItem) => {
            CommonApi.postContentSalesReadlog(resourceItem.uuid);
            const whichSet = `Resource set: ${resource.title}(${resource.sid})`;
            LoggerHelper.emit(
              {
                source: `${resourceItem.title}(${resourceItem.sid})`,
                sourceType: LogSourceType.RESOURCE_LIBRARY,
                actionType: LogActionType.VIEW,
                remarks: LogRemark.PREVIEW_RESOURCE,
              },
              {
                category: whichSet,
                resource_column: resource.resource_column,
                key_words: resource?.key_words,
                action_entry: `${resource.action_entry}--${whichSet}`,
              },
            );
            onResourceItemPressed(
              {
                ...resourceItem,
                resource_column: resource.resource_column,
                key_words: resource?.key_words,
                set: whichSet,
                action_entry: `${resource.action_entry}--${whichSet}`,
              },
              authState?.publicToken,
              ctype,
            );
          }}
        />
      </View>
    </Screen>
  );
};
